
DiscoF411_StateMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009360  08009360  00019360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009384  08009384  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08009384  08009384  00019384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800938c  0800938c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08009394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  2000009c  08009430  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bd4  08009430  00020bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abdf  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c54  00000000  00000000  0003acee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102a  00000000  00000000  00040e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b248  00000000  00000000  00041eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002078c  00000000  00000000  0005d0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f3e  00000000  00000000  0007d87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058f4  00000000  00000000  0010e7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  001140b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000009c 	.word	0x2000009c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009348 	.word	0x08009348

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	08009348 	.word	0x08009348

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_DMA_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	203a      	movs	r0, #58	; 0x3a
 80004fc:	f000 ff31 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000500:	203a      	movs	r0, #58	; 0x3a
 8000502:	f000 ff4a 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2046      	movs	r0, #70	; 0x46
 800050c:	f000 ff29 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000510:	2046      	movs	r0, #70	; 0x46
 8000512:	f000 ff42 	bl	800139a <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08c      	sub	sp, #48	; 0x30
 8000528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
 800053e:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a60      	ldr	r2, [pc, #384]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000544:	f043 0310 	orr.w	r3, r3, #16
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b5e      	ldr	r3, [pc, #376]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0310 	and.w	r3, r3, #16
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	4b5a      	ldr	r3, [pc, #360]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a59      	ldr	r2, [pc, #356]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b57      	ldr	r3, [pc, #348]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	4b53      	ldr	r3, [pc, #332]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a52      	ldr	r2, [pc, #328]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 800057c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b50      	ldr	r3, [pc, #320]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a4b      	ldr	r2, [pc, #300]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a44      	ldr	r2, [pc, #272]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a3d      	ldr	r2, [pc, #244]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2108      	movs	r1, #8
 80005e6:	4838      	ldr	r0, [pc, #224]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 80005e8:	f001 fbe6 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4836      	ldr	r0, [pc, #216]	; (80006cc <MX_GPIO_Init+0x1a8>)
 80005f2:	f001 fbe1 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005f6:	2200      	movs	r2, #0
 80005f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005fc:	4834      	ldr	r0, [pc, #208]	; (80006d0 <MX_GPIO_Init+0x1ac>)
 80005fe:	f001 fbdb 	bl	8001db8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000602:	2304      	movs	r3, #4
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	482c      	ldr	r0, [pc, #176]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 8000616:	f001 fa4b 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800061a:	2308      	movs	r3, #8
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4825      	ldr	r0, [pc, #148]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 8000632:	f001 fa3d 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000636:	2332      	movs	r3, #50	; 0x32
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800063a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	481f      	ldr	r0, [pc, #124]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 800064c:	f001 fa30 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000650:	2301      	movs	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4819      	ldr	r0, [pc, #100]	; (80006cc <MX_GPIO_Init+0x1a8>)
 8000668:	f001 fa22 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000670:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4814      	ldr	r0, [pc, #80]	; (80006d4 <MX_GPIO_Init+0x1b0>)
 8000682:	f001 fa15 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000686:	f24f 0310 	movw	r3, #61456	; 0xf010
 800068a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0x1ac>)
 80006a0:	f001 fa06 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006a4:	2320      	movs	r3, #32
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_GPIO_Init+0x1ac>)
 80006b8:	f001 f9fa 	bl	8001ab0 <HAL_GPIO_Init>

}
 80006bc:	bf00      	nop
 80006be:	3730      	adds	r7, #48	; 0x30
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40020000 	.word	0x40020000

080006d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f002 ff8d 	bl	8003634 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 fa50 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000b8 	.word	0x200000b8
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_I2C_MspInit+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d12c      	bne.n	80007b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000772:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <HAL_I2C_MspInit+0x8c>)
 8000790:	f001 f98e 	bl	8001ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_I2C_MspInit+0x88>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2S2_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <MX_I2S2_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2S2_Init+0x50>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2S2_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_I2S2_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_I2S2_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_I2S2_Init+0x50>)
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <MX_I2S2_Init+0x58>)
 80007ec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2S2_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_I2S2_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2S2_Init+0x50>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_I2S2_Init+0x50>)
 8000802:	f003 f85b 	bl	80038bc <HAL_I2S_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f9da 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000010c 	.word	0x2000010c
 8000818:	40003800 	.word	0x40003800
 800081c:	00017700 	.word	0x00017700

08000820 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_I2S3_Init+0x54>)
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <MX_I2S3_Init+0x58>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2S3_Init+0x54>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_I2S3_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_I2S3_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_I2S3_Init+0x54>)
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <MX_I2S3_Init+0x5c>)
 800084a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_I2S3_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_I2S3_Init+0x54>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2S3_Init+0x54>)
 8000860:	f003 f82c 	bl	80038bc <HAL_I2S_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800086a:	f000 f9ab 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000154 	.word	0x20000154
 8000878:	40003c00 	.word	0x40003c00
 800087c:	00017700 	.word	0x00017700

08000880 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a59      	ldr	r2, [pc, #356]	; (8000a04 <HAL_I2S_MspInit+0x184>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d15b      	bne.n	800095a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
 80008a6:	4b58      	ldr	r3, [pc, #352]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a57      	ldr	r2, [pc, #348]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b55      	ldr	r3, [pc, #340]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	623b      	str	r3, [r7, #32]
 80008bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	4b51      	ldr	r3, [pc, #324]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a50      	ldr	r2, [pc, #320]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a49      	ldr	r2, [pc, #292]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f6:	2304      	movs	r3, #4
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000906:	2306      	movs	r3, #6
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	483e      	ldr	r0, [pc, #248]	; (8000a0c <HAL_I2S_MspInit+0x18c>)
 8000912:	f001 f8cd 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4836      	ldr	r0, [pc, #216]	; (8000a0c <HAL_I2S_MspInit+0x18c>)
 8000932:	f001 f8bd 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000936:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000948:	2305      	movs	r3, #5
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	482f      	ldr	r0, [pc, #188]	; (8000a10 <HAL_I2S_MspInit+0x190>)
 8000954:	f001 f8ac 	bl	8001ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000958:	e04f      	b.n	80009fa <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <HAL_I2S_MspInit+0x194>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d14a      	bne.n	80009fa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 800096e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009b8:	2310      	movs	r3, #16
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c8:	2306      	movs	r3, #6
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <HAL_I2S_MspInit+0x198>)
 80009d4:	f001 f86c 	bl	8001ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ea:	2306      	movs	r3, #6
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_I2S_MspInit+0x18c>)
 80009f6:	f001 f85b 	bl	8001ab0 <HAL_GPIO_Init>
}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40003800 	.word	0x40003800
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40003c00 	.word	0x40003c00
 8000a18:	40020000 	.word	0x40020000

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 fb2e 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f846 	bl	8000ab4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a28:	f000 f8ac 	bl	8000b84 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f7ff fd7a 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a30:	f7ff fd50 	bl	80004d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a34:	f7ff fe50 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a38:	f7ff fec4 	bl	80007c4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a3c:	f7ff fef0 	bl	8000820 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a40:	f000 f8c6 	bl	8000bd0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a44:	f007 feae 	bl	80087a4 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8000a48:	f000 f9f8 	bl	8000e3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  initializeApplication();
 8000a4c:	f008 f9b2 	bl	8008db4 <initializeApplication>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a50:	f007 fece 	bl	80087f0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //while(appFunctionTable[currentState].function());	// This method can be applied when there is no declare "stateTransitionCondition" variable in appFunctionTable

    controlTimer();
 8000a54:	f008 fa80 	bl	8008f58 <controlTimer>
    if(getTimerResultStatus(STATE_TIMER_TAG))
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f008 facb 	bl	8008ff4 <getTimerResultStatus>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <main+0x56>
    {
    	appFunctionTable[currentState].stateTransitionCondition = TRUE;		//Set State Flag
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <main+0x90>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <main+0x94>)
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2201      	movs	r2, #1
 8000a70:	711a      	strb	r2, [r3, #4]
    }

    if(appFunctionTable[currentState].stateTransitionCondition)
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <main+0x90>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <main+0x94>)
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0e6      	beq.n	8000a50 <main+0x34>
    {
    	appFunctionTable[currentState].stateTransitionCondition = FALSE;	//Clear State Flag
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <main+0x90>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <main+0x94>)
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	711a      	strb	r2, [r3, #4]
    	appFunctionTable[currentState].function();
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <main+0x90>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <main+0x94>)
 8000a98:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a9c:	4798      	blx	r3
    	startTimer(STATE_TIMER_TAG, 1000);			//timer re-initialize to 1 s
 8000a9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f008 fa22 	bl	8008eec <startTimer>
    MX_USB_HOST_Process();
 8000aa8:	e7d2      	b.n	8000a50 <main+0x34>
 8000aaa:	bf00      	nop
 8000aac:	200009e0 	.word	0x200009e0
 8000ab0:	2000002c 	.word	0x2000002c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 fbb0 	bl	8009228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <SystemClock_Config+0xc8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <SystemClock_Config+0xc8>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <SystemClock_Config+0xc8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemClock_Config+0xcc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemClock_Config+0xcc>)
 8000afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemClock_Config+0xcc>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b28:	23c0      	movs	r3, #192	; 0xc0
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b30:	2308      	movs	r3, #8
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fb5f 	bl	80041fc <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b44:	f000 f83e 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2103      	movs	r1, #3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 fdc1 	bl	80046ec <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b70:	f000 f828 	bl	8000bc4 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3750      	adds	r7, #80	; 0x50
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b9e:	23c8      	movs	r3, #200	; 0xc8
 8000ba0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 ffbd 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000bb8:	f000 f804 	bl	8000bc4 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c22:	f004 f8d3 	bl	8004dcc <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f7ff ffca 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000019c 	.word	0x2000019c
 8000c38:	40013000 	.word	0x40013000

08000c3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_SPI_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c96:	23e0      	movs	r3, #224	; 0xe0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_SPI_MspInit+0x8c>)
 8000cb2:	f000 fefd 	bl	8001ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0a:	2007      	movs	r0, #7
 8000d0c:	f000 fb1e 	bl	800134c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f9dc 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DMA2_Stream2_IRQHandler+0x10>)
 8000d76:	f000 fc31 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000029c 	.word	0x2000029c

08000d84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <OTG_FS_IRQHandler+0x10>)
 8000d8a:	f001 fab3 	bl	80022f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200006dc 	.word	0x200006dc

08000d98 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA2_Stream7_IRQHandler+0x10>)
 8000d9e:	f000 fc1d 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000023c 	.word	0x2000023c

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f008 fa3c 	bl	8009258 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20020000 	.word	0x20020000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	200001f4 	.word	0x200001f4
 8000e14:	20000bd8 	.word	0x20000bd8

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_USART1_UART_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e74:	f004 f833 	bl	8004ede <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e7e:	f7ff fea1 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001f8 	.word	0x200001f8
 8000e8c:	40011000 	.word	0x40011000

08000e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a57      	ldr	r2, [pc, #348]	; (800100c <HAL_UART_MspInit+0x17c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	f040 80a7 	bne.w	8001002 <HAL_UART_MspInit+0x172>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebc:	4a54      	ldr	r2, [pc, #336]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec4:	4b52      	ldr	r3, [pc, #328]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a4d      	ldr	r2, [pc, #308]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b4b      	ldr	r3, [pc, #300]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a46      	ldr	r2, [pc, #280]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <HAL_UART_MspInit+0x180>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	483b      	ldr	r0, [pc, #236]	; (8001014 <HAL_UART_MspInit+0x184>)
 8000f26:	f000 fdc3 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4834      	ldr	r0, [pc, #208]	; (8001018 <HAL_UART_MspInit+0x188>)
 8000f46:	f000 fdb3 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f4c:	4a34      	ldr	r2, [pc, #208]	; (8001020 <HAL_UART_MspInit+0x190>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f58:	4b30      	ldr	r3, [pc, #192]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f8a:	4824      	ldr	r0, [pc, #144]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f8c:	f000 fa20 	bl	80013d0 <HAL_DMA_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000f96:	f7ff fe15 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_UART_MspInit+0x18c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <HAL_UART_MspInit+0x198>)
 8000faa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000fe8:	f000 f9f2 	bl	80013d0 <HAL_DMA_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8000ff2:	f7ff fde7 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_UART_MspInit+0x194>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40011000 	.word	0x40011000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	2000023c 	.word	0x2000023c
 8001020:	400264b8 	.word	0x400264b8
 8001024:	2000029c 	.word	0x2000029c
 8001028:	40026440 	.word	0x40026440

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001056:	f7ff fedf 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f008 f903 	bl	8009264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fcdd 	bl	8000a1c <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001070:	08009394 	.word	0x08009394
  ldr r2, =_sbss
 8001074:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001078:	20000bd4 	.word	0x20000bd4

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <HAL_Init+0x40>)
 800108a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_Init+0x40>)
 8001096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_Init+0x40>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f94f 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fe0a 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023c00 	.word	0x40023c00

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f967 	bl	80013b6 <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f92f 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000000 	.word	0x20000000
 800111c:	20000008 	.word	0x20000008
 8001120:	20000004 	.word	0x20000004

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008
 8001148:	200002fc 	.word	0x200002fc

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200002fc 	.word	0x200002fc

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff3e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff31 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff feb6 	bl	800114c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e099      	b.n	8001520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140c:	e00f      	b.n	800142e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140e:	f7ff fe9d 	bl	800114c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b05      	cmp	r3, #5
 800141a:	d908      	bls.n	800142e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2220      	movs	r2, #32
 8001420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2203      	movs	r2, #3
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e078      	b.n	8001520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e8      	bne.n	800140e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_DMA_Init+0x158>)
 8001448:	4013      	ands	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4313      	orrs	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b04      	cmp	r3, #4
 8001486:	d107      	bne.n	8001498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4313      	orrs	r3, r2
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f023 0307 	bic.w	r3, r3, #7
 80014ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d117      	bne.n	80014f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00e      	beq.n	80014f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fa6f 	bl	80019b8 <DMA_CheckFifoParam>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ee:	2301      	movs	r3, #1
 80014f0:	e016      	b.n	8001520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa26 	bl	800194c <DMA_CalcBaseAndBitshift>
 8001500:	4603      	mov	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	223f      	movs	r2, #63	; 0x3f
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	f010803f 	.word	0xf010803f

0800152c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Start_IT+0x26>
 800154e:	2302      	movs	r3, #2
 8001550:	e040      	b.n	80015d4 <HAL_DMA_Start_IT+0xa8>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d12f      	bne.n	80015c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 f9b8 	bl	80018f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001584:	223f      	movs	r2, #63	; 0x3f
 8001586:	409a      	lsls	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0216 	orr.w	r2, r2, #22
 800159a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0208 	orr.w	r2, r2, #8
 80015b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e005      	b.n	80015d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ce:	2302      	movs	r3, #2
 80015d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015e8:	4b8e      	ldr	r3, [pc, #568]	; (8001824 <HAL_DMA_IRQHandler+0x248>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a8e      	ldr	r2, [pc, #568]	; (8001828 <HAL_DMA_IRQHandler+0x24c>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0a9b      	lsrs	r3, r3, #10
 80015f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2208      	movs	r2, #8
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d01a      	beq.n	8001648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0204 	bic.w	r2, r2, #4
 800162e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2208      	movs	r2, #8
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2201      	movs	r2, #1
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d012      	beq.n	800167e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2201      	movs	r2, #1
 800166c:	409a      	lsls	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	f043 0202 	orr.w	r2, r3, #2
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	2204      	movs	r2, #4
 8001684:	409a      	lsls	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d012      	beq.n	80016b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2204      	movs	r2, #4
 80016a2:	409a      	lsls	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	f043 0204 	orr.w	r2, r3, #4
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	2210      	movs	r2, #16
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d043      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03c      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	2210      	movs	r2, #16
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d018      	beq.n	800171e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d108      	bne.n	800170c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d024      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
 800170a:	e01f      	b.n	800174c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01b      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
 800171c:	e016      	b.n	800174c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0208 	bic.w	r2, r2, #8
 800173a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001750:	2220      	movs	r2, #32
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 808f 	beq.w	800187c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8087 	beq.w	800187c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	2220      	movs	r2, #32
 8001774:	409a      	lsls	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b05      	cmp	r3, #5
 8001784:	d136      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0216 	bic.w	r2, r2, #22
 8001794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x1da>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0208 	bic.w	r2, r2, #8
 80017c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	223f      	movs	r2, #63	; 0x3f
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d07e      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	4798      	blx	r3
        }
        return;
 80017f2:	e079      	b.n	80018e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01d      	beq.n	800183e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	2b00      	cmp	r3, #0
 8001816:	d031      	beq.n	800187c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	4798      	blx	r3
 8001820:	e02c      	b.n	800187c <HAL_DMA_IRQHandler+0x2a0>
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000
 8001828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d023      	beq.n	800187c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
 800183c:	e01e      	b.n	800187c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10f      	bne.n	800186c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0210 	bic.w	r2, r2, #16
 800185a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	2b00      	cmp	r3, #0
 8001882:	d032      	beq.n	80018ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2205      	movs	r2, #5
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	3301      	adds	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d307      	bcc.n	80018c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f2      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x2cc>
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
 80018e6:	e000      	b.n	80018ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80018e8:	bf00      	nop
    }
  }
}
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800190c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	d108      	bne.n	8001930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800192e:	e007      	b.n	8001940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3b10      	subs	r3, #16
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <DMA_CalcBaseAndBitshift+0x64>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d909      	bls.n	800198e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	1d1a      	adds	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	659a      	str	r2, [r3, #88]	; 0x58
 800198c:	e007      	b.n	800199e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	aaaaaaab 	.word	0xaaaaaaab
 80019b4:	0800937c 	.word	0x0800937c

080019b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11f      	bne.n	8001a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d856      	bhi.n	8001a86 <DMA_CheckFifoParam+0xce>
 80019d8:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <DMA_CheckFifoParam+0x28>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	08001a03 	.word	0x08001a03
 80019e8:	080019f1 	.word	0x080019f1
 80019ec:	08001a87 	.word	0x08001a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d046      	beq.n	8001a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a00:	e043      	b.n	8001a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a0a:	d140      	bne.n	8001a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a10:	e03d      	b.n	8001a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a1a:	d121      	bne.n	8001a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d837      	bhi.n	8001a92 <DMA_CheckFifoParam+0xda>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <DMA_CheckFifoParam+0x70>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a3f 	.word	0x08001a3f
 8001a30:	08001a39 	.word	0x08001a39
 8001a34:	08001a51 	.word	0x08001a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e030      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d025      	beq.n	8001a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4e:	e022      	b.n	8001a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a58:	d11f      	bne.n	8001a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a5e:	e01c      	b.n	8001a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d903      	bls.n	8001a6e <DMA_CheckFifoParam+0xb6>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d003      	beq.n	8001a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a6c:	e018      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
      break;
 8001a72:	e015      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
      break;
 8001a84:	e00b      	b.n	8001a9e <DMA_CheckFifoParam+0xe6>
      break;
 8001a86:	bf00      	nop
 8001a88:	e00a      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e008      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e006      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e004      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a96:	bf00      	nop
 8001a98:	e002      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a9a:	bf00      	nop
 8001a9c:	e000      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e159      	b.n	8001d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8148 	bne.w	8001d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d005      	beq.n	8001b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d130      	bne.n	8001b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0201 	and.w	r2, r3, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d017      	beq.n	8001ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d123      	bne.n	8001bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a2 	beq.w	8001d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c52:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x202>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x2f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x1fe>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_GPIO_Init+0x2f8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x1fa>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a46      	ldr	r2, [pc, #280]	; (8001dac <HAL_GPIO_Init+0x2fc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x1f6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a45      	ldr	r2, [pc, #276]	; (8001db0 <HAL_GPIO_Init+0x300>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x1f2>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f aea2 	bls.w	8001acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e20:	b08f      	sub	sp, #60	; 0x3c
 8001e22:	af0a      	add	r7, sp, #40	; 0x28
 8001e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e054      	b.n	8001eda <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f006 fd08 	bl	8008860 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2203      	movs	r2, #3
 8001e54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fd34 	bl	80058dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	687e      	ldr	r6, [r7, #4]
 8001e7c:	466d      	mov	r5, sp
 8001e7e:	f106 0410 	add.w	r4, r6, #16
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e92:	1d33      	adds	r3, r6, #4
 8001e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e96:	6838      	ldr	r0, [r7, #0]
 8001e98:	f003 fcae 	bl	80057f8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fd2b 	bl	80058fe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	687e      	ldr	r6, [r7, #4]
 8001eb0:	466d      	mov	r5, sp
 8001eb2:	f106 0410 	add.w	r4, r6, #16
 8001eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec6:	1d33      	adds	r3, r6, #4
 8001ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f003 feb4 	bl	8005c38 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ee2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ee2:	b590      	push	{r4, r7, lr}
 8001ee4:	b089      	sub	sp, #36	; 0x24
 8001ee6:	af04      	add	r7, sp, #16
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	4608      	mov	r0, r1
 8001eec:	4611      	mov	r1, r2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	70fb      	strb	r3, [r7, #3]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70bb      	strb	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_HCD_HC_Init+0x28>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e076      	b.n	8001ff8 <HAL_HCD_HC_Init+0x116>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	333d      	adds	r3, #61	; 0x3d
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3338      	adds	r3, #56	; 0x38
 8001f32:	787a      	ldrb	r2, [r7, #1]
 8001f34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3340      	adds	r3, #64	; 0x40
 8001f44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f46:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3339      	adds	r3, #57	; 0x39
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	212c      	movs	r1, #44	; 0x2c
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	333f      	adds	r3, #63	; 0x3f
 8001f68:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	78ba      	ldrb	r2, [r7, #2]
 8001f72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f76:	b2d0      	uxtb	r0, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	333a      	adds	r3, #58	; 0x3a
 8001f84:	4602      	mov	r2, r0
 8001f86:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da09      	bge.n	8001fa4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	333b      	adds	r3, #59	; 0x3b
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e008      	b.n	8001fb6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	333b      	adds	r3, #59	; 0x3b
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	333c      	adds	r3, #60	; 0x3c
 8001fc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fc8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	787c      	ldrb	r4, [r7, #1]
 8001fd0:	78ba      	ldrb	r2, [r7, #2]
 8001fd2:	78f9      	ldrb	r1, [r7, #3]
 8001fd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fd6:	9302      	str	r3, [sp, #8]
 8001fd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	f003 ffad 	bl	8005f44 <USB_HC_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}

08002000 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_HCD_HC_Halt+0x1e>
 800201a:	2302      	movs	r3, #2
 800201c:	e00f      	b.n	800203e <HAL_HCD_HC_Halt+0x3e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f004 f9fd 	bl	800642e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	461a      	mov	r2, r3
 8002056:	4603      	mov	r3, r0
 8002058:	70fb      	strb	r3, [r7, #3]
 800205a:	460b      	mov	r3, r1
 800205c:	70bb      	strb	r3, [r7, #2]
 800205e:	4613      	mov	r3, r2
 8002060:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	333b      	adds	r3, #59	; 0x3b
 8002070:	78ba      	ldrb	r2, [r7, #2]
 8002072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	333f      	adds	r3, #63	; 0x3f
 8002082:	787a      	ldrb	r2, [r7, #1]
 8002084:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002086:	7c3b      	ldrb	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d112      	bne.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3342      	adds	r3, #66	; 0x42
 800209a:	2203      	movs	r2, #3
 800209c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	333d      	adds	r3, #61	; 0x3d
 80020ac:	7f3a      	ldrb	r2, [r7, #28]
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e008      	b.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3342      	adds	r3, #66	; 0x42
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	f200 80c6 	bhi.w	8002258 <HAL_HCD_HC_SubmitRequest+0x210>
 80020cc:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	08002245 	.word	0x08002245
 80020dc:	08002149 	.word	0x08002149
 80020e0:	080021c7 	.word	0x080021c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020e4:	7c3b      	ldrb	r3, [r7, #16]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 80b8 	bne.w	800225c <HAL_HCD_HC_SubmitRequest+0x214>
 80020ec:	78bb      	ldrb	r3, [r7, #2]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 80b4 	bne.w	800225c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020f4:	8b3b      	ldrh	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d108      	bne.n	800210c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3355      	adds	r3, #85	; 0x55
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3355      	adds	r3, #85	; 0x55
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3342      	adds	r3, #66	; 0x42
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002132:	e093      	b.n	800225c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]
      break;
 8002146:	e089      	b.n	800225c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002148:	78bb      	ldrb	r3, [r7, #2]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11d      	bne.n	800218a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3355      	adds	r3, #85	; 0x55
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3342      	adds	r3, #66	; 0x42
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002174:	e073      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3342      	adds	r3, #66	; 0x42
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
      break;
 8002188:	e069      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3354      	adds	r3, #84	; 0x54
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3342      	adds	r3, #66	; 0x42
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
      break;
 80021b0:	e055      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3342      	adds	r3, #66	; 0x42
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
      break;
 80021c4:	e04b      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021c6:	78bb      	ldrb	r3, [r7, #2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11d      	bne.n	8002208 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3355      	adds	r3, #85	; 0x55
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3342      	adds	r3, #66	; 0x42
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021f2:	e034      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3342      	adds	r3, #66	; 0x42
 8002202:	2202      	movs	r2, #2
 8002204:	701a      	strb	r2, [r3, #0]
      break;
 8002206:	e02a      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3354      	adds	r3, #84	; 0x54
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3342      	adds	r3, #66	; 0x42
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
      break;
 800222e:	e016      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3342      	adds	r3, #66	; 0x42
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]
      break;
 8002242:	e00c      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3342      	adds	r3, #66	; 0x42
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
      break;
 8002256:	e002      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002258:	bf00      	nop
 800225a:	e000      	b.n	800225e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800225c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3344      	adds	r3, #68	; 0x44
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	8b3a      	ldrh	r2, [r7, #24]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	202c      	movs	r0, #44	; 0x2c
 8002278:	fb00 f303 	mul.w	r3, r0, r3
 800227c:	440b      	add	r3, r1
 800227e:	334c      	adds	r3, #76	; 0x4c
 8002280:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3360      	adds	r3, #96	; 0x60
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3350      	adds	r3, #80	; 0x50
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3339      	adds	r3, #57	; 0x39
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3361      	adds	r3, #97	; 0x61
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	222c      	movs	r2, #44	; 0x2c
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	3338      	adds	r3, #56	; 0x38
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	18d1      	adds	r1, r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	f003 ff50 	bl	8006188 <USB_HC_StartXfer>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop

080022f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fc51 	bl	8005bb2 <USB_GetMode>
 8002310:	4603      	mov	r3, r0
 8002312:	2b01      	cmp	r3, #1
 8002314:	f040 80f6 	bne.w	8002504 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fc35 	bl	8005b8c <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80ec 	beq.w	8002502 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 fc2c 	bl	8005b8c <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800233e:	d104      	bne.n	800234a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002348:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fc1c 	bl	8005b8c <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800235e:	d104      	bne.n	800236a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002368:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 fc0c 	bl	8005b8c <USB_ReadInterrupts>
 8002374:	4603      	mov	r3, r0
 8002376:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800237a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800237e:	d104      	bne.n	800238a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002388:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fbfc 	bl	8005b8c <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d103      	bne.n	80023a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fbee 	bl	8005b8c <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ba:	d11c      	bne.n	80023f6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023d6:	2110      	movs	r1, #16
 80023d8:	6938      	ldr	r0, [r7, #16]
 80023da:	f003 fadd 	bl	8005998 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023de:	6938      	ldr	r0, [r7, #16]
 80023e0:	f003 fb0e 	bl	8005a00 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fce4 	bl	8005db8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f006 fab3 	bl	800895c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fbc6 	bl	8005b8c <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240a:	d102      	bne.n	8002412 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f001 f89e 	bl	800354e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fbb8 	bl	8005b8c <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b08      	cmp	r3, #8
 8002424:	d106      	bne.n	8002434 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f006 fa7c 	bl	8008924 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2208      	movs	r2, #8
 8002432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 fba7 	bl	8005b8c <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b10      	cmp	r3, #16
 8002446:	d101      	bne.n	800244c <HAL_HCD_IRQHandler+0x158>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_HCD_IRQHandler+0x15a>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0210 	bic.w	r2, r2, #16
 8002460:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 ffa1 	bl	80033aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0210 	orr.w	r2, r2, #16
 8002476:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 fb85 	bl	8005b8c <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800248c:	d13a      	bne.n	8002504 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f003 ffba 	bl	800640c <USB_HC_ReadInterrupt>
 8002498:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e025      	b.n	80024ec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d018      	beq.n	80024e6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ca:	d106      	bne.n	80024da <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8ab 	bl	800262e <HCD_HC_IN_IRQHandler>
 80024d8:	e005      	b.n	80024e6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fbf9 	bl	8002cd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3d4      	bcc.n	80024a0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fe:	615a      	str	r2, [r3, #20]
 8002500:	e000      	b.n	8002504 <HAL_HCD_IRQHandler+0x210>
      return;
 8002502:	bf00      	nop
    }
  }
}
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_HCD_Start+0x16>
 800251c:	2302      	movs	r3, #2
 800251e:	e013      	b.n	8002548 <HAL_HCD_Start+0x3e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fca6 	bl	8005e80 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 f9be 	bl	80058ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_HCD_Stop+0x16>
 8002562:	2302      	movs	r3, #2
 8002564:	e00d      	b.n	8002582 <HAL_HCD_Stop+0x32>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 f894 	bl	80066a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 fc48 	bl	8005e2c <USB_ResetPort>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3360      	adds	r3, #96	; 0x60
 80025c0:	781b      	ldrb	r3, [r3, #0]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3350      	adds	r3, #80	; 0x50
 80025e8:	681b      	ldr	r3, [r3, #0]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 fc8c 	bl	8005f20 <USB_GetCurrentFrame>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fc67 	bl	8005ef2 <USB_GetHostSpeed>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d11a      	bne.n	8002694 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	461a      	mov	r2, r3
 800266c:	2304      	movs	r3, #4
 800266e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3361      	adds	r3, #97	; 0x61
 800267e:	2206      	movs	r2, #6
 8002680:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fece 	bl	800642e <USB_HC_Halt>
 8002692:	e0af      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026aa:	d11b      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3361      	adds	r3, #97	; 0x61
 80026ce:	2207      	movs	r2, #7
 80026d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fea6 	bl	800642e <USB_HC_Halt>
 80026e2:	e087      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d109      	bne.n	800270e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2320      	movs	r3, #32
 800270a:	6093      	str	r3, [r2, #8]
 800270c:	e072      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b08      	cmp	r3, #8
 8002722:	d11a      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2308      	movs	r3, #8
 8002734:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3361      	adds	r3, #97	; 0x61
 8002744:	2205      	movs	r2, #5
 8002746:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fe6b 	bl	800642e <USB_HC_Halt>
 8002758:	e04c      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002770:	d11b      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002784:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3361      	adds	r3, #97	; 0x61
 8002794:	2208      	movs	r2, #8
 8002796:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fe43 	bl	800642e <USB_HC_Halt>
 80027a8:	e024      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d119      	bne.n	80027f4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3361      	adds	r3, #97	; 0x61
 80027e0:	2206      	movs	r2, #6
 80027e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fe1d 	bl	800642e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280a:	d112      	bne.n	8002832 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f003 fe09 	bl	800642e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800282e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002830:	e24e      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 80df 	bne.w	8002a08 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d019      	beq.n	8002886 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3348      	adds	r3, #72	; 0x48
 8002860:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0159      	lsls	r1, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	440b      	add	r3, r1
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002874:	1ad2      	subs	r2, r2, r3
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	202c      	movs	r0, #44	; 0x2c
 800287c:	fb00 f303 	mul.w	r3, r0, r3
 8002880:	440b      	add	r3, r1
 8002882:	3350      	adds	r3, #80	; 0x50
 8002884:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	3361      	adds	r3, #97	; 0x61
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	335c      	adds	r3, #92	; 0x5c
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	461a      	mov	r2, r3
 80028b8:	2301      	movs	r3, #1
 80028ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	333f      	adds	r3, #63	; 0x3f
 80028de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d111      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 fd9d 	bl	800642e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	2310      	movs	r3, #16
 8002904:	6093      	str	r3, [r2, #8]
 8002906:	e03a      	b.n	800297e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	333f      	adds	r3, #63	; 0x3f
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d009      	beq.n	8002930 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	333f      	adds	r3, #63	; 0x3f
 800292a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800292c:	2b01      	cmp	r3, #1
 800292e:	d126      	bne.n	800297e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	0151      	lsls	r1, r2, #5
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	440a      	add	r2, r1
 8002946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800294e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3360      	adds	r3, #96	; 0x60
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	b2d9      	uxtb	r1, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	202c      	movs	r0, #44	; 0x2c
 800296c:	fb00 f303 	mul.w	r3, r0, r3
 8002970:	4413      	add	r3, r2
 8002972:	3360      	adds	r3, #96	; 0x60
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f005 fffd 	bl	8008978 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d12b      	bne.n	80029de <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3348      	adds	r3, #72	; 0x48
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	202c      	movs	r0, #44	; 0x2c
 800299c:	fb00 f202 	mul.w	r2, r0, r2
 80029a0:	440a      	add	r2, r1
 80029a2:	3240      	adds	r2, #64	; 0x40
 80029a4:	8812      	ldrh	r2, [r2, #0]
 80029a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 818e 	beq.w	8002cd0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3354      	adds	r3, #84	; 0x54
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	f083 0301 	eor.w	r3, r3, #1
 80029c8:	b2d8      	uxtb	r0, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3354      	adds	r3, #84	; 0x54
 80029d8:	4602      	mov	r2, r0
 80029da:	701a      	strb	r2, [r3, #0]
}
 80029dc:	e178      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3354      	adds	r3, #84	; 0x54
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2d8      	uxtb	r0, r3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3354      	adds	r3, #84	; 0x54
 8002a02:	4602      	mov	r2, r0
 8002a04:	701a      	strb	r2, [r3, #0]
}
 8002a06:	e163      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	f040 80f6 	bne.w	8002c0c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3361      	adds	r3, #97	; 0x61
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d109      	bne.n	8002a48 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3360      	adds	r3, #96	; 0x60
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e0c9      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d109      	bne.n	8002a70 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3360      	adds	r3, #96	; 0x60
 8002a6a:	2205      	movs	r2, #5
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e0b5      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3361      	adds	r3, #97	; 0x61
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d009      	beq.n	8002a98 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d150      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	202c      	movs	r0, #44	; 0x2c
 8002ab0:	fb00 f303 	mul.w	r3, r0, r3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	335c      	adds	r3, #92	; 0x5c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d912      	bls.n	8002af4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	335c      	adds	r3, #92	; 0x5c
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3360      	adds	r3, #96	; 0x60
 8002aee:	2204      	movs	r2, #4
 8002af0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002af2:	e073      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3360      	adds	r3, #96	; 0x60
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b1c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b24:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b38:	e050      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3361      	adds	r3, #97	; 0x61
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d122      	bne.n	8002b94 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3360      	adds	r3, #96	; 0x60
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b76:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e023      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3361      	adds	r3, #97	; 0x61
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b07      	cmp	r3, #7
 8002ba6:	d119      	bne.n	8002bdc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	335c      	adds	r3, #92	; 0x5c
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	202c      	movs	r0, #44	; 0x2c
 8002bc0:	fb00 f303 	mul.w	r3, r0, r3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	335c      	adds	r3, #92	; 0x5c
 8002bc8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3360      	adds	r3, #96	; 0x60
 8002bd8:	2204      	movs	r2, #4
 8002bda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	461a      	mov	r2, r3
 8002bea:	2302      	movs	r3, #2
 8002bec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	b2d9      	uxtb	r1, r3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	202c      	movs	r0, #44	; 0x2c
 8002bf8:	fb00 f303 	mul.w	r3, r0, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f005 feb7 	bl	8008978 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c0a:	e061      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d156      	bne.n	8002cd0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	333f      	adds	r3, #63	; 0x3f
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d111      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	335c      	adds	r3, #92	; 0x5c
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fbeb 	bl	800642e <USB_HC_Halt>
 8002c58:	e031      	b.n	8002cbe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	333f      	adds	r3, #63	; 0x3f
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	333f      	adds	r3, #63	; 0x3f
 8002c7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d11d      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	335c      	adds	r3, #92	; 0x5c
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d110      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3361      	adds	r3, #97	; 0x61
 8002caa:	2203      	movs	r2, #3
 8002cac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fbb8 	bl	800642e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2310      	movs	r3, #16
 8002cce:	6093      	str	r3, [r2, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11a      	bne.n	8002d3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	2304      	movs	r3, #4
 8002d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3361      	adds	r3, #97	; 0x61
 8002d28:	2206      	movs	r2, #6
 8002d2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fb79 	bl	800642e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d3c:	e331      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d12e      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	2320      	movs	r3, #32
 8002d64:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	333d      	adds	r3, #61	; 0x3d
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	f040 8313 	bne.w	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	333d      	adds	r3, #61	; 0x3d
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3360      	adds	r3, #96	; 0x60
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 fb3f 	bl	800642e <USB_HC_Halt>
}
 8002db0:	e2f7      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc8:	d112      	bne.n	8002df0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ddc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fb20 	bl	800642e <USB_HC_Halt>
}
 8002dee:	e2d8      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d140      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	335c      	adds	r3, #92	; 0x5c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d111      	bne.n	8002e52 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	333d      	adds	r3, #61	; 0x3d
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2301      	movs	r3, #1
 8002e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fad4 	bl	800642e <USB_HC_Halt>
}
 8002e86:	e28c      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d12c      	bne.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3361      	adds	r3, #97	; 0x61
 8002eac:	2204      	movs	r2, #4
 8002eae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	333d      	adds	r3, #61	; 0x3d
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	335c      	adds	r3, #92	; 0x5c
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 faa5 	bl	800642e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2340      	movs	r3, #64	; 0x40
 8002ef4:	6093      	str	r3, [r2, #8]
}
 8002ef6:	e254      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d11a      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3361      	adds	r3, #97	; 0x61
 8002f2e:	2205      	movs	r2, #5
 8002f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fa76 	bl	800642e <USB_HC_Halt>
}
 8002f42:	e22e      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d140      	bne.n	8002fdc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	335c      	adds	r3, #92	; 0x5c
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3361      	adds	r3, #97	; 0x61
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	333d      	adds	r3, #61	; 0x3d
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d112      	bne.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	333c      	adds	r3, #60	; 0x3c
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	333d      	adds	r3, #61	; 0x3d
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 fa33 	bl	800642e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	6093      	str	r3, [r2, #8]
}
 8002fda:	e1e2      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d164      	bne.n	80030bc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d111      	bne.n	800301e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3361      	adds	r3, #97	; 0x61
 8003008:	2206      	movs	r2, #6
 800300a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fa09 	bl	800642e <USB_HC_Halt>
 800301c:	e044      	b.n	80030a8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	335c      	adds	r3, #92	; 0x5c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	202c      	movs	r0, #44	; 0x2c
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	440b      	add	r3, r1
 800303c:	335c      	adds	r3, #92	; 0x5c
 800303e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	335c      	adds	r3, #92	; 0x5c
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d920      	bls.n	8003096 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	335c      	adds	r3, #92	; 0x5c
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3360      	adds	r3, #96	; 0x60
 8003074:	2204      	movs	r2, #4
 8003076:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	b2d9      	uxtb	r1, r3
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	202c      	movs	r0, #44	; 0x2c
 8003082:	fb00 f303 	mul.w	r3, r0, r3
 8003086:	4413      	add	r3, r2
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f005 fc72 	bl	8008978 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003094:	e008      	b.n	80030a8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3360      	adds	r3, #96	; 0x60
 80030a4:	2202      	movs	r2, #2
 80030a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	461a      	mov	r2, r3
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	6093      	str	r3, [r2, #8]
}
 80030ba:	e172      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d11b      	bne.n	800310c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3361      	adds	r3, #97	; 0x61
 80030e2:	2208      	movs	r2, #8
 80030e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 f99c 	bl	800642e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	461a      	mov	r2, r3
 8003104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003108:	6093      	str	r3, [r2, #8]
}
 800310a:	e14a      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	f040 813f 	bne.w	80033a2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3361      	adds	r3, #97	; 0x61
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d17d      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	333f      	adds	r3, #63	; 0x3f
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d00a      	beq.n	8003174 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	333f      	adds	r3, #63	; 0x3f
 800316c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800316e:	2b03      	cmp	r3, #3
 8003170:	f040 8100 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d113      	bne.n	80031a4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3355      	adds	r3, #85	; 0x55
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2d8      	uxtb	r0, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3355      	adds	r3, #85	; 0x55
 80031a0:	4602      	mov	r2, r0
 80031a2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 80e3 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	334c      	adds	r3, #76	; 0x4c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80d8 	beq.w	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	334c      	adds	r3, #76	; 0x4c
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	fb00 f202 	mul.w	r2, r0, r2
 80031de:	440a      	add	r2, r1
 80031e0:	3240      	adds	r2, #64	; 0x40
 80031e2:	8812      	ldrh	r2, [r2, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	202c      	movs	r0, #44	; 0x2c
 80031ee:	fb00 f202 	mul.w	r2, r0, r2
 80031f2:	440a      	add	r2, r1
 80031f4:	3240      	adds	r2, #64	; 0x40
 80031f6:	8812      	ldrh	r2, [r2, #0]
 80031f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80b5 	beq.w	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3355      	adds	r3, #85	; 0x55
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	f083 0301 	eor.w	r3, r3, #1
 800321e:	b2d8      	uxtb	r0, r3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3355      	adds	r3, #85	; 0x55
 800322e:	4602      	mov	r2, r0
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e09f      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3361      	adds	r3, #97	; 0x61
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d109      	bne.n	800325c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3360      	adds	r3, #96	; 0x60
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e08b      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3361      	adds	r3, #97	; 0x61
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d109      	bne.n	8003284 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3360      	adds	r3, #96	; 0x60
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e077      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d109      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3360      	adds	r3, #96	; 0x60
 80032a6:	2205      	movs	r2, #5
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e063      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3361      	adds	r3, #97	; 0x61
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d009      	beq.n	80032d4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3361      	adds	r3, #97	; 0x61
 80032ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d14f      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	335c      	adds	r3, #92	; 0x5c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	202c      	movs	r0, #44	; 0x2c
 80032ec:	fb00 f303 	mul.w	r3, r0, r3
 80032f0:	440b      	add	r3, r1
 80032f2:	335c      	adds	r3, #92	; 0x5c
 80032f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	335c      	adds	r3, #92	; 0x5c
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d912      	bls.n	8003330 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	335c      	adds	r3, #92	; 0x5c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3360      	adds	r3, #96	; 0x60
 800332a:	2204      	movs	r2, #4
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e021      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3360      	adds	r3, #96	; 0x60
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003358:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003360:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336e:	461a      	mov	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	2302      	movs	r3, #2
 8003384:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	b2d9      	uxtb	r1, r3
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	202c      	movs	r0, #44	; 0x2c
 8003390:	fb00 f303 	mul.w	r3, r0, r3
 8003394:	4413      	add	r3, r2
 8003396:	3360      	adds	r3, #96	; 0x60
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f005 faeb 	bl	8008978 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033a2:	bf00      	nop
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b08a      	sub	sp, #40	; 0x28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	0c5b      	lsrs	r3, r3, #17
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d004      	beq.n	80033f0 <HCD_RXQLVL_IRQHandler+0x46>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	f000 80a9 	beq.w	8003540 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033ee:	e0aa      	b.n	8003546 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80a6 	beq.w	8003544 <HCD_RXQLVL_IRQHandler+0x19a>
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3344      	adds	r3, #68	; 0x44
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 809b 	beq.w	8003544 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	212c      	movs	r1, #44	; 0x2c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	3350      	adds	r3, #80	; 0x50
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	441a      	add	r2, r3
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	202c      	movs	r0, #44	; 0x2c
 8003428:	fb00 f303 	mul.w	r3, r0, r3
 800342c:	440b      	add	r3, r1
 800342e:	334c      	adds	r3, #76	; 0x4c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d87a      	bhi.n	800352c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3344      	adds	r3, #68	; 0x44
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	b292      	uxth	r2, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f002 fb44 	bl	8005adc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3344      	adds	r3, #68	; 0x44
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	441a      	add	r2, r3
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	202c      	movs	r0, #44	; 0x2c
 800346e:	fb00 f303 	mul.w	r3, r0, r3
 8003472:	440b      	add	r3, r1
 8003474:	3344      	adds	r3, #68	; 0x44
 8003476:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3350      	adds	r3, #80	; 0x50
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	441a      	add	r2, r3
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	202c      	movs	r0, #44	; 0x2c
 8003492:	fb00 f303 	mul.w	r3, r0, r3
 8003496:	440b      	add	r3, r1
 8003498:	3350      	adds	r3, #80	; 0x50
 800349a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	0cdb      	lsrs	r3, r3, #19
 80034ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3340      	adds	r3, #64	; 0x40
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d13c      	bne.n	8003544 <HCD_RXQLVL_IRQHandler+0x19a>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d039      	beq.n	8003544 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034e6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034ee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3354      	adds	r3, #84	; 0x54
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f083 0301 	eor.w	r3, r3, #1
 8003516:	b2d8      	uxtb	r0, r3
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3354      	adds	r3, #84	; 0x54
 8003526:	4602      	mov	r2, r0
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	e00b      	b.n	8003544 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3360      	adds	r3, #96	; 0x60
 800353a:	2204      	movs	r2, #4
 800353c:	701a      	strb	r2, [r3, #0]
      break;
 800353e:	e001      	b.n	8003544 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003540:	bf00      	nop
 8003542:	e000      	b.n	8003546 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003544:	bf00      	nop
  }
}
 8003546:	bf00      	nop
 8003548:	3728      	adds	r7, #40	; 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800357a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d10b      	bne.n	800359e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d102      	bne.n	8003596 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f005 f9d5 	bl	8008940 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d132      	bne.n	800360e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f043 0308 	orr.w	r3, r3, #8
 80035ae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d126      	bne.n	8003608 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d113      	bne.n	80035ea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035cc:	d106      	bne.n	80035dc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2102      	movs	r1, #2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f002 fbef 	bl	8005db8 <USB_InitFSLSPClkSel>
 80035da:	e011      	b.n	8003600 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 fbe8 	bl	8005db8 <USB_InitFSLSPClkSel>
 80035e8:	e00a      	b.n	8003600 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d106      	bne.n	8003600 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035f8:	461a      	mov	r2, r3
 80035fa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035fe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f005 f9c7 	bl	8008994 <HAL_HCD_PortEnabled_Callback>
 8003606:	e002      	b.n	800360e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f005 f9d1 	bl	80089b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d103      	bne.n	8003620 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f043 0320 	orr.w	r3, r3, #32
 800361e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6013      	str	r3, [r2, #0]
}
 800362c:	bf00      	nop
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e12b      	b.n	800389e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd f86a 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003698:	f001 fa20 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 800369c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4a81      	ldr	r2, [pc, #516]	; (80038a8 <HAL_I2C_Init+0x274>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d807      	bhi.n	80036b8 <HAL_I2C_Init+0x84>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a80      	ldr	r2, [pc, #512]	; (80038ac <HAL_I2C_Init+0x278>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e006      	b.n	80036c6 <HAL_I2C_Init+0x92>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <HAL_I2C_Init+0x27c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0e7      	b.n	800389e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a78      	ldr	r2, [pc, #480]	; (80038b4 <HAL_I2C_Init+0x280>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0c9b      	lsrs	r3, r3, #18
 80036d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	; (80038a8 <HAL_I2C_Init+0x274>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d802      	bhi.n	8003708 <HAL_I2C_Init+0xd4>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3301      	adds	r3, #1
 8003706:	e009      	b.n	800371c <HAL_I2C_Init+0xe8>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a69      	ldr	r2, [pc, #420]	; (80038b8 <HAL_I2C_Init+0x284>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	3301      	adds	r3, #1
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800372e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	495c      	ldr	r1, [pc, #368]	; (80038a8 <HAL_I2C_Init+0x274>)
 8003738:	428b      	cmp	r3, r1
 800373a:	d819      	bhi.n	8003770 <HAL_I2C_Init+0x13c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e59      	subs	r1, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fbb1 f3f3 	udiv	r3, r1, r3
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003750:	400b      	ands	r3, r1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_I2C_Init+0x138>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1e59      	subs	r1, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fbb1 f3f3 	udiv	r3, r1, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	e051      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 800376c:	2304      	movs	r3, #4
 800376e:	e04f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <HAL_I2C_Init+0x168>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	440b      	add	r3, r1
 8003786:	fbb0 f3f3 	udiv	r3, r0, r3
 800378a:	3301      	adds	r3, #1
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e012      	b.n	80037c2 <HAL_I2C_Init+0x18e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e58      	subs	r0, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	0099      	lsls	r1, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Init+0x196>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e022      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <HAL_I2C_Init+0x1bc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e58      	subs	r0, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	440b      	add	r3, r1
 80037e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ee:	e00f      	b.n	8003810 <HAL_I2C_Init+0x1dc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e58      	subs	r0, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	0099      	lsls	r1, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	6809      	ldr	r1, [r1, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800383e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6911      	ldr	r1, [r2, #16]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	000186a0 	.word	0x000186a0
 80038ac:	001e847f 	.word	0x001e847f
 80038b0:	003d08ff 	.word	0x003d08ff
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	10624dd3 	.word	0x10624dd3

080038bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e128      	b.n	8003b20 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a90      	ldr	r2, [pc, #576]	; (8003b28 <HAL_I2S_Init+0x26c>)
 80038e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fc ffc9 	bl	8000880 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003904:	f023 030f 	bic.w	r3, r3, #15
 8003908:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2202      	movs	r2, #2
 8003910:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d060      	beq.n	80039dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003922:	2310      	movs	r3, #16
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e001      	b.n	800392c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b20      	cmp	r3, #32
 8003932:	d802      	bhi.n	800393a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800393a:	2001      	movs	r0, #1
 800393c:	f001 f9e6 	bl	8004d0c <HAL_RCCEx_GetPeriphCLKFreq>
 8003940:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394a:	d125      	bne.n	8003998 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	fbb2 f2f3 	udiv	r2, r2, r3
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	3305      	adds	r3, #5
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e01f      	b.n	80039b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	461a      	mov	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	3305      	adds	r3, #5
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e00e      	b.n	80039b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	3305      	adds	r3, #5
 80039b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4a5c      	ldr	r2, [pc, #368]	; (8003b2c <HAL_I2S_Init+0x270>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	08db      	lsrs	r3, r3, #3
 80039c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e003      	b.n	80039e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039dc:	2302      	movs	r3, #2
 80039de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d902      	bls.n	80039f0 <HAL_I2S_Init+0x134>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2bff      	cmp	r3, #255	; 0xff
 80039ee:	d907      	bls.n	8003a00 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	f043 0210 	orr.w	r2, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e08f      	b.n	8003b20 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	ea42 0103 	orr.w	r1, r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a1e:	f023 030f 	bic.w	r3, r3, #15
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6851      	ldr	r1, [r2, #4]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6892      	ldr	r2, [r2, #8]
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68d2      	ldr	r2, [r2, #12]
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6992      	ldr	r2, [r2, #24]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a42:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d161      	bne.n	8003b10 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a38      	ldr	r2, [pc, #224]	; (8003b30 <HAL_I2S_Init+0x274>)
 8003a50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a37      	ldr	r2, [pc, #220]	; (8003b34 <HAL_I2S_Init+0x278>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2S_Init+0x1a4>
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_I2S_Init+0x27c>)
 8003a5e:	e001      	b.n	8003a64 <HAL_I2S_Init+0x1a8>
 8003a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4932      	ldr	r1, [pc, #200]	; (8003b34 <HAL_I2S_Init+0x278>)
 8003a6c:	428a      	cmp	r2, r1
 8003a6e:	d101      	bne.n	8003a74 <HAL_I2S_Init+0x1b8>
 8003a70:	4a31      	ldr	r2, [pc, #196]	; (8003b38 <HAL_I2S_Init+0x27c>)
 8003a72:	e001      	b.n	8003a78 <HAL_I2S_Init+0x1bc>
 8003a74:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a78:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a7c:	f023 030f 	bic.w	r3, r3, #15
 8003a80:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <HAL_I2S_Init+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2S_Init+0x1d4>
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_I2S_Init+0x27c>)
 8003a8e:	e001      	b.n	8003a94 <HAL_I2S_Init+0x1d8>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a94:	2202      	movs	r2, #2
 8003a96:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <HAL_I2S_Init+0x278>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2S_Init+0x1ea>
 8003aa2:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_I2S_Init+0x27c>)
 8003aa4:	e001      	b.n	8003aaa <HAL_I2S_Init+0x1ee>
 8003aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab6:	d003      	beq.n	8003ac0 <HAL_I2S_Init+0x204>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e001      	b.n	8003acc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aea:	4313      	orrs	r3, r2
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	897b      	ldrh	r3, [r7, #10]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003af8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <HAL_I2S_Init+0x278>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_I2S_Init+0x24c>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_I2S_Init+0x27c>)
 8003b06:	e001      	b.n	8003b0c <HAL_I2S_Init+0x250>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0c:	897a      	ldrh	r2, [r7, #10]
 8003b0e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	08003c33 	.word	0x08003c33
 8003b2c:	cccccccd 	.word	0xcccccccd
 8003b30:	08003d49 	.word	0x08003d49
 8003b34:	40003800 	.word	0x40003800
 8003b38:	40003400 	.word	0x40003400

08003b3c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	881a      	ldrh	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bbc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ffb8 	bl	8003b3c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	b292      	uxth	r2, r2
 8003be8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	1c9a      	adds	r2, r3, #2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10e      	bne.n	8003c2a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c1a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff93 	bl	8003b50 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d13a      	bne.n	8003cc4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d109      	bne.n	8003c6c <I2S_IRQHandler+0x3a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d102      	bne.n	8003c6c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffb4 	bl	8003bd4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d126      	bne.n	8003cc4 <I2S_IRQHandler+0x92>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d11f      	bne.n	8003cc4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ff50 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d136      	bne.n	8003d3e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d109      	bne.n	8003cee <I2S_IRQHandler+0xbc>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d102      	bne.n	8003cee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff45 	bl	8003b78 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d122      	bne.n	8003d3e <I2S_IRQHandler+0x10c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d11b      	bne.n	8003d3e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	f043 0204 	orr.w	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ff13 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a92      	ldr	r2, [pc, #584]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d62:	4b92      	ldr	r3, [pc, #584]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d64:	e001      	b.n	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a8b      	ldr	r2, [pc, #556]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d80:	4b8a      	ldr	r3, [pc, #552]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d82:	e001      	b.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d94:	d004      	beq.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 8099 	bne.w	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d107      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f925 	bl	8004004 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9c8 	bl	8004164 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d13a      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d035      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003df2:	4b6e      	ldr	r3, [pc, #440]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df4:	e001      	b.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4969      	ldr	r1, [pc, #420]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e02:	428b      	cmp	r3, r1
 8003e04:	d101      	bne.n	8003e0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e06:	4b69      	ldr	r3, [pc, #420]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e08:	e001      	b.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f043 0202 	orr.w	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fe88 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	f040 80c3 	bne.w	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80bd 	beq.w	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a49      	ldr	r2, [pc, #292]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e86:	4b49      	ldr	r3, [pc, #292]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4944      	ldr	r1, [pc, #272]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e96:	428b      	cmp	r3, r1
 8003e98:	d101      	bne.n	8003e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e9c:	e001      	b.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ea6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fe4a 	bl	8003b64 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed0:	e089      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d107      	bne.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8be 	bl	8004068 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8fd 	bl	8004100 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d12f      	bne.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02a      	beq.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d101      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f36:	e001      	b.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4919      	ldr	r1, [pc, #100]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d101      	bne.n	8003f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f48:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4a:	e001      	b.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fdfa 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d136      	bne.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d031      	beq.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f90:	e001      	b.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4902      	ldr	r1, [pc, #8]	; (8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f9e:	428b      	cmp	r3, r1
 8003fa0:	d106      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fa2:	4b02      	ldr	r3, [pc, #8]	; (8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa4:	e006      	b.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003fa6:	bf00      	nop
 8003fa8:	40003800 	.word	0x40003800
 8003fac:	40003400 	.word	0x40003400
 8003fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fb8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fdc0 	bl	8003b64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fe4:	e000      	b.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fe6:	bf00      	nop
}
 8003fe8:	bf00      	nop
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	1c99      	adds	r1, r3, #2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6251      	str	r1, [r2, #36]	; 0x24
 8004016:	881a      	ldrh	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d113      	bne.n	800405e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004044:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ffc9 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c99      	adds	r1, r3, #2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6251      	str	r1, [r2, #36]	; 0x24
 800407a:	8819      	ldrh	r1, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <I2SEx_TxISR_I2SExt+0x90>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <I2SEx_TxISR_I2SExt+0x22>
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <I2SEx_TxISR_I2SExt+0x94>)
 8004088:	e001      	b.n	800408e <I2SEx_TxISR_I2SExt+0x26>
 800408a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408e:	460a      	mov	r2, r1
 8004090:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d121      	bne.n	80040ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <I2SEx_TxISR_I2SExt+0x90>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <I2SEx_TxISR_I2SExt+0x50>
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <I2SEx_TxISR_I2SExt+0x94>)
 80040b6:	e001      	b.n	80040bc <I2SEx_TxISR_I2SExt+0x54>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	490d      	ldr	r1, [pc, #52]	; (80040f8 <I2SEx_TxISR_I2SExt+0x90>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d101      	bne.n	80040cc <I2SEx_TxISR_I2SExt+0x64>
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <I2SEx_TxISR_I2SExt+0x94>)
 80040ca:	e001      	b.n	80040d0 <I2SEx_TxISR_I2SExt+0x68>
 80040cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff81 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40003800 	.word	0x40003800
 80040fc:	40003400 	.word	0x40003400

08004100 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68d8      	ldr	r0, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	1c99      	adds	r1, r3, #2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004118:	b282      	uxth	r2, r0
 800411a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d113      	bne.n	800415c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004142:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff ff4a 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <I2SEx_RxISR_I2SExt+0x90>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <I2SEx_RxISR_I2SExt+0x16>
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <I2SEx_RxISR_I2SExt+0x94>)
 8004178:	e001      	b.n	800417e <I2SEx_RxISR_I2SExt+0x1a>
 800417a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417e:	68d8      	ldr	r0, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	1c99      	adds	r1, r3, #2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	62d1      	str	r1, [r2, #44]	; 0x2c
 800418a:	b282      	uxth	r2, r0
 800418c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d121      	bne.n	80041ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <I2SEx_RxISR_I2SExt+0x90>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <I2SEx_RxISR_I2SExt+0x50>
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <I2SEx_RxISR_I2SExt+0x94>)
 80041b2:	e001      	b.n	80041b8 <I2SEx_RxISR_I2SExt+0x54>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	490d      	ldr	r1, [pc, #52]	; (80041f4 <I2SEx_RxISR_I2SExt+0x90>)
 80041c0:	428b      	cmp	r3, r1
 80041c2:	d101      	bne.n	80041c8 <I2SEx_RxISR_I2SExt+0x64>
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <I2SEx_RxISR_I2SExt+0x94>)
 80041c6:	e001      	b.n	80041cc <I2SEx_RxISR_I2SExt+0x68>
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff03 	bl	8003ff0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40003800 	.word	0x40003800
 80041f8:	40003400 	.word	0x40003400

080041fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e267      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d075      	beq.n	8004306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421a:	4b88      	ldr	r3, [pc, #544]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d00c      	beq.n	8004240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422e:	2b08      	cmp	r3, #8
 8004230:	d112      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b82      	ldr	r3, [pc, #520]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423e:	d10b      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	4b7e      	ldr	r3, [pc, #504]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05b      	beq.n	8004304 <HAL_RCC_OscConfig+0x108>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d157      	bne.n	8004304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e242      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x74>
 8004262:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a75      	ldr	r2, [pc, #468]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b70      	ldr	r3, [pc, #448]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6f      	ldr	r2, [pc, #444]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b6d      	ldr	r3, [pc, #436]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6c      	ldr	r2, [pc, #432]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004294:	4b69      	ldr	r3, [pc, #420]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a68      	ldr	r2, [pc, #416]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b66      	ldr	r3, [pc, #408]	; (800443c <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a65      	ldr	r2, [pc, #404]	; (800443c <HAL_RCC_OscConfig+0x240>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fc ff4a 	bl	800114c <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fc ff46 	bl	800114c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e207      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b5b      	ldr	r3, [pc, #364]	; (800443c <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xc0>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fc ff36 	bl	800114c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fc ff32 	bl	800114c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1f3      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b51      	ldr	r3, [pc, #324]	; (800443c <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0xe8>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d063      	beq.n	80043da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004312:	4b4a      	ldr	r3, [pc, #296]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b44      	ldr	r3, [pc, #272]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1c7      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b3b      	ldr	r3, [pc, #236]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4937      	ldr	r1, [pc, #220]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e03a      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b34      	ldr	r3, [pc, #208]	; (8004440 <HAL_RCC_OscConfig+0x244>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fc feeb 	bl	800114c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437a:	f7fc fee7 	bl	800114c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1a8      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b28      	ldr	r3, [pc, #160]	; (800443c <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4925      	ldr	r1, [pc, #148]	; (800443c <HAL_RCC_OscConfig+0x240>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	e015      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <HAL_RCC_OscConfig+0x244>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fc feca 	bl	800114c <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fc fec6 	bl	800114c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e187      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d036      	beq.n	8004454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <HAL_RCC_OscConfig+0x248>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fc feaa 	bl	800114c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fc:	f7fc fea6 	bl	800114c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e167      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_OscConfig+0x240>)
 8004410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x200>
 800441a:	e01b      	b.n	8004454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_OscConfig+0x248>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fc fe93 	bl	800114c <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	e00e      	b.n	8004448 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442a:	f7fc fe8f 	bl	800114c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d907      	bls.n	8004448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e150      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
 800443c:	40023800 	.word	0x40023800
 8004440:	42470000 	.word	0x42470000
 8004444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004448:	4b88      	ldr	r3, [pc, #544]	; (800466c <HAL_RCC_OscConfig+0x470>)
 800444a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ea      	bne.n	800442a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8097 	beq.w	8004590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004466:	4b81      	ldr	r3, [pc, #516]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	4b7d      	ldr	r3, [pc, #500]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a7c      	ldr	r2, [pc, #496]	; (800466c <HAL_RCC_OscConfig+0x470>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
 8004482:	4b7a      	ldr	r3, [pc, #488]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004492:	4b77      	ldr	r3, [pc, #476]	; (8004670 <HAL_RCC_OscConfig+0x474>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d118      	bne.n	80044d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449e:	4b74      	ldr	r3, [pc, #464]	; (8004670 <HAL_RCC_OscConfig+0x474>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a73      	ldr	r2, [pc, #460]	; (8004670 <HAL_RCC_OscConfig+0x474>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044aa:	f7fc fe4f 	bl	800114c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fc fe4b 	bl	800114c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e10c      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c4:	4b6a      	ldr	r3, [pc, #424]	; (8004670 <HAL_RCC_OscConfig+0x474>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x2ea>
 80044d8:	4b64      	ldr	r3, [pc, #400]	; (800466c <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a63      	ldr	r2, [pc, #396]	; (800466c <HAL_RCC_OscConfig+0x470>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	e01c      	b.n	8004520 <HAL_RCC_OscConfig+0x324>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0x30c>
 80044ee:	4b5f      	ldr	r3, [pc, #380]	; (800466c <HAL_RCC_OscConfig+0x470>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a5e      	ldr	r2, [pc, #376]	; (800466c <HAL_RCC_OscConfig+0x470>)
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	4b5c      	ldr	r3, [pc, #368]	; (800466c <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a5b      	ldr	r2, [pc, #364]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	e00b      	b.n	8004520 <HAL_RCC_OscConfig+0x324>
 8004508:	4b58      	ldr	r3, [pc, #352]	; (800466c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4a57      	ldr	r2, [pc, #348]	; (800466c <HAL_RCC_OscConfig+0x470>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	6713      	str	r3, [r2, #112]	; 0x70
 8004514:	4b55      	ldr	r3, [pc, #340]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	4a54      	ldr	r2, [pc, #336]	; (800466c <HAL_RCC_OscConfig+0x470>)
 800451a:	f023 0304 	bic.w	r3, r3, #4
 800451e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d015      	beq.n	8004554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc fe10 	bl	800114c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fc fe0c 	bl	800114c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0cb      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004546:	4b49      	ldr	r3, [pc, #292]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ee      	beq.n	8004530 <HAL_RCC_OscConfig+0x334>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004554:	f7fc fdfa 	bl	800114c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fc fdf6 	bl	800114c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e0b5      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004572:	4b3e      	ldr	r3, [pc, #248]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1ee      	bne.n	800455c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004584:	4b39      	ldr	r3, [pc, #228]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	4a38      	ldr	r2, [pc, #224]	; (800466c <HAL_RCC_OscConfig+0x470>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a1 	beq.w	80046dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800459a:	4b34      	ldr	r3, [pc, #208]	; (800466c <HAL_RCC_OscConfig+0x470>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d05c      	beq.n	8004660 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d141      	bne.n	8004632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_RCC_OscConfig+0x478>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fc fdca 	bl	800114c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fc fdc6 	bl	800114c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e087      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ce:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_OscConfig+0x470>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	019b      	lsls	r3, r3, #6
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	3b01      	subs	r3, #1
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	491b      	ldr	r1, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x478>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fc fd9f 	bl	800114c <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004612:	f7fc fd9b 	bl	800114c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e05c      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x416>
 8004630:	e054      	b.n	80046dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_OscConfig+0x478>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fc fd88 	bl	800114c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004640:	f7fc fd84 	bl	800114c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e045      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_RCC_OscConfig+0x470>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x444>
 800465e:	e03d      	b.n	80046dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e038      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
 800466c:	40023800 	.word	0x40023800
 8004670:	40007000 	.word	0x40007000
 8004674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004678:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d028      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d121      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d11a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d111      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	3b01      	subs	r3, #1
 80046c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800

080046ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0cc      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d90c      	bls.n	8004728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b65      	ldr	r3, [pc, #404]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d044      	beq.n	800480c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d119      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e06f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e067      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ca:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4934      	ldr	r1, [pc, #208]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047dc:	f7fc fcb6 	bl	800114c <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fc fcb2 	bl	800114c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e04f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 020c 	and.w	r2, r3, #12
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	429a      	cmp	r2, r3
 800480a:	d1eb      	bne.n	80047e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d20c      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fc16 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08009364 	.word	0x08009364
 80048b0:	20000000 	.word	0x20000000
 80048b4:	20000004 	.word	0x20000004

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b094      	sub	sp, #80	; 0x50
 80048be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	647b      	str	r3, [r7, #68]	; 0x44
 80048c4:	2300      	movs	r3, #0
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	2300      	movs	r3, #0
 80048ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4b79      	ldr	r3, [pc, #484]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d00d      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 80e1 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ea:	e0db      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b73      	ldr	r3, [pc, #460]	; (8004abc <HAL_RCC_GetSysClockFreq+0x204>)
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048f0:	e0db      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f2:	4b73      	ldr	r3, [pc, #460]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80048f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048f6:	e0d8      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	4b6f      	ldr	r3, [pc, #444]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004902:	4b6d      	ldr	r3, [pc, #436]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d063      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b6a      	ldr	r3, [pc, #424]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
 8004918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
 8004922:	2300      	movs	r3, #0
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
 8004926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	f04f 0000 	mov.w	r0, #0
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	0159      	lsls	r1, r3, #5
 8004938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493c:	0150      	lsls	r0, r2, #5
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4621      	mov	r1, r4
 8004944:	1a51      	subs	r1, r2, r1
 8004946:	6139      	str	r1, [r7, #16]
 8004948:	4629      	mov	r1, r5
 800494a:	eb63 0301 	sbc.w	r3, r3, r1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800495c:	4659      	mov	r1, fp
 800495e:	018b      	lsls	r3, r1, #6
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004966:	4651      	mov	r1, sl
 8004968:	018a      	lsls	r2, r1, #6
 800496a:	4651      	mov	r1, sl
 800496c:	ebb2 0801 	subs.w	r8, r2, r1
 8004970:	4659      	mov	r1, fp
 8004972:	eb63 0901 	sbc.w	r9, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498a:	4690      	mov	r8, r2
 800498c:	4699      	mov	r9, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb18 0303 	adds.w	r3, r8, r3
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	462b      	mov	r3, r5
 8004998:	eb49 0303 	adc.w	r3, r9, r3
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049aa:	4629      	mov	r1, r5
 80049ac:	024b      	lsls	r3, r1, #9
 80049ae:	4621      	mov	r1, r4
 80049b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049b4:	4621      	mov	r1, r4
 80049b6:	024a      	lsls	r2, r1, #9
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049be:	2200      	movs	r2, #0
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049c8:	f7fb fc06 	bl	80001d8 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4613      	mov	r3, r2
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d4:	e058      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	2200      	movs	r2, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	4611      	mov	r1, r2
 80049e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	0159      	lsls	r1, r3, #5
 80049fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a02:	0150      	lsls	r0, r2, #5
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a0e:	4649      	mov	r1, r9
 8004a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a28:	ebb2 040a 	subs.w	r4, r2, sl
 8004a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	00eb      	lsls	r3, r5, #3
 8004a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a3e:	00e2      	lsls	r2, r4, #3
 8004a40:	4614      	mov	r4, r2
 8004a42:	461d      	mov	r5, r3
 8004a44:	4643      	mov	r3, r8
 8004a46:	18e3      	adds	r3, r4, r3
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	eb45 0303 	adc.w	r3, r5, r3
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	028b      	lsls	r3, r1, #10
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a68:	4621      	mov	r1, r4
 8004a6a:	028a      	lsls	r2, r1, #10
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a72:	2200      	movs	r2, #0
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	61fa      	str	r2, [r7, #28]
 8004a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a7c:	f7fb fbac 	bl	80001d8 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetSysClockFreq+0x204>)
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3750      	adds	r7, #80	; 0x50
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	007a1200 	.word	0x007a1200

08004ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000000 	.word	0x20000000

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a9b      	lsrs	r3, r3, #10
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	08009374 	.word	0x08009374

08004b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b08:	f7ff ffdc 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0b5b      	lsrs	r3, r3, #13
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4903      	ldr	r1, [pc, #12]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	08009374 	.word	0x08009374

08004b2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d038      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b54:	4b68      	ldr	r3, [pc, #416]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5a:	f7fc faf7 	bl	800114c <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b62:	f7fc faf3 	bl	800114c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0bd      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b74:	4b61      	ldr	r3, [pc, #388]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	495a      	ldr	r1, [pc, #360]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b9a:	4b57      	ldr	r3, [pc, #348]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ba0:	f7fc fad4 	bl	800114c <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ba8:	f7fc fad0 	bl	800114c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e09a      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bba:	4b50      	ldr	r3, [pc, #320]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8083 	beq.w	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	4b48      	ldr	r3, [pc, #288]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	4a47      	ldr	r2, [pc, #284]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be2:	6413      	str	r3, [r2, #64]	; 0x40
 8004be4:	4b45      	ldr	r3, [pc, #276]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a42      	ldr	r2, [pc, #264]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fc faa6 	bl	800114c <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fc faa2 	bl	800114c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e06c      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c16:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02f      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d028      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c40:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c50:	4b2c      	ldr	r3, [pc, #176]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c56:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c5c:	4b27      	ldr	r3, [pc, #156]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d114      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fc fa70 	bl	800114c <HAL_GetTick>
 8004c6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c70:	f7fc fa6c 	bl	800114c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e034      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c86:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ee      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9e:	d10d      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004ca0:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb4:	4911      	ldr	r1, [pc, #68]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
 8004cba:	e005      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cc6:	6093      	str	r3, [r2, #8]
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	4909      	ldr	r1, [pc, #36]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	7d1a      	ldrb	r2, [r3, #20]
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004cec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	42470068 	.word	0x42470068
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40007000 	.word	0x40007000
 8004d04:	42470e40 	.word	0x42470e40
 8004d08:	424711e0 	.word	0x424711e0

08004d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d140      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d131      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d42:	617b      	str	r3, [r7, #20]
          break;
 8004d44:	e031      	b.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d46:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d52:	d109      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d54:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d5e:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	e008      	b.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d68:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d94:	0f1b      	lsrs	r3, r3, #28
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]
          break;
 8004da2:	e002      	b.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
          break;
 8004da8:	bf00      	nop
        }
      }
      break;
 8004daa:	bf00      	nop
    }
  }
  return frequency;
 8004dac:	697b      	ldr	r3, [r7, #20]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	00bb8000 	.word	0x00bb8000
 8004dc4:	007a1200 	.word	0x007a1200
 8004dc8:	00f42400 	.word	0x00f42400

08004dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e07b      	b.n	8004ed6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d108      	bne.n	8004df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dee:	d009      	beq.n	8004e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
 8004df6:	e005      	b.n	8004e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fb ff0c 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	ea42 0103 	orr.w	r1, r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	f003 0104 	and.w	r1, r3, #4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0210 	and.w	r2, r3, #16
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e03f      	b.n	8004f70 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fb ffc3 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2224      	movs	r2, #36	; 0x24
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9f4 	bl	8005310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08c      	sub	sp, #48	; 0x30
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d165      	bne.n	800505e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_UART_Transmit_DMA+0x26>
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e05e      	b.n	8005060 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_UART_Transmit_DMA+0x38>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e057      	b.n	8005060 <HAL_UART_Transmit_DMA+0xe8>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2221      	movs	r2, #33	; 0x21
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	4a22      	ldr	r2, [pc, #136]	; (8005068 <HAL_UART_Transmit_DMA+0xf0>)
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	4a21      	ldr	r2, [pc, #132]	; (800506c <HAL_UART_Transmit_DMA+0xf4>)
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	4a20      	ldr	r2, [pc, #128]	; (8005070 <HAL_UART_Transmit_DMA+0xf8>)
 8004fee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004ff8:	f107 0308 	add.w	r3, r7, #8
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	6819      	ldr	r1, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3304      	adds	r3, #4
 800500c:	461a      	mov	r2, r3
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	f7fc fa8c 	bl	800152c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800501c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	617b      	str	r3, [r7, #20]
   return(result);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005046:	627a      	str	r2, [r7, #36]	; 0x24
 8005048:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6a39      	ldr	r1, [r7, #32]
 800504c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	61fb      	str	r3, [r7, #28]
   return(result);
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e5      	bne.n	8005026 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800505e:	2302      	movs	r3, #2
  }
}
 8005060:	4618      	mov	r0, r3
 8005062:	3730      	adds	r7, #48	; 0x30
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	080050b1 	.word	0x080050b1
 800506c:	0800514b 	.word	0x0800514b
 8005070:	08005167 	.word	0x08005167

08005074 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b090      	sub	sp, #64	; 0x40
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d137      	bne.n	800513c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80050cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ce:	2200      	movs	r2, #0
 80050d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	623b      	str	r3, [r7, #32]
   return(result);
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3314      	adds	r3, #20
 80050f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f2:	633a      	str	r2, [r7, #48]	; 0x30
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	60fb      	str	r3, [r7, #12]
   return(result);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511c:	637b      	str	r3, [r7, #52]	; 0x34
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005126:	61fa      	str	r2, [r7, #28]
 8005128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	617b      	str	r3, [r7, #20]
   return(result);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e5      	bne.n	8005106 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800513a:	e002      	b.n	8005142 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800513c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800513e:	f7ff ff99 	bl	8005074 <HAL_UART_TxCpltCallback>
}
 8005142:	bf00      	nop
 8005144:	3740      	adds	r7, #64	; 0x40
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff ff95 	bl	8005088 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b21      	cmp	r3, #33	; 0x21
 8005198:	d108      	bne.n	80051ac <UART_DMAError+0x46>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2200      	movs	r2, #0
 80051a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051a6:	68b8      	ldr	r0, [r7, #8]
 80051a8:	f000 f827 	bl	80051fa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b22      	cmp	r3, #34	; 0x22
 80051cc:	d108      	bne.n	80051e0 <UART_DMAError+0x7a>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051da:	68b8      	ldr	r0, [r7, #8]
 80051dc:	f000 f835 	bl	800524a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f043 0210 	orr.w	r2, r3, #16
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ec:	68b8      	ldr	r0, [r7, #8]
 80051ee:	f7ff ff55 	bl	800509c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b089      	sub	sp, #36	; 0x24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	60bb      	str	r3, [r7, #8]
   return(result);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	61ba      	str	r2, [r7, #24]
 8005224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6979      	ldr	r1, [r7, #20]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	613b      	str	r3, [r7, #16]
   return(result);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e5      	bne.n	8005202 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800523e:	bf00      	nop
 8005240:	3724      	adds	r7, #36	; 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800524a:	b480      	push	{r7}
 800524c:	b095      	sub	sp, #84	; 0x54
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005272:	643a      	str	r2, [r7, #64]	; 0x40
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e5      	bne.n	8005252 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3314      	adds	r3, #20
 800528c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	61fb      	str	r3, [r7, #28]
   return(result);
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	64bb      	str	r3, [r7, #72]	; 0x48
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3314      	adds	r3, #20
 80052a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d119      	bne.n	80052f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f023 0310 	bic.w	r3, r3, #16
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e2:	61ba      	str	r2, [r7, #24]
 80052e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	613b      	str	r3, [r7, #16]
   return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005304:	bf00      	nop
 8005306:	3754      	adds	r7, #84	; 0x54
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005314:	b0c0      	sub	sp, #256	; 0x100
 8005316:	af00      	add	r7, sp, #0
 8005318:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	68d9      	ldr	r1, [r3, #12]
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	ea40 0301 	orr.w	r3, r0, r1
 8005338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	431a      	orrs	r2, r3
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	431a      	orrs	r2, r3
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005368:	f021 010c 	bic.w	r1, r1, #12
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005376:	430b      	orrs	r3, r1
 8005378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	6999      	ldr	r1, [r3, #24]
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	ea40 0301 	orr.w	r3, r0, r1
 8005396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b8f      	ldr	r3, [pc, #572]	; (80055dc <UART_SetConfig+0x2cc>)
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d005      	beq.n	80053b0 <UART_SetConfig+0xa0>
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b8d      	ldr	r3, [pc, #564]	; (80055e0 <UART_SetConfig+0x2d0>)
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d104      	bne.n	80053ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b0:	f7ff fba8 	bl	8004b04 <HAL_RCC_GetPCLK2Freq>
 80053b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053b8:	e003      	b.n	80053c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ba:	f7ff fb8f 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 80053be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053cc:	f040 810c 	bne.w	80055e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053e2:	4622      	mov	r2, r4
 80053e4:	462b      	mov	r3, r5
 80053e6:	1891      	adds	r1, r2, r2
 80053e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80053ea:	415b      	adcs	r3, r3
 80053ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053f2:	4621      	mov	r1, r4
 80053f4:	eb12 0801 	adds.w	r8, r2, r1
 80053f8:	4629      	mov	r1, r5
 80053fa:	eb43 0901 	adc.w	r9, r3, r1
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800540a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800540e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005412:	4690      	mov	r8, r2
 8005414:	4699      	mov	r9, r3
 8005416:	4623      	mov	r3, r4
 8005418:	eb18 0303 	adds.w	r3, r8, r3
 800541c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005420:	462b      	mov	r3, r5
 8005422:	eb49 0303 	adc.w	r3, r9, r3
 8005426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005436:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800543a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800543e:	460b      	mov	r3, r1
 8005440:	18db      	adds	r3, r3, r3
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
 8005444:	4613      	mov	r3, r2
 8005446:	eb42 0303 	adc.w	r3, r2, r3
 800544a:	657b      	str	r3, [r7, #84]	; 0x54
 800544c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005454:	f7fa fec0 	bl	80001d8 <__aeabi_uldivmod>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4b61      	ldr	r3, [pc, #388]	; (80055e4 <UART_SetConfig+0x2d4>)
 800545e:	fba3 2302 	umull	r2, r3, r3, r2
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	011c      	lsls	r4, r3, #4
 8005466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546a:	2200      	movs	r2, #0
 800546c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005470:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005478:	4642      	mov	r2, r8
 800547a:	464b      	mov	r3, r9
 800547c:	1891      	adds	r1, r2, r2
 800547e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005480:	415b      	adcs	r3, r3
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005488:	4641      	mov	r1, r8
 800548a:	eb12 0a01 	adds.w	sl, r2, r1
 800548e:	4649      	mov	r1, r9
 8005490:	eb43 0b01 	adc.w	fp, r3, r1
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a8:	4692      	mov	sl, r2
 80054aa:	469b      	mov	fp, r3
 80054ac:	4643      	mov	r3, r8
 80054ae:	eb1a 0303 	adds.w	r3, sl, r3
 80054b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054b6:	464b      	mov	r3, r9
 80054b8:	eb4b 0303 	adc.w	r3, fp, r3
 80054bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054d4:	460b      	mov	r3, r1
 80054d6:	18db      	adds	r3, r3, r3
 80054d8:	643b      	str	r3, [r7, #64]	; 0x40
 80054da:	4613      	mov	r3, r2
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	647b      	str	r3, [r7, #68]	; 0x44
 80054e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054ea:	f7fa fe75 	bl	80001d8 <__aeabi_uldivmod>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <UART_SetConfig+0x2d4>)
 80054f6:	fba3 2301 	umull	r2, r3, r3, r1
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2264      	movs	r2, #100	; 0x64
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	1acb      	subs	r3, r1, r3
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <UART_SetConfig+0x2d4>)
 800550c:	fba3 2302 	umull	r2, r3, r3, r2
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005518:	441c      	add	r4, r3
 800551a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551e:	2200      	movs	r2, #0
 8005520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005524:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	1891      	adds	r1, r2, r2
 8005532:	63b9      	str	r1, [r7, #56]	; 0x38
 8005534:	415b      	adcs	r3, r3
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800553c:	4641      	mov	r1, r8
 800553e:	1851      	adds	r1, r2, r1
 8005540:	6339      	str	r1, [r7, #48]	; 0x30
 8005542:	4649      	mov	r1, r9
 8005544:	414b      	adcs	r3, r1
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005554:	4659      	mov	r1, fp
 8005556:	00cb      	lsls	r3, r1, #3
 8005558:	4651      	mov	r1, sl
 800555a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800555e:	4651      	mov	r1, sl
 8005560:	00ca      	lsls	r2, r1, #3
 8005562:	4610      	mov	r0, r2
 8005564:	4619      	mov	r1, r3
 8005566:	4603      	mov	r3, r0
 8005568:	4642      	mov	r2, r8
 800556a:	189b      	adds	r3, r3, r2
 800556c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005570:	464b      	mov	r3, r9
 8005572:	460a      	mov	r2, r1
 8005574:	eb42 0303 	adc.w	r3, r2, r3
 8005578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005588:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800558c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005590:	460b      	mov	r3, r1
 8005592:	18db      	adds	r3, r3, r3
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
 8005596:	4613      	mov	r3, r2
 8005598:	eb42 0303 	adc.w	r3, r2, r3
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055a6:	f7fa fe17 	bl	80001d8 <__aeabi_uldivmod>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <UART_SetConfig+0x2d4>)
 80055b0:	fba3 1302 	umull	r1, r3, r3, r2
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2164      	movs	r1, #100	; 0x64
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <UART_SetConfig+0x2d4>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 0207 	and.w	r2, r3, #7
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4422      	add	r2, r4
 80055d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055d8:	e106      	b.n	80057e8 <UART_SetConfig+0x4d8>
 80055da:	bf00      	nop
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055fa:	4642      	mov	r2, r8
 80055fc:	464b      	mov	r3, r9
 80055fe:	1891      	adds	r1, r2, r2
 8005600:	6239      	str	r1, [r7, #32]
 8005602:	415b      	adcs	r3, r3
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
 8005606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800560a:	4641      	mov	r1, r8
 800560c:	1854      	adds	r4, r2, r1
 800560e:	4649      	mov	r1, r9
 8005610:	eb43 0501 	adc.w	r5, r3, r1
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	00eb      	lsls	r3, r5, #3
 800561e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005622:	00e2      	lsls	r2, r4, #3
 8005624:	4614      	mov	r4, r2
 8005626:	461d      	mov	r5, r3
 8005628:	4643      	mov	r3, r8
 800562a:	18e3      	adds	r3, r4, r3
 800562c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005630:	464b      	mov	r3, r9
 8005632:	eb45 0303 	adc.w	r3, r5, r3
 8005636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005656:	4629      	mov	r1, r5
 8005658:	008b      	lsls	r3, r1, #2
 800565a:	4621      	mov	r1, r4
 800565c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005660:	4621      	mov	r1, r4
 8005662:	008a      	lsls	r2, r1, #2
 8005664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005668:	f7fa fdb6 	bl	80001d8 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4b60      	ldr	r3, [pc, #384]	; (80057f4 <UART_SetConfig+0x4e4>)
 8005672:	fba3 2302 	umull	r2, r3, r3, r2
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	011c      	lsls	r4, r3, #4
 800567a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567e:	2200      	movs	r2, #0
 8005680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	1891      	adds	r1, r2, r2
 8005692:	61b9      	str	r1, [r7, #24]
 8005694:	415b      	adcs	r3, r3
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800569c:	4641      	mov	r1, r8
 800569e:	1851      	adds	r1, r2, r1
 80056a0:	6139      	str	r1, [r7, #16]
 80056a2:	4649      	mov	r1, r9
 80056a4:	414b      	adcs	r3, r1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b4:	4659      	mov	r1, fp
 80056b6:	00cb      	lsls	r3, r1, #3
 80056b8:	4651      	mov	r1, sl
 80056ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056be:	4651      	mov	r1, sl
 80056c0:	00ca      	lsls	r2, r1, #3
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	4642      	mov	r2, r8
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056d0:	464b      	mov	r3, r9
 80056d2:	460a      	mov	r2, r1
 80056d4:	eb42 0303 	adc.w	r3, r2, r3
 80056d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056f4:	4649      	mov	r1, r9
 80056f6:	008b      	lsls	r3, r1, #2
 80056f8:	4641      	mov	r1, r8
 80056fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fe:	4641      	mov	r1, r8
 8005700:	008a      	lsls	r2, r1, #2
 8005702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005706:	f7fa fd67 	bl	80001d8 <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4611      	mov	r1, r2
 8005710:	4b38      	ldr	r3, [pc, #224]	; (80057f4 <UART_SetConfig+0x4e4>)
 8005712:	fba3 2301 	umull	r2, r3, r3, r1
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	2264      	movs	r2, #100	; 0x64
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	1acb      	subs	r3, r1, r3
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	3332      	adds	r3, #50	; 0x32
 8005724:	4a33      	ldr	r2, [pc, #204]	; (80057f4 <UART_SetConfig+0x4e4>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005730:	441c      	add	r4, r3
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005736:	2200      	movs	r2, #0
 8005738:	673b      	str	r3, [r7, #112]	; 0x70
 800573a:	677a      	str	r2, [r7, #116]	; 0x74
 800573c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005740:	4642      	mov	r2, r8
 8005742:	464b      	mov	r3, r9
 8005744:	1891      	adds	r1, r2, r2
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	415b      	adcs	r3, r3
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005750:	4641      	mov	r1, r8
 8005752:	1851      	adds	r1, r2, r1
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	4649      	mov	r1, r9
 8005758:	414b      	adcs	r3, r1
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005768:	4659      	mov	r1, fp
 800576a:	00cb      	lsls	r3, r1, #3
 800576c:	4651      	mov	r1, sl
 800576e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005772:	4651      	mov	r1, sl
 8005774:	00ca      	lsls	r2, r1, #3
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	4603      	mov	r3, r0
 800577c:	4642      	mov	r2, r8
 800577e:	189b      	adds	r3, r3, r2
 8005780:	66bb      	str	r3, [r7, #104]	; 0x68
 8005782:	464b      	mov	r3, r9
 8005784:	460a      	mov	r2, r1
 8005786:	eb42 0303 	adc.w	r3, r2, r3
 800578a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	663b      	str	r3, [r7, #96]	; 0x60
 8005796:	667a      	str	r2, [r7, #100]	; 0x64
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057a4:	4649      	mov	r1, r9
 80057a6:	008b      	lsls	r3, r1, #2
 80057a8:	4641      	mov	r1, r8
 80057aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ae:	4641      	mov	r1, r8
 80057b0:	008a      	lsls	r2, r1, #2
 80057b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057b6:	f7fa fd0f 	bl	80001d8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <UART_SetConfig+0x4e4>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	; 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	3332      	adds	r3, #50	; 0x32
 80057d2:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <UART_SetConfig+0x4e4>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f003 020f 	and.w	r2, r3, #15
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4422      	add	r2, r4
 80057e6:	609a      	str	r2, [r3, #8]
}
 80057e8:	bf00      	nop
 80057ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057ee:	46bd      	mov	sp, r7
 80057f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f4:	51eb851f 	.word	0x51eb851f

080057f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f8:	b084      	sub	sp, #16
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	f107 001c 	add.w	r0, r7, #28
 8005806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2b01      	cmp	r3, #1
 800580e:	d122      	bne.n	8005856 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9c0 	bl	8005bd0 <USB_CoreReset>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]
 8005854:	e01a      	b.n	800588c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9b4 	bl	8005bd0 <USB_CoreReset>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800586c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
 800587e:	e005      	b.n	800588c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	2b01      	cmp	r3, #1
 8005890:	d10b      	bne.n	80058aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f043 0206 	orr.w	r2, r3, #6
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b6:	b004      	add	sp, #16
 80058b8:	4770      	bx	lr

080058ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f043 0201 	orr.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 0201 	bic.w	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d115      	bne.n	800594c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800592c:	2001      	movs	r0, #1
 800592e:	f7fb fc19 	bl	8001164 <HAL_Delay>
      ms++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f93a 	bl	8005bb2 <USB_GetMode>
 800593e:	4603      	mov	r3, r0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d01e      	beq.n	8005982 <USB_SetCurrentMode+0x84>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b31      	cmp	r3, #49	; 0x31
 8005948:	d9f0      	bls.n	800592c <USB_SetCurrentMode+0x2e>
 800594a:	e01a      	b.n	8005982 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d115      	bne.n	800597e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800595e:	2001      	movs	r0, #1
 8005960:	f7fb fc00 	bl	8001164 <HAL_Delay>
      ms++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f921 	bl	8005bb2 <USB_GetMode>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <USB_SetCurrentMode+0x84>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b31      	cmp	r3, #49	; 0x31
 800597a:	d9f0      	bls.n	800595e <USB_SetCurrentMode+0x60>
 800597c:	e001      	b.n	8005982 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e005      	b.n	800598e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b32      	cmp	r3, #50	; 0x32
 8005986:	d101      	bne.n	800598c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3301      	adds	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4a13      	ldr	r2, [pc, #76]	; (80059fc <USB_FlushTxFifo+0x64>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e01b      	b.n	80059f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	daf2      	bge.n	80059a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	019b      	lsls	r3, r3, #6
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a08      	ldr	r2, [pc, #32]	; (80059fc <USB_FlushTxFifo+0x64>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e006      	b.n	80059f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d0f0      	beq.n	80059d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	00030d40 	.word	0x00030d40

08005a00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a11      	ldr	r2, [pc, #68]	; (8005a5c <USB_FlushRxFifo+0x5c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e018      	b.n	8005a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	daf2      	bge.n	8005a0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <USB_FlushRxFifo+0x5c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e006      	b.n	8005a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d0f0      	beq.n	8005a30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	00030d40 	.word	0x00030d40

08005a60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	460b      	mov	r3, r1
 8005a70:	71fb      	strb	r3, [r7, #7]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d123      	bne.n	8005ace <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a86:	88bb      	ldrh	r3, [r7, #4]
 8005a88:	3303      	adds	r3, #3
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e018      	b.n	8005ac6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	031a      	lsls	r2, r3, #12
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3e2      	bcc.n	8005a94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3724      	adds	r7, #36	; 0x24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08b      	sub	sp, #44	; 0x2c
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	623b      	str	r3, [r7, #32]
 8005b06:	e014      	b.n	8005b32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	3301      	adds	r3, #1
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	3301      	adds	r3, #1
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3e6      	bcc.n	8005b08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b3a:	8bfb      	ldrh	r3, [r7, #30]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01e      	beq.n	8005b7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	701a      	strb	r2, [r3, #0]
      i++;
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b72:	8bfb      	ldrh	r3, [r7, #30]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b78:	8bfb      	ldrh	r3, [r7, #30]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ea      	bne.n	8005b54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	372c      	adds	r7, #44	; 0x2c
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <USB_CoreReset+0x64>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e01b      	b.n	8005c26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	daf2      	bge.n	8005bdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f043 0201 	orr.w	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <USB_CoreReset+0x64>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d901      	bls.n	8005c18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e006      	b.n	8005c26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d0f0      	beq.n	8005c06 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	00030d40 	.word	0x00030d40

08005c38 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c38:	b084      	sub	sp, #16
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d018      	beq.n	8005cc0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10a      	bne.n	8005caa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ca2:	f043 0304 	orr.w	r3, r3, #4
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e014      	b.n	8005cd4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cb8:	f023 0304 	bic.w	r3, r3, #4
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	e009      	b.n	8005cd4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cce:	f023 0304 	bic.w	r3, r3, #4
 8005cd2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cd4:	2110      	movs	r1, #16
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff fe5e 	bl	8005998 <USB_FlushTxFifo>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fe8a 	bl	8005a00 <USB_FlushRxFifo>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	e015      	b.n	8005d28 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3301      	adds	r3, #1
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d3e5      	bcc.n	8005cfc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <USB_HostInit+0x16c>)
 8005d56:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <USB_HostInit+0x170>)
 8005d5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d60:	e009      	b.n	8005d76 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a10      	ldr	r2, [pc, #64]	; (8005dac <USB_HostInit+0x174>)
 8005d6c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <USB_HostInit+0x178>)
 8005d72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d105      	bne.n	8005d88 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f043 0210 	orr.w	r2, r3, #16
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699a      	ldr	r2, [r3, #24]
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <USB_HostInit+0x17c>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da0:	b004      	add	sp, #16
 8005da2:	4770      	bx	lr
 8005da4:	01000200 	.word	0x01000200
 8005da8:	00e00300 	.word	0x00e00300
 8005dac:	00600080 	.word	0x00600080
 8005db0:	004000e0 	.word	0x004000e0
 8005db4:	a3200008 	.word	0xa3200008

08005db8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005df0:	4313      	orrs	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d107      	bne.n	8005e0a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e00:	461a      	mov	r2, r3
 8005e02:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e06:	6053      	str	r3, [r2, #4]
 8005e08:	e009      	b.n	8005e1e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d106      	bne.n	8005e1e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e16:	461a      	mov	r2, r3
 8005e18:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e1c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e5c:	2064      	movs	r0, #100	; 0x64
 8005e5e:	f7fb f981 	bl	8001164 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e70:	200a      	movs	r0, #10
 8005e72:	f7fb f977 	bl	8001164 <HAL_Delay>

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ea4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <USB_DriveVbus+0x44>
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d106      	bne.n	8005ec4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ebe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ec2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ece:	d109      	bne.n	8005ee4 <USB_DriveVbus+0x64>
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	0c5b      	lsrs	r3, r3, #17
 8005f10:	f003 0303 	and.w	r3, r3, #3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	b29b      	uxth	r3, r3
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	70fb      	strb	r3, [r7, #3]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70bb      	strb	r3, [r7, #2]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	461a      	mov	r2, r3
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295
 8005f78:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d87e      	bhi.n	8006080 <USB_HC_Init+0x13c>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <USB_HC_Init+0x44>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08006043 	.word	0x08006043
 8005f90:	08005f99 	.word	0x08005f99
 8005f94:	08006005 	.word	0x08006005
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f240 439d 	movw	r3, #1181	; 0x49d
 8005faa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	da10      	bge.n	8005fd6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005fd4:	e057      	b.n	8006086 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d051      	beq.n	8006086 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006000:	60d3      	str	r3, [r2, #12]
      break;
 8006002:	e040      	b.n	8006086 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	461a      	mov	r2, r3
 8006012:	f240 639d 	movw	r3, #1693	; 0x69d
 8006016:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006018:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da34      	bge.n	800608a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	440a      	add	r2, r1
 8006036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006040:	e023      	b.n	800608a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	461a      	mov	r2, r3
 8006050:	f240 2325 	movw	r3, #549	; 0x225
 8006054:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006056:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800605a:	2b00      	cmp	r3, #0
 800605c:	da17      	bge.n	800608e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006078:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800607c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800607e:	e006      	b.n	800608e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	77fb      	strb	r3, [r7, #31]
      break;
 8006084:	e004      	b.n	8006090 <USB_HC_Init+0x14c>
      break;
 8006086:	bf00      	nop
 8006088:	e002      	b.n	8006090 <USB_HC_Init+0x14c>
      break;
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <USB_HC_Init+0x14c>
      break;
 800608e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060aa:	f043 0302 	orr.w	r3, r3, #2
 80060ae:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	2101      	movs	r1, #1
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	6939      	ldr	r1, [r7, #16]
 80060c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060ca:	4313      	orrs	r3, r2
 80060cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da03      	bge.n	80060ea <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e001      	b.n	80060ee <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff feff 	bl	8005ef2 <USB_GetHostSpeed>
 80060f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d106      	bne.n	800610c <USB_HC_Init+0x1c8>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d003      	beq.n	800610c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e001      	b.n	8006110 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006110:	787b      	ldrb	r3, [r7, #1]
 8006112:	059b      	lsls	r3, r3, #22
 8006114:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006118:	78bb      	ldrb	r3, [r7, #2]
 800611a:	02db      	lsls	r3, r3, #11
 800611c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006120:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006122:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006126:	049b      	lsls	r3, r3, #18
 8006128:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800612c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800612e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006130:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006134:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	0159      	lsls	r1, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	440b      	add	r3, r1
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800614c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800614e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006152:	2b03      	cmp	r3, #3
 8006154:	d003      	beq.n	800615e <USB_HC_Init+0x21a>
 8006156:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10f      	bne.n	800617e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4413      	add	r3, r2
 8006166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	440a      	add	r2, r1
 8006174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006178:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800617c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800617e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08c      	sub	sp, #48	; 0x30
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02d      	beq.n	800620e <USB_HC_StartXfer+0x86>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	791b      	ldrb	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d129      	bne.n	800620e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d117      	bne.n	80061f0 <USB_HC_StartXfer+0x68>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	79db      	ldrb	r3, [r3, #7]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <USB_HC_StartXfer+0x48>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	79db      	ldrb	r3, [r3, #7]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d10f      	bne.n	80061f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <USB_HC_StartXfer+0x86>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	795b      	ldrb	r3, [r3, #5]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d107      	bne.n	800620e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	4619      	mov	r1, r3
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fa0f 	bl	8006628 <USB_DoPing>
      return HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	e0f8      	b.n	8006400 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	8912      	ldrh	r2, [r2, #8]
 800621e:	4413      	add	r3, r2
 8006220:	3b01      	subs	r3, #1
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	8912      	ldrh	r2, [r2, #8]
 8006226:	fbb3 f3f2 	udiv	r3, r3, r2
 800622a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800622c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800622e:	8b7b      	ldrh	r3, [r7, #26]
 8006230:	429a      	cmp	r2, r3
 8006232:	d90b      	bls.n	800624c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006234:	8b7b      	ldrh	r3, [r7, #26]
 8006236:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	8912      	ldrh	r2, [r2, #8]
 800623e:	fb03 f202 	mul.w	r2, r3, r2
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	611a      	str	r2, [r3, #16]
 8006246:	e001      	b.n	800624c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006248:	2301      	movs	r3, #1
 800624a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	78db      	ldrb	r3, [r3, #3]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	8912      	ldrh	r2, [r2, #8]
 800625a:	fb03 f202 	mul.w	r2, r3, r2
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	611a      	str	r2, [r3, #16]
 8006262:	e003      	b.n	800626c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006276:	04d9      	lsls	r1, r3, #19
 8006278:	4b63      	ldr	r3, [pc, #396]	; (8006408 <USB_HC_StartXfer+0x280>)
 800627a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800627c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	7a9b      	ldrb	r3, [r3, #10]
 8006282:	075b      	lsls	r3, r3, #29
 8006284:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006288:	69f9      	ldr	r1, [r7, #28]
 800628a:	0148      	lsls	r0, r1, #5
 800628c:	6a39      	ldr	r1, [r7, #32]
 800628e:	4401      	add	r1, r0
 8006290:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006294:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006296:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	68d9      	ldr	r1, [r3, #12]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ae:	460a      	mov	r2, r1
 80062b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	7e7b      	ldrb	r3, [r7, #25]
 80062fa:	075b      	lsls	r3, r3, #29
 80062fc:	69f9      	ldr	r1, [r7, #28]
 80062fe:	0148      	lsls	r0, r1, #5
 8006300:	6a39      	ldr	r1, [r7, #32]
 8006302:	4401      	add	r1, r0
 8006304:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006322:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	78db      	ldrb	r3, [r3, #3]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	e003      	b.n	800633e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800633c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006344:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	461a      	mov	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e04e      	b.n	8006400 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	78db      	ldrb	r3, [r3, #3]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d149      	bne.n	80063fe <USB_HC_StartXfer+0x276>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d045      	beq.n	80063fe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	79db      	ldrb	r3, [r3, #7]
 8006376:	2b03      	cmp	r3, #3
 8006378:	d830      	bhi.n	80063dc <USB_HC_StartXfer+0x254>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USB_HC_StartXfer+0x1f8>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	08006391 	.word	0x08006391
 8006384:	080063b5 	.word	0x080063b5
 8006388:	08006391 	.word	0x08006391
 800638c:	080063b5 	.word	0x080063b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	3303      	adds	r3, #3
 8006396:	089b      	lsrs	r3, r3, #2
 8006398:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800639a:	8afa      	ldrh	r2, [r7, #22]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d91c      	bls.n	80063e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80063b2:	e015      	b.n	80063e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	3303      	adds	r3, #3
 80063ba:	089b      	lsrs	r3, r3, #2
 80063bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063be:	8afa      	ldrh	r2, [r7, #22]
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d90a      	bls.n	80063e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80063da:	e003      	b.n	80063e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80063dc:	bf00      	nop
 80063de:	e002      	b.n	80063e6 <USB_HC_StartXfer+0x25e>
        break;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <USB_HC_StartXfer+0x25e>
        break;
 80063e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	68d9      	ldr	r1, [r3, #12]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	785a      	ldrb	r2, [r3, #1]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2000      	movs	r0, #0
 80063f6:	9000      	str	r0, [sp, #0]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff fb31 	bl	8005a60 <USB_WritePacket>
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3728      	adds	r7, #40	; 0x28
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	1ff80000 	.word	0x1ff80000

0800640c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	b29b      	uxth	r3, r3
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800642e:	b480      	push	{r7}
 8006430:	b089      	sub	sp, #36	; 0x24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	0c9b      	lsrs	r3, r3, #18
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	0fdb      	lsrs	r3, r3, #31
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b20      	cmp	r3, #32
 800647c:	d104      	bne.n	8006488 <USB_HC_Halt+0x5a>
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e0c8      	b.n	800661a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <USB_HC_Halt+0x66>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d163      	bne.n	800655c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 80ab 	bne.w	8006618 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d133      	bne.n	8006536 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	440a      	add	r2, r1
 8006504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800650c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3301      	adds	r3, #1
 8006512:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651a:	d81d      	bhi.n	8006558 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800652e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006532:	d0ec      	beq.n	800650e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006534:	e070      	b.n	8006618 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	440a      	add	r2, r1
 800654c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006554:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006556:	e05f      	b.n	8006618 <USB_HC_Halt+0x1ea>
            break;
 8006558:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800655a:	e05d      	b.n	8006618 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800657a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d133      	bne.n	80065f4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d8:	d81d      	bhi.n	8006616 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f0:	d0ec      	beq.n	80065cc <USB_HC_Halt+0x19e>
 80065f2:	e011      	b.n	8006618 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	e000      	b.n	8006618 <USB_HC_Halt+0x1ea>
          break;
 8006616:	bf00      	nop
    }
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3724      	adds	r7, #36	; 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800663c:	2301      	movs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	04da      	lsls	r2, r3, #19
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <USB_DoPing+0x74>)
 8006646:	4013      	ands	r3, r2
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	440a      	add	r2, r1
 8006650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006658:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006670:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006678:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	461a      	mov	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	1ff80000 	.word	0x1ff80000

080066a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff f911 	bl	80058dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066ba:	2110      	movs	r1, #16
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff f96b 	bl	8005998 <USB_FlushTxFifo>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff f997 	bl	8005a00 <USB_FlushRxFifo>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e01f      	b.n	8006722 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006700:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006708:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	461a      	mov	r2, r3
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	3301      	adds	r3, #1
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b0f      	cmp	r3, #15
 8006726:	d9dc      	bls.n	80066e2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e034      	b.n	8006798 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006744:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800674c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006754:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	461a      	mov	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3301      	adds	r3, #1
 800676c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006774:	d80c      	bhi.n	8006790 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800678c:	d0ec      	beq.n	8006768 <USB_StopHost+0xc8>
 800678e:	e000      	b.n	8006792 <USB_StopHost+0xf2>
        break;
 8006790:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	3301      	adds	r3, #1
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d9c7      	bls.n	800672e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a4:	461a      	mov	r2, r3
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff f880 	bl	80058ba <USB_EnableGlobalInt>

  return ret;
 80067ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b089      	sub	sp, #36	; 0x24
 80067c8:	af04      	add	r7, sp, #16
 80067ca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80067cc:	2301      	movs	r3, #1
 80067ce:	2202      	movs	r2, #2
 80067d0:	2102      	movs	r1, #2
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fc66 	bl	80070a4 <USBH_FindInterface>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2bff      	cmp	r3, #255	; 0xff
 80067e0:	d002      	beq.n	80067e8 <USBH_CDC_InterfaceInit+0x24>
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d901      	bls.n	80067ec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067e8:	2302      	movs	r3, #2
 80067ea:	e13d      	b.n	8006a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fc3b 	bl	800706c <USBH_SelectInterface>
 80067f6:	4603      	mov	r3, r0
 80067f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006800:	2302      	movs	r3, #2
 8006802:	e131      	b.n	8006a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800680a:	2050      	movs	r0, #80	; 0x50
 800680c:	f002 fc50 	bl	80090b0 <malloc>
 8006810:	4603      	mov	r3, r0
 8006812:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006824:	2302      	movs	r3, #2
 8006826:	e11f      	b.n	8006a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006828:	2250      	movs	r2, #80	; 0x50
 800682a:	2100      	movs	r1, #0
 800682c:	68b8      	ldr	r0, [r7, #8]
 800682e:	f002 fcfb 	bl	8009228 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	211a      	movs	r1, #26
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	4413      	add	r3, r2
 800683e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	b25b      	sxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	da15      	bge.n	8006876 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	211a      	movs	r1, #26
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	4413      	add	r3, r2
 8006856:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	211a      	movs	r1, #26
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006870:	881a      	ldrh	r2, [r3, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 ff2e 	bl	80086de <USBH_AllocPipe>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	7819      	ldrb	r1, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	7858      	ldrb	r0, [r3, #1]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	8952      	ldrh	r2, [r2, #10]
 80068a2:	9202      	str	r2, [sp, #8]
 80068a4:	2203      	movs	r2, #3
 80068a6:	9201      	str	r2, [sp, #4]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4623      	mov	r3, r4
 80068ac:	4602      	mov	r2, r0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fee6 	bl	8008680 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2200      	movs	r2, #0
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f002 f9f5 	bl	8008cac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80068c2:	2300      	movs	r3, #0
 80068c4:	2200      	movs	r2, #0
 80068c6:	210a      	movs	r1, #10
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fbeb 	bl	80070a4 <USBH_FindInterface>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	2bff      	cmp	r3, #255	; 0xff
 80068d6:	d002      	beq.n	80068de <USBH_CDC_InterfaceInit+0x11a>
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d901      	bls.n	80068e2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068de:	2302      	movs	r3, #2
 80068e0:	e0c2      	b.n	8006a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	211a      	movs	r1, #26
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da16      	bge.n	8006928 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	211a      	movs	r1, #26
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800690a:	781a      	ldrb	r2, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	211a      	movs	r1, #26
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	4413      	add	r3, r2
 800691c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006920:	881a      	ldrh	r2, [r3, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	835a      	strh	r2, [r3, #26]
 8006926:	e015      	b.n	8006954 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	211a      	movs	r1, #26
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	4413      	add	r3, r2
 8006934:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	211a      	movs	r1, #26
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	4413      	add	r3, r2
 800694a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	211a      	movs	r1, #26
 800695a:	fb01 f303 	mul.w	r3, r1, r3
 800695e:	4413      	add	r3, r2
 8006960:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b25b      	sxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	da16      	bge.n	800699a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	211a      	movs	r1, #26
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	f203 3356 	addw	r3, r3, #854	; 0x356
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	211a      	movs	r1, #26
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	4413      	add	r3, r2
 800698e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006992:	881a      	ldrh	r2, [r3, #0]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	835a      	strh	r2, [r3, #26]
 8006998:	e015      	b.n	80069c6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	211a      	movs	r1, #26
 80069a0:	fb01 f303 	mul.w	r3, r1, r3
 80069a4:	4413      	add	r3, r2
 80069a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	211a      	movs	r1, #26
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069c0:	881a      	ldrh	r2, [r3, #0]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	7b9b      	ldrb	r3, [r3, #14]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 fe86 	bl	80086de <USBH_AllocPipe>
 80069d2:	4603      	mov	r3, r0
 80069d4:	461a      	mov	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	7bdb      	ldrb	r3, [r3, #15]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fe7c 	bl	80086de <USBH_AllocPipe>
 80069e6:	4603      	mov	r3, r0
 80069e8:	461a      	mov	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	7b59      	ldrb	r1, [r3, #13]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	7b98      	ldrb	r0, [r3, #14]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	8b12      	ldrh	r2, [r2, #24]
 8006a06:	9202      	str	r2, [sp, #8]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	9201      	str	r2, [sp, #4]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4623      	mov	r3, r4
 8006a10:	4602      	mov	r2, r0
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fe34 	bl	8008680 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	7b19      	ldrb	r1, [r3, #12]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	7bd8      	ldrb	r0, [r3, #15]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	8b52      	ldrh	r2, [r2, #26]
 8006a30:	9202      	str	r2, [sp, #8]
 8006a32:	2202      	movs	r2, #2
 8006a34:	9201      	str	r2, [sp, #4]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	4623      	mov	r3, r4
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fe1f 	bl	8008680 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	7b5b      	ldrb	r3, [r3, #13]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 f92a 	bl	8008cac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	7b1b      	ldrb	r3, [r3, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f002 f923 	bl	8008cac <USBH_LL_SetToggle>

  return USBH_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd90      	pop	{r4, r7, pc}

08006a70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00e      	beq.n	8006aa8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fe14 	bl	80086be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fe3f 	bl	8008720 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	7b1b      	ldrb	r3, [r3, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	7b1b      	ldrb	r3, [r3, #12]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 fe01 	bl	80086be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	7b1b      	ldrb	r3, [r3, #12]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fe2c 	bl	8008720 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	7b5b      	ldrb	r3, [r3, #13]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00e      	beq.n	8006af4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	7b5b      	ldrb	r3, [r3, #13]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fdee 	bl	80086be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	7b5b      	ldrb	r3, [r3, #13]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fe19 	bl	8008720 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f002 fad9 	bl	80090c0 <free>
    phost->pActiveClass->pData = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b14:	2200      	movs	r2, #0
 8006b16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3340      	adds	r3, #64	; 0x40
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f8b1 	bl	8006ca2 <GetLineCoding>
 8006b40:	4603      	mov	r3, r0
 8006b42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d105      	bne.n	8006b56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b50:	2102      	movs	r1, #2
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b56:	7afb      	ldrb	r3, [r7, #11]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d877      	bhi.n	8006c74 <USBH_CDC_Process+0x114>
 8006b84:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <USBH_CDC_Process+0x2c>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006ba1 	.word	0x08006ba1
 8006b90:	08006ba7 	.word	0x08006ba7
 8006b94:	08006bd7 	.word	0x08006bd7
 8006b98:	08006c4b 	.word	0x08006c4b
 8006b9c:	08006c59 	.word	0x08006c59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba4:	e06d      	b.n	8006c82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f897 	bl	8006ce0 <SetLineCoding>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bc4:	e058      	b.n	8006c78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d055      	beq.n	8006c78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2204      	movs	r2, #4
 8006bd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bd4:	e050      	b.n	8006c78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	3340      	adds	r3, #64	; 0x40
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f860 	bl	8006ca2 <GetLineCoding>
 8006be2:	4603      	mov	r3, r0
 8006be4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d126      	bne.n	8006c3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfe:	791b      	ldrb	r3, [r3, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d13b      	bne.n	8006c7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d133      	bne.n	8006c7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d12b      	bne.n	8006c7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d124      	bne.n	8006c7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f958 	bl	8006ee8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c38:	e020      	b.n	8006c7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d01d      	beq.n	8006c7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2204      	movs	r2, #4
 8006c44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c48:	e018      	b.n	8006c7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f867 	bl	8006d1e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f8da 	bl	8006e0a <CDC_ProcessReception>
      break;
 8006c56:	e014      	b.n	8006c82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 ffef 	bl	8007c3e <USBH_ClrFeature>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c72:	e005      	b.n	8006c80 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c74:	bf00      	nop
 8006c76:	e004      	b.n	8006c82 <USBH_CDC_Process+0x122>
      break;
 8006c78:	bf00      	nop
 8006c7a:	e002      	b.n	8006c82 <USBH_CDC_Process+0x122>
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e000      	b.n	8006c82 <USBH_CDC_Process+0x122>
      break;
 8006c80:	bf00      	nop

  }

  return status;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	22a1      	movs	r2, #161	; 0xa1
 8006cb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2221      	movs	r2, #33	; 0x21
 8006cb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2207      	movs	r2, #7
 8006cc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2207      	movs	r2, #7
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fa83 	bl	80081dc <USBH_CtlReq>
 8006cd6:	4603      	mov	r3, r0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2221      	movs	r2, #33	; 0x21
 8006cee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2207      	movs	r2, #7
 8006d06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fa64 	bl	80081dc <USBH_CtlReq>
 8006d14:	4603      	mov	r3, r0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af02      	add	r7, sp, #8
 8006d24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d002      	beq.n	8006d44 <CDC_ProcessTransmission+0x26>
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d023      	beq.n	8006d8a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d42:	e05e      	b.n	8006e02 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	8b12      	ldrh	r2, [r2, #24]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d90b      	bls.n	8006d68 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	69d9      	ldr	r1, [r3, #28]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8b1a      	ldrh	r2, [r3, #24]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	7b5b      	ldrb	r3, [r3, #13]
 8006d5c:	2001      	movs	r0, #1
 8006d5e:	9000      	str	r0, [sp, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fc4a 	bl	80085fa <USBH_BulkSendData>
 8006d66:	e00b      	b.n	8006d80 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	7b5b      	ldrb	r3, [r3, #13]
 8006d76:	2001      	movs	r0, #1
 8006d78:	9000      	str	r0, [sp, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fc3d 	bl	80085fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d88:	e03b      	b.n	8006e02 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	7b5b      	ldrb	r3, [r3, #13]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 ff61 	bl	8008c58 <USBH_LL_GetURBState>
 8006d96:	4603      	mov	r3, r0
 8006d98:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d128      	bne.n	8006df2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	8b12      	ldrh	r2, [r2, #24]
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d90e      	bls.n	8006dca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	8b12      	ldrh	r2, [r2, #24]
 8006db4:	1a9a      	subs	r2, r3, r2
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	8b12      	ldrh	r2, [r2, #24]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	61da      	str	r2, [r3, #28]
 8006dc8:	e002      	b.n	8006dd0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006de0:	e00e      	b.n	8006e00 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f868 	bl	8006ec0 <USBH_CDC_TransmitCallback>
      break;
 8006df0:	e006      	b.n	8006e00 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d103      	bne.n	8006e00 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e00:	bf00      	nop
  }
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d002      	beq.n	8006e30 <CDC_ProcessReception+0x26>
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d00e      	beq.n	8006e4c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e2e:	e043      	b.n	8006eb8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	6a19      	ldr	r1, [r3, #32]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	8b5a      	ldrh	r2, [r3, #26]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	7b1b      	ldrb	r3, [r3, #12]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fc01 	bl	8008644 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2204      	movs	r2, #4
 8006e46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e4a:	e035      	b.n	8006eb8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	7b1b      	ldrb	r3, [r3, #12]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 ff00 	bl	8008c58 <USBH_LL_GetURBState>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e5c:	7cfb      	ldrb	r3, [r7, #19]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d129      	bne.n	8006eb6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	7b1b      	ldrb	r3, [r3, #12]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fe63 	bl	8008b34 <USBH_LL_GetLastXferSize>
 8006e6e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d016      	beq.n	8006ea8 <CDC_ProcessReception+0x9e>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	8b5b      	ldrh	r3, [r3, #26]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d910      	bls.n	8006ea8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	441a      	add	r2, r3
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ea6:	e006      	b.n	8006eb6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f80f 	bl	8006ed4 <USBH_CDC_ReceiveCallback>
      break;
 8006eb6:	bf00      	nop
  }
}
 8006eb8:	bf00      	nop
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f10:	2302      	movs	r3, #2
 8006f12:	e029      	b.n	8006f68 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	79fa      	ldrb	r2, [r7, #7]
 8006f18:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f81f 	bl	8006f70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f001 fd33 	bl	80089cc <USBH_LL_Init>

  return USBH_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e009      	b.n	8006f96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	33e0      	adds	r3, #224	; 0xe0
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b0f      	cmp	r3, #15
 8006f9a:	d9f2      	bls.n	8006f82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e009      	b.n	8006fb6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fac:	2200      	movs	r2, #0
 8006fae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fbc:	d3f1      	bcc.n	8006fa2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2240      	movs	r2, #64	; 0x40
 8006fe2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d016      	beq.n	800705a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10e      	bne.n	8007054 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800703c:	1c59      	adds	r1, r3, #1
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	33de      	adds	r3, #222	; 0xde
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
 8007052:	e004      	b.n	800705e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007054:	2302      	movs	r3, #2
 8007056:	73fb      	strb	r3, [r7, #15]
 8007058:	e001      	b.n	800705e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800705a:	2302      	movs	r3, #2
 800705c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007082:	78fa      	ldrb	r2, [r7, #3]
 8007084:	429a      	cmp	r2, r3
 8007086:	d204      	bcs.n	8007092 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007090:	e001      	b.n	8007096 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007092:	2302      	movs	r3, #2
 8007094:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	4608      	mov	r0, r1
 80070ae:	4611      	mov	r1, r2
 80070b0:	461a      	mov	r2, r3
 80070b2:	4603      	mov	r3, r0
 80070b4:	70fb      	strb	r3, [r7, #3]
 80070b6:	460b      	mov	r3, r1
 80070b8:	70bb      	strb	r3, [r7, #2]
 80070ba:	4613      	mov	r3, r2
 80070bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070ce:	e025      	b.n	800711c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	221a      	movs	r2, #26
 80070d4:	fb02 f303 	mul.w	r3, r2, r3
 80070d8:	3308      	adds	r3, #8
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	3302      	adds	r3, #2
 80070e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	795b      	ldrb	r3, [r3, #5]
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d002      	beq.n	80070f2 <USBH_FindInterface+0x4e>
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	2bff      	cmp	r3, #255	; 0xff
 80070f0:	d111      	bne.n	8007116 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070f6:	78ba      	ldrb	r2, [r7, #2]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d002      	beq.n	8007102 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070fc:	78bb      	ldrb	r3, [r7, #2]
 80070fe:	2bff      	cmp	r3, #255	; 0xff
 8007100:	d109      	bne.n	8007116 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007106:	787a      	ldrb	r2, [r7, #1]
 8007108:	429a      	cmp	r2, r3
 800710a:	d002      	beq.n	8007112 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800710c:	787b      	ldrb	r3, [r7, #1]
 800710e:	2bff      	cmp	r3, #255	; 0xff
 8007110:	d101      	bne.n	8007116 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	e006      	b.n	8007124 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	3301      	adds	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d9d6      	bls.n	80070d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007122:	23ff      	movs	r3, #255	; 0xff
}
 8007124:	4618      	mov	r0, r3
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fc83 	bl	8008a44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800713e:	2101      	movs	r1, #1
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 fd9c 	bl	8008c7e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af04      	add	r7, sp, #16
 8007156:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007158:	2302      	movs	r3, #2
 800715a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	d102      	bne.n	8007172 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2203      	movs	r2, #3
 8007170:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b0b      	cmp	r3, #11
 800717a:	f200 81be 	bhi.w	80074fa <USBH_Process+0x3aa>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <USBH_Process+0x34>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071b5 	.word	0x080071b5
 8007188:	080071e7 	.word	0x080071e7
 800718c:	0800724f 	.word	0x0800724f
 8007190:	08007495 	.word	0x08007495
 8007194:	080074fb 	.word	0x080074fb
 8007198:	080072f3 	.word	0x080072f3
 800719c:	0800743b 	.word	0x0800743b
 80071a0:	08007329 	.word	0x08007329
 80071a4:	08007349 	.word	0x08007349
 80071a8:	08007369 	.word	0x08007369
 80071ac:	080073ad 	.word	0x080073ad
 80071b0:	0800747d 	.word	0x0800747d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 819e 	beq.w	80074fe <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80071c8:	20c8      	movs	r0, #200	; 0xc8
 80071ca:	f001 fd9f 	bl	8008d0c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fc95 	bl	8008afe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071e4:	e18b      	b.n	80074fe <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d107      	bne.n	8007200 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071fe:	e18d      	b.n	800751c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800720a:	d914      	bls.n	8007236 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007212:	3301      	adds	r3, #1
 8007214:	b2da      	uxtb	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007222:	2b03      	cmp	r3, #3
 8007224:	d903      	bls.n	800722e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	220d      	movs	r2, #13
 800722a:	701a      	strb	r2, [r3, #0]
      break;
 800722c:	e176      	b.n	800751c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
      break;
 8007234:	e172      	b.n	800751c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800723c:	f103 020a 	add.w	r2, r3, #10
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007246:	200a      	movs	r0, #10
 8007248:	f001 fd60 	bl	8008d0c <USBH_Delay>
      break;
 800724c:	e166      	b.n	800751c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800725e:	2104      	movs	r1, #4
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007264:	2064      	movs	r0, #100	; 0x64
 8007266:	f001 fd51 	bl	8008d0c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fc20 	bl	8008ab0 <USBH_LL_GetSpeed>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2205      	movs	r2, #5
 800727e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fa2b 	bl	80086de <USBH_AllocPipe>
 8007288:	4603      	mov	r3, r0
 800728a:	461a      	mov	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fa23 	bl	80086de <USBH_AllocPipe>
 8007298:	4603      	mov	r3, r0
 800729a:	461a      	mov	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	7919      	ldrb	r1, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072b4:	b292      	uxth	r2, r2
 80072b6:	9202      	str	r2, [sp, #8]
 80072b8:	2200      	movs	r2, #0
 80072ba:	9201      	str	r2, [sp, #4]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	4603      	mov	r3, r0
 80072c0:	2280      	movs	r2, #128	; 0x80
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 f9dc 	bl	8008680 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	7959      	ldrb	r1, [r3, #5]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072dc:	b292      	uxth	r2, r2
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	2200      	movs	r2, #0
 80072e2:	9201      	str	r2, [sp, #4]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4603      	mov	r3, r0
 80072e8:	2200      	movs	r2, #0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f9c8 	bl	8008680 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072f0:	e114      	b.n	800751c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f918 	bl	8007528 <USBH_HandleEnum>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 80fe 	bne.w	8007502 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007314:	2b01      	cmp	r3, #1
 8007316:	d103      	bne.n	8007320 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2208      	movs	r2, #8
 800731c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800731e:	e0f0      	b.n	8007502 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2207      	movs	r2, #7
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e0ec      	b.n	8007502 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80e9 	beq.w	8007506 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800733a:	2101      	movs	r1, #1
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2208      	movs	r2, #8
 8007344:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007346:	e0de      	b.n	8007506 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800734e:	b29b      	uxth	r3, r3
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fc2c 	bl	8007bb0 <USBH_SetCfg>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	f040 80d5 	bne.w	800750a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2209      	movs	r2, #9
 8007364:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007366:	e0d0      	b.n	800750a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d016      	beq.n	80073a4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007376:	2101      	movs	r1, #1
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fc3c 	bl	8007bf6 <USBH_SetFeature>
 800737e:	4603      	mov	r3, r0
 8007380:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	220a      	movs	r2, #10
 800738e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007390:	e0bd      	b.n	800750e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	f040 80b9 	bne.w	800750e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	220a      	movs	r2, #10
 80073a0:	701a      	strb	r2, [r3, #0]
      break;
 80073a2:	e0b4      	b.n	800750e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	220a      	movs	r2, #10
 80073a8:	701a      	strb	r2, [r3, #0]
      break;
 80073aa:	e0b0      	b.n	800750e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80ad 	beq.w	8007512 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
 80073c4:	e016      	b.n	80073f4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80073c6:	7bfa      	ldrb	r2, [r7, #15]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	32de      	adds	r2, #222	; 0xde
 80073cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d0:	791a      	ldrb	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80073d8:	429a      	cmp	r2, r3
 80073da:	d108      	bne.n	80073ee <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80073dc:	7bfa      	ldrb	r2, [r7, #15]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32de      	adds	r2, #222	; 0xde
 80073e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80073ec:	e005      	b.n	80073fa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	3301      	adds	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0e5      	beq.n	80073c6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d016      	beq.n	8007432 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	4798      	blx	r3
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2206      	movs	r2, #6
 800741a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007422:	2103      	movs	r1, #3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007428:	e073      	b.n	8007512 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	220d      	movs	r2, #13
 800742e:	701a      	strb	r2, [r3, #0]
      break;
 8007430:	e06f      	b.n	8007512 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	220d      	movs	r2, #13
 8007436:	701a      	strb	r2, [r3, #0]
      break;
 8007438:	e06b      	b.n	8007512 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d017      	beq.n	8007474 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
 8007450:	4603      	mov	r3, r0
 8007452:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	220b      	movs	r2, #11
 8007460:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007462:	e058      	b.n	8007516 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d154      	bne.n	8007516 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	220d      	movs	r2, #13
 8007470:	701a      	strb	r2, [r3, #0]
      break;
 8007472:	e050      	b.n	8007516 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220d      	movs	r2, #13
 8007478:	701a      	strb	r2, [r3, #0]
      break;
 800747a:	e04c      	b.n	8007516 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d049      	beq.n	800751a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
      }
      break;
 8007492:	e042      	b.n	800751a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff fd67 	bl	8006f70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074d0:	2105      	movs	r1, #5
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d107      	bne.n	80074f2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff fe20 	bl	8007130 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074f0:	e014      	b.n	800751c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 faa6 	bl	8008a44 <USBH_LL_Start>
      break;
 80074f8:	e010      	b.n	800751c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80074fa:	bf00      	nop
 80074fc:	e00e      	b.n	800751c <USBH_Process+0x3cc>
      break;
 80074fe:	bf00      	nop
 8007500:	e00c      	b.n	800751c <USBH_Process+0x3cc>
      break;
 8007502:	bf00      	nop
 8007504:	e00a      	b.n	800751c <USBH_Process+0x3cc>
    break;
 8007506:	bf00      	nop
 8007508:	e008      	b.n	800751c <USBH_Process+0x3cc>
      break;
 800750a:	bf00      	nop
 800750c:	e006      	b.n	800751c <USBH_Process+0x3cc>
      break;
 800750e:	bf00      	nop
 8007510:	e004      	b.n	800751c <USBH_Process+0x3cc>
      break;
 8007512:	bf00      	nop
 8007514:	e002      	b.n	800751c <USBH_Process+0x3cc>
      break;
 8007516:	bf00      	nop
 8007518:	e000      	b.n	800751c <USBH_Process+0x3cc>
      break;
 800751a:	bf00      	nop
  }
  return USBH_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop

08007528 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af04      	add	r7, sp, #16
 800752e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007534:	2301      	movs	r3, #1
 8007536:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b07      	cmp	r3, #7
 800753e:	f200 81c1 	bhi.w	80078c4 <USBH_HandleEnum+0x39c>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <USBH_HandleEnum+0x20>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	08007569 	.word	0x08007569
 800754c:	08007627 	.word	0x08007627
 8007550:	08007691 	.word	0x08007691
 8007554:	0800771f 	.word	0x0800771f
 8007558:	08007789 	.word	0x08007789
 800755c:	080077f9 	.word	0x080077f9
 8007560:	0800783f 	.word	0x0800783f
 8007564:	08007885 	.word	0x08007885
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007568:	2108      	movs	r1, #8
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa50 	bl	8007a10 <USBH_Get_DevDesc>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d130      	bne.n	80075dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7919      	ldrb	r1, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800759e:	b292      	uxth	r2, r2
 80075a0:	9202      	str	r2, [sp, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	9201      	str	r2, [sp, #4]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4603      	mov	r3, r0
 80075aa:	2280      	movs	r2, #128	; 0x80
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f867 	bl	8008680 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	7959      	ldrb	r1, [r3, #5]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075c6:	b292      	uxth	r2, r2
 80075c8:	9202      	str	r2, [sp, #8]
 80075ca:	2200      	movs	r2, #0
 80075cc:	9201      	str	r2, [sp, #4]
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	4603      	mov	r3, r0
 80075d2:	2200      	movs	r2, #0
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 f853 	bl	8008680 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075da:	e175      	b.n	80078c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	2b03      	cmp	r3, #3
 80075e0:	f040 8172 	bne.w	80078c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ea:	3301      	adds	r3, #1
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d903      	bls.n	8007606 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	220d      	movs	r2, #13
 8007602:	701a      	strb	r2, [r3, #0]
      break;
 8007604:	e160      	b.n	80078c8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	795b      	ldrb	r3, [r3, #5]
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f887 	bl	8008720 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	791b      	ldrb	r3, [r3, #4]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f881 	bl	8008720 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
      break;
 8007624:	e150      	b.n	80078c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007626:	2112      	movs	r1, #18
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f9f1 	bl	8007a10 <USBH_Get_DevDesc>
 800762e:	4603      	mov	r3, r0
 8007630:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800763e:	e145      	b.n	80078cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b03      	cmp	r3, #3
 8007644:	f040 8142 	bne.w	80078cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800764e:	3301      	adds	r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800765e:	2b03      	cmp	r3, #3
 8007660:	d903      	bls.n	800766a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	220d      	movs	r2, #13
 8007666:	701a      	strb	r2, [r3, #0]
      break;
 8007668:	e130      	b.n	80078cc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	795b      	ldrb	r3, [r3, #5]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 f855 	bl	8008720 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 f84f 	bl	8008720 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
      break;
 800768e:	e11d      	b.n	80078cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007690:	2101      	movs	r1, #1
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa68 	bl	8007b68 <USBH_SetAddress>
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d132      	bne.n	8007708 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076a2:	2002      	movs	r0, #2
 80076a4:	f001 fb32 	bl	8008d0c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2203      	movs	r2, #3
 80076b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	7919      	ldrb	r1, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076ca:	b292      	uxth	r2, r2
 80076cc:	9202      	str	r2, [sp, #8]
 80076ce:	2200      	movs	r2, #0
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	4603      	mov	r3, r0
 80076d6:	2280      	movs	r2, #128	; 0x80
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 ffd1 	bl	8008680 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7959      	ldrb	r1, [r3, #5]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076f2:	b292      	uxth	r2, r2
 80076f4:	9202      	str	r2, [sp, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	9201      	str	r2, [sp, #4]
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4603      	mov	r3, r0
 80076fe:	2200      	movs	r2, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 ffbd 	bl	8008680 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007706:	e0e3      	b.n	80078d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b03      	cmp	r3, #3
 800770c:	f040 80e0 	bne.w	80078d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	220d      	movs	r2, #13
 8007714:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	705a      	strb	r2, [r3, #1]
      break;
 800771c:	e0d8      	b.n	80078d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800771e:	2109      	movs	r1, #9
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f99d 	bl	8007a60 <USBH_Get_CfgDesc>
 8007726:	4603      	mov	r3, r0
 8007728:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d103      	bne.n	8007738 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2204      	movs	r2, #4
 8007734:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007736:	e0cd      	b.n	80078d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	2b03      	cmp	r3, #3
 800773c:	f040 80ca 	bne.w	80078d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007746:	3301      	adds	r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007756:	2b03      	cmp	r3, #3
 8007758:	d903      	bls.n	8007762 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220d      	movs	r2, #13
 800775e:	701a      	strb	r2, [r3, #0]
      break;
 8007760:	e0b8      	b.n	80078d4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	795b      	ldrb	r3, [r3, #5]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 ffd9 	bl	8008720 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	791b      	ldrb	r3, [r3, #4]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 ffd3 	bl	8008720 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
      break;
 8007786:	e0a5      	b.n	80078d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f965 	bl	8007a60 <USBH_Get_CfgDesc>
 8007796:	4603      	mov	r3, r0
 8007798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d103      	bne.n	80077a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2205      	movs	r2, #5
 80077a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077a6:	e097      	b.n	80078d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	f040 8094 	bne.w	80078d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077b6:	3301      	adds	r3, #1
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d903      	bls.n	80077d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	220d      	movs	r2, #13
 80077ce:	701a      	strb	r2, [r3, #0]
      break;
 80077d0:	e082      	b.n	80078d8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	795b      	ldrb	r3, [r3, #5]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 ffa1 	bl	8008720 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	791b      	ldrb	r3, [r3, #4]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 ff9b 	bl	8008720 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
      break;
 80077f6:	e06f      	b.n	80078d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d019      	beq.n	8007836 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800780e:	23ff      	movs	r3, #255	; 0xff
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f949 	bl	8007aa8 <USBH_Get_StringDesc>
 8007816:	4603      	mov	r3, r0
 8007818:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2206      	movs	r2, #6
 8007824:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007826:	e059      	b.n	80078dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b03      	cmp	r3, #3
 800782c:	d156      	bne.n	80078dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2206      	movs	r2, #6
 8007832:	705a      	strb	r2, [r3, #1]
      break;
 8007834:	e052      	b.n	80078dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2206      	movs	r2, #6
 800783a:	705a      	strb	r2, [r3, #1]
      break;
 800783c:	e04e      	b.n	80078dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007844:	2b00      	cmp	r3, #0
 8007846:	d019      	beq.n	800787c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007854:	23ff      	movs	r3, #255	; 0xff
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f926 	bl	8007aa8 <USBH_Get_StringDesc>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d103      	bne.n	800786e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2207      	movs	r2, #7
 800786a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800786c:	e038      	b.n	80078e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d135      	bne.n	80078e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2207      	movs	r2, #7
 8007878:	705a      	strb	r2, [r3, #1]
      break;
 800787a:	e031      	b.n	80078e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2207      	movs	r2, #7
 8007880:	705a      	strb	r2, [r3, #1]
      break;
 8007882:	e02d      	b.n	80078e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800788a:	2b00      	cmp	r3, #0
 800788c:	d017      	beq.n	80078be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800789a:	23ff      	movs	r3, #255	; 0xff
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f903 	bl	8007aa8 <USBH_Get_StringDesc>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078b0:	e018      	b.n	80078e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d115      	bne.n	80078e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
      break;
 80078bc:	e012      	b.n	80078e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
      break;
 80078c2:	e00f      	b.n	80078e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80078c4:	bf00      	nop
 80078c6:	e00e      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078c8:	bf00      	nop
 80078ca:	e00c      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078cc:	bf00      	nop
 80078ce:	e00a      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078d0:	bf00      	nop
 80078d2:	e008      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078d4:	bf00      	nop
 80078d6:	e006      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078d8:	bf00      	nop
 80078da:	e004      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <USBH_HandleEnum+0x3be>
      break;
 80078e4:	bf00      	nop
  }
  return Status;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f804 	bl	8007932 <USBH_HandleSof>
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b0b      	cmp	r3, #11
 8007942:	d10a      	bne.n	800795a <USBH_HandleSof+0x28>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
  }
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007972:	bf00      	nop
}
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800798e:	bf00      	nop
}
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f846 	bl	8008a7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fe93 	bl	8008720 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	795b      	ldrb	r3, [r3, #5]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fe8d 	bl	8008720 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f864 	bl	8007afe <USBH_GetDescriptor>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	b292      	uxth	r2, r2
 8007a50:	4619      	mov	r1, r3
 8007a52:	f000 f919 	bl	8007c88 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	331c      	adds	r3, #28
 8007a70:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a72:	887b      	ldrh	r3, [r7, #2]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f83d 	bl	8007afe <USBH_GetDescriptor>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d107      	bne.n	8007a9e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a8e:	887b      	ldrh	r3, [r7, #2]
 8007a90:	461a      	mov	r2, r3
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f989 	bl	8007dac <USBH_ParseCfgDesc>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	72fb      	strb	r3, [r7, #11]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007abc:	7afb      	ldrb	r3, [r7, #11]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007ac4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007acc:	893b      	ldrh	r3, [r7, #8]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f812 	bl	8007afe <USBH_GetDescriptor>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d107      	bne.n	8007af4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007aea:	893a      	ldrh	r2, [r7, #8]
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fb26 	bl	8008140 <USBH_ParseStringDesc>
  }

  return status;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	607b      	str	r3, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	72fb      	strb	r3, [r7, #11]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	789b      	ldrb	r3, [r3, #2]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d11c      	bne.n	8007b52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2206      	movs	r2, #6
 8007b28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	893a      	ldrh	r2, [r7, #8]
 8007b2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b3a:	d104      	bne.n	8007b46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f240 4209 	movw	r2, #1033	; 0x409
 8007b42:	829a      	strh	r2, [r3, #20]
 8007b44:	e002      	b.n	8007b4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8b3a      	ldrh	r2, [r7, #24]
 8007b50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b52:	8b3b      	ldrh	r3, [r7, #24]
 8007b54:	461a      	mov	r2, r3
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fb3f 	bl	80081dc <USBH_CtlReq>
 8007b5e:	4603      	mov	r3, r0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	789b      	ldrb	r3, [r3, #2]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d10f      	bne.n	8007b9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2205      	movs	r2, #5
 8007b86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fb1b 	bl	80081dc <USBH_CtlReq>
 8007ba6:	4603      	mov	r3, r0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	789b      	ldrb	r3, [r3, #2]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d10e      	bne.n	8007be2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2209      	movs	r2, #9
 8007bce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	887a      	ldrh	r2, [r7, #2]
 8007bd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007be2:	2200      	movs	r2, #0
 8007be4:	2100      	movs	r1, #0
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 faf8 	bl	80081dc <USBH_CtlReq>
 8007bec:	4603      	mov	r3, r0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	789b      	ldrb	r3, [r3, #2]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10f      	bne.n	8007c2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2203      	movs	r2, #3
 8007c14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fad4 	bl	80081dc <USBH_CtlReq>
 8007c34:	4603      	mov	r3, r0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d10f      	bne.n	8007c72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c72:	2200      	movs	r2, #0
 8007c74:	2100      	movs	r1, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fab0 	bl	80081dc <USBH_CtlReq>
 8007c7c:	4603      	mov	r3, r0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	781a      	ldrb	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	785a      	ldrb	r2, [r3, #1]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	3302      	adds	r3, #2
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	3303      	adds	r3, #3
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	791a      	ldrb	r2, [r3, #4]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	795a      	ldrb	r2, [r3, #5]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	799a      	ldrb	r2, [r3, #6]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	79da      	ldrb	r2, [r3, #7]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	79db      	ldrb	r3, [r3, #7]
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	dc0f      	bgt.n	8007d0a <USBH_ParseDevDesc+0x82>
 8007cea:	2b08      	cmp	r3, #8
 8007cec:	db14      	blt.n	8007d18 <USBH_ParseDevDesc+0x90>
 8007cee:	3b08      	subs	r3, #8
 8007cf0:	4a2d      	ldr	r2, [pc, #180]	; (8007da8 <USBH_ParseDevDesc+0x120>)
 8007cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bf14      	ite	ne
 8007cfe:	2301      	movne	r3, #1
 8007d00:	2300      	moveq	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <USBH_ParseDevDesc+0x86>
 8007d08:	e006      	b.n	8007d18 <USBH_ParseDevDesc+0x90>
 8007d0a:	2b40      	cmp	r3, #64	; 0x40
 8007d0c:	d104      	bne.n	8007d18 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	79da      	ldrb	r2, [r3, #7]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	71da      	strb	r2, [r3, #7]
      break;
 8007d16:	e003      	b.n	8007d20 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2240      	movs	r2, #64	; 0x40
 8007d1c:	71da      	strb	r2, [r3, #7]
      break;
 8007d1e:	bf00      	nop
  }

  if (length > 8U)
 8007d20:	88fb      	ldrh	r3, [r7, #6]
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d939      	bls.n	8007d9a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3309      	adds	r3, #9
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	330a      	adds	r3, #10
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	330b      	adds	r3, #11
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	4313      	orrs	r3, r2
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	330c      	adds	r3, #12
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	330d      	adds	r3, #13
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	4313      	orrs	r3, r2
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	7b9a      	ldrb	r2, [r3, #14]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	7bda      	ldrb	r2, [r3, #15]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	7c1a      	ldrb	r2, [r3, #16]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	7c5a      	ldrb	r2, [r3, #17]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	745a      	strb	r2, [r3, #17]
  }
}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	01000101 	.word	0x01000101

08007dac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08c      	sub	sp, #48	; 0x30
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007dc0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	785a      	ldrb	r2, [r3, #1]
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	3302      	adds	r3, #2
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	3303      	adds	r3, #3
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e08:	bf28      	it	cs
 8007e0a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	791a      	ldrb	r2, [r3, #4]
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	795a      	ldrb	r2, [r3, #5]
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	799a      	ldrb	r2, [r3, #6]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	79da      	ldrb	r2, [r3, #7]
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	7a1a      	ldrb	r2, [r3, #8]
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b09      	cmp	r3, #9
 8007e42:	d002      	beq.n	8007e4a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	2209      	movs	r2, #9
 8007e48:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	f240 809d 	bls.w	8007f8c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e52:	2309      	movs	r3, #9
 8007e54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e5a:	e081      	b.n	8007f60 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e5c:	f107 0316 	add.w	r3, r7, #22
 8007e60:	4619      	mov	r1, r3
 8007e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e64:	f000 f99f 	bl	80081a6 <USBH_GetNextDesc>
 8007e68:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d176      	bne.n	8007f60 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b09      	cmp	r3, #9
 8007e78:	d002      	beq.n	8007e80 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e84:	221a      	movs	r2, #26
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	6a3a      	ldr	r2, [r7, #32]
 8007e8e:	4413      	add	r3, r2
 8007e90:	3302      	adds	r3, #2
 8007e92:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e96:	69f8      	ldr	r0, [r7, #28]
 8007e98:	f000 f87e 	bl	8007f98 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ea6:	e043      	b.n	8007f30 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ea8:	f107 0316 	add.w	r3, r7, #22
 8007eac:	4619      	mov	r1, r3
 8007eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb0:	f000 f979 	bl	80081a6 <USBH_GetNextDesc>
 8007eb4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b05      	cmp	r3, #5
 8007ebc:	d138      	bne.n	8007f30 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	795b      	ldrb	r3, [r3, #5]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d10f      	bne.n	8007ee6 <USBH_ParseCfgDesc+0x13a>
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	799b      	ldrb	r3, [r3, #6]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d10b      	bne.n	8007ee6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	79db      	ldrb	r3, [r3, #7]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10f      	bne.n	8007ef6 <USBH_ParseCfgDesc+0x14a>
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b09      	cmp	r3, #9
 8007edc:	d00b      	beq.n	8007ef6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	2209      	movs	r2, #9
 8007ee2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ee4:	e007      	b.n	8007ef6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b07      	cmp	r3, #7
 8007eec:	d004      	beq.n	8007ef8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e000      	b.n	8007ef8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ef6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007efc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f00:	3201      	adds	r2, #1
 8007f02:	00d2      	lsls	r2, r2, #3
 8007f04:	211a      	movs	r1, #26
 8007f06:	fb01 f303 	mul.w	r3, r1, r3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	6a3a      	ldr	r2, [r7, #32]
 8007f10:	4413      	add	r3, r2
 8007f12:	3304      	adds	r3, #4
 8007f14:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f18:	69b9      	ldr	r1, [r7, #24]
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f86b 	bl	8007ff6 <USBH_ParseEPDesc>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	791b      	ldrb	r3, [r3, #4]
 8007f34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d204      	bcs.n	8007f46 <USBH_ParseCfgDesc+0x19a>
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	885a      	ldrh	r2, [r3, #2]
 8007f40:	8afb      	ldrh	r3, [r7, #22]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d8b0      	bhi.n	8007ea8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	791b      	ldrb	r3, [r3, #4]
 8007f4a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d201      	bcs.n	8007f56 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e01c      	b.n	8007f90 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d805      	bhi.n	8007f74 <USBH_ParseCfgDesc+0x1c8>
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	885a      	ldrh	r2, [r3, #2]
 8007f6c:	8afb      	ldrh	r3, [r7, #22]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	f63f af74 	bhi.w	8007e5c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	791b      	ldrb	r3, [r3, #4]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	bf28      	it	cs
 8007f7c:	2302      	movcs	r3, #2
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d201      	bcs.n	8007f8c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e001      	b.n	8007f90 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3730      	adds	r7, #48	; 0x30
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	785a      	ldrb	r2, [r3, #1]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	789a      	ldrb	r2, [r3, #2]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	78da      	ldrb	r2, [r3, #3]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	791a      	ldrb	r2, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	795a      	ldrb	r2, [r3, #5]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	799a      	ldrb	r2, [r3, #6]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	79da      	ldrb	r2, [r3, #7]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	7a1a      	ldrb	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	721a      	strb	r2, [r3, #8]
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	785a      	ldrb	r2, [r3, #1]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	789a      	ldrb	r2, [r3, #2]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	78da      	ldrb	r2, [r3, #3]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3304      	adds	r3, #4
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3305      	adds	r3, #5
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	b29b      	uxth	r3, r3
 800803a:	4313      	orrs	r3, r2
 800803c:	b29a      	uxth	r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	799a      	ldrb	r2, [r3, #6]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	889b      	ldrh	r3, [r3, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008052:	2303      	movs	r3, #3
 8008054:	75fb      	strb	r3, [r7, #23]
 8008056:	e033      	b.n	80080c0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	889b      	ldrh	r3, [r3, #4]
 800805c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008060:	f023 0307 	bic.w	r3, r3, #7
 8008064:	b29a      	uxth	r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	889b      	ldrh	r3, [r3, #4]
 800806e:	b21a      	sxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b299      	uxth	r1, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3305      	adds	r3, #5
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b29b      	uxth	r3, r3
 8008084:	430b      	orrs	r3, r1
 8008086:	b29b      	uxth	r3, r3
 8008088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800808c:	2b00      	cmp	r3, #0
 800808e:	d110      	bne.n	80080b2 <USBH_ParseEPDesc+0xbc>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3304      	adds	r3, #4
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	b299      	uxth	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3305      	adds	r3, #5
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	430b      	orrs	r3, r1
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	b21b      	sxth	r3, r3
 80080aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ae:	b21b      	sxth	r3, r3
 80080b0:	e001      	b.n	80080b6 <USBH_ParseEPDesc+0xc0>
 80080b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080b6:	4313      	orrs	r3, r2
 80080b8:	b21b      	sxth	r3, r3
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d116      	bne.n	80080f8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	78db      	ldrb	r3, [r3, #3]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d005      	beq.n	80080e2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	78db      	ldrb	r3, [r3, #3]
 80080da:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d127      	bne.n	8008132 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	799b      	ldrb	r3, [r3, #6]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <USBH_ParseEPDesc+0xfc>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	799b      	ldrb	r3, [r3, #6]
 80080ee:	2b10      	cmp	r3, #16
 80080f0:	d91f      	bls.n	8008132 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080f2:	2303      	movs	r3, #3
 80080f4:	75fb      	strb	r3, [r7, #23]
 80080f6:	e01c      	b.n	8008132 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	78db      	ldrb	r3, [r3, #3]
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d10a      	bne.n	800811a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	799b      	ldrb	r3, [r3, #6]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <USBH_ParseEPDesc+0x11e>
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	799b      	ldrb	r3, [r3, #6]
 8008110:	2b10      	cmp	r3, #16
 8008112:	d90e      	bls.n	8008132 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008114:	2303      	movs	r3, #3
 8008116:	75fb      	strb	r3, [r7, #23]
 8008118:	e00b      	b.n	8008132 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	78db      	ldrb	r3, [r3, #3]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b03      	cmp	r3, #3
 8008124:	d105      	bne.n	8008132 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	799b      	ldrb	r3, [r3, #6]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800812e:	2303      	movs	r3, #3
 8008130:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b03      	cmp	r3, #3
 8008156:	d120      	bne.n	800819a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	1e9a      	subs	r2, r3, #2
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	4293      	cmp	r3, r2
 8008162:	bf28      	it	cs
 8008164:	4613      	movcs	r3, r2
 8008166:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3302      	adds	r3, #2
 800816c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800816e:	2300      	movs	r3, #0
 8008170:	82fb      	strh	r3, [r7, #22]
 8008172:	e00b      	b.n	800818c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008174:	8afb      	ldrh	r3, [r7, #22]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	3301      	adds	r3, #1
 8008184:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008186:	8afb      	ldrh	r3, [r7, #22]
 8008188:	3302      	adds	r3, #2
 800818a:	82fb      	strh	r3, [r7, #22]
 800818c:	8afa      	ldrh	r2, [r7, #22]
 800818e:	8abb      	ldrh	r3, [r7, #20]
 8008190:	429a      	cmp	r2, r3
 8008192:	d3ef      	bcc.n	8008174 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
  }
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b085      	sub	sp, #20
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	881a      	ldrh	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	b29a      	uxth	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4413      	add	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081ce:	68fb      	ldr	r3, [r7, #12]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081ea:	2301      	movs	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	789b      	ldrb	r3, [r3, #2]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d002      	beq.n	80081fc <USBH_CtlReq+0x20>
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d00f      	beq.n	800821a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081fa:	e027      	b.n	800824c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2202      	movs	r2, #2
 8008212:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008214:	2301      	movs	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
      break;
 8008218:	e018      	b.n	800824c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 f81c 	bl	8008258 <USBH_HandleControl>
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <USBH_CtlReq+0x54>
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	2b03      	cmp	r3, #3
 800822e:	d106      	bne.n	800823e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	761a      	strb	r2, [r3, #24]
      break;
 800823c:	e005      	b.n	800824a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d102      	bne.n	800824a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	709a      	strb	r2, [r3, #2]
      break;
 800824a:	bf00      	nop
  }
  return status;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af02      	add	r7, sp, #8
 800825e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008264:	2300      	movs	r3, #0
 8008266:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	7e1b      	ldrb	r3, [r3, #24]
 800826c:	3b01      	subs	r3, #1
 800826e:	2b0a      	cmp	r3, #10
 8008270:	f200 8156 	bhi.w	8008520 <USBH_HandleControl+0x2c8>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <USBH_HandleControl+0x24>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082a9 	.word	0x080082a9
 8008280:	080082c3 	.word	0x080082c3
 8008284:	0800832d 	.word	0x0800832d
 8008288:	08008353 	.word	0x08008353
 800828c:	0800838b 	.word	0x0800838b
 8008290:	080083b5 	.word	0x080083b5
 8008294:	08008407 	.word	0x08008407
 8008298:	08008429 	.word	0x08008429
 800829c:	08008465 	.word	0x08008465
 80082a0:	0800848b 	.word	0x0800848b
 80082a4:	080084c9 	.word	0x080084c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f103 0110 	add.w	r1, r3, #16
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	795b      	ldrb	r3, [r3, #5]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f943 	bl	8008540 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2202      	movs	r2, #2
 80082be:	761a      	strb	r2, [r3, #24]
      break;
 80082c0:	e139      	b.n	8008536 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	795b      	ldrb	r3, [r3, #5]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fcc5 	bl	8008c58 <USBH_LL_GetURBState>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d11e      	bne.n	8008316 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7c1b      	ldrb	r3, [r3, #16]
 80082dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	8adb      	ldrh	r3, [r3, #22]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082ea:	7b7b      	ldrb	r3, [r7, #13]
 80082ec:	2b80      	cmp	r3, #128	; 0x80
 80082ee:	d103      	bne.n	80082f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2203      	movs	r2, #3
 80082f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082f6:	e115      	b.n	8008524 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2205      	movs	r2, #5
 80082fc:	761a      	strb	r2, [r3, #24]
      break;
 80082fe:	e111      	b.n	8008524 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008300:	7b7b      	ldrb	r3, [r7, #13]
 8008302:	2b80      	cmp	r3, #128	; 0x80
 8008304:	d103      	bne.n	800830e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2209      	movs	r2, #9
 800830a:	761a      	strb	r2, [r3, #24]
      break;
 800830c:	e10a      	b.n	8008524 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2207      	movs	r2, #7
 8008312:	761a      	strb	r2, [r3, #24]
      break;
 8008314:	e106      	b.n	8008524 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b04      	cmp	r3, #4
 800831a:	d003      	beq.n	8008324 <USBH_HandleControl+0xcc>
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b02      	cmp	r3, #2
 8008320:	f040 8100 	bne.w	8008524 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	220b      	movs	r2, #11
 8008328:	761a      	strb	r2, [r3, #24]
      break;
 800832a:	e0fb      	b.n	8008524 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008332:	b29a      	uxth	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6899      	ldr	r1, [r3, #8]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	899a      	ldrh	r2, [r3, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	791b      	ldrb	r3, [r3, #4]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f93a 	bl	80085be <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2204      	movs	r2, #4
 800834e:	761a      	strb	r2, [r3, #24]
      break;
 8008350:	e0f1      	b.n	8008536 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	791b      	ldrb	r3, [r3, #4]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fc7d 	bl	8008c58 <USBH_LL_GetURBState>
 800835e:	4603      	mov	r3, r0
 8008360:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d102      	bne.n	800836e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2209      	movs	r2, #9
 800836c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d102      	bne.n	800837a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008374:	2303      	movs	r3, #3
 8008376:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008378:	e0d6      	b.n	8008528 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b04      	cmp	r3, #4
 800837e:	f040 80d3 	bne.w	8008528 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	220b      	movs	r2, #11
 8008386:	761a      	strb	r2, [r3, #24]
      break;
 8008388:	e0ce      	b.n	8008528 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6899      	ldr	r1, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	899a      	ldrh	r2, [r3, #12]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	795b      	ldrb	r3, [r3, #5]
 8008396:	2001      	movs	r0, #1
 8008398:	9000      	str	r0, [sp, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f8ea 	bl	8008574 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2206      	movs	r2, #6
 80083b0:	761a      	strb	r2, [r3, #24]
      break;
 80083b2:	e0c0      	b.n	8008536 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	795b      	ldrb	r3, [r3, #5]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fc4c 	bl	8008c58 <USBH_LL_GetURBState>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d103      	bne.n	80083d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2207      	movs	r2, #7
 80083ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083d0:	e0ac      	b.n	800852c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	2b05      	cmp	r3, #5
 80083d6:	d105      	bne.n	80083e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	220c      	movs	r2, #12
 80083dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80083de:	2303      	movs	r3, #3
 80083e0:	73fb      	strb	r3, [r7, #15]
      break;
 80083e2:	e0a3      	b.n	800852c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d103      	bne.n	80083f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2205      	movs	r2, #5
 80083ee:	761a      	strb	r2, [r3, #24]
      break;
 80083f0:	e09c      	b.n	800852c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	f040 8099 	bne.w	800852c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	220b      	movs	r2, #11
 80083fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008400:	2302      	movs	r3, #2
 8008402:	73fb      	strb	r3, [r7, #15]
      break;
 8008404:	e092      	b.n	800852c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	791b      	ldrb	r3, [r3, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8d5 	bl	80085be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800841a:	b29a      	uxth	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2208      	movs	r2, #8
 8008424:	761a      	strb	r2, [r3, #24]

      break;
 8008426:	e086      	b.n	8008536 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	791b      	ldrb	r3, [r3, #4]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fc12 	bl	8008c58 <USBH_LL_GetURBState>
 8008434:	4603      	mov	r3, r0
 8008436:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d105      	bne.n	800844a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	220d      	movs	r2, #13
 8008442:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008448:	e072      	b.n	8008530 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d103      	bne.n	8008458 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	220b      	movs	r2, #11
 8008454:	761a      	strb	r2, [r3, #24]
      break;
 8008456:	e06b      	b.n	8008530 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b05      	cmp	r3, #5
 800845c:	d168      	bne.n	8008530 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800845e:	2303      	movs	r3, #3
 8008460:	73fb      	strb	r3, [r7, #15]
      break;
 8008462:	e065      	b.n	8008530 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	795b      	ldrb	r3, [r3, #5]
 8008468:	2201      	movs	r2, #1
 800846a:	9200      	str	r2, [sp, #0]
 800846c:	2200      	movs	r2, #0
 800846e:	2100      	movs	r1, #0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f87f 	bl	8008574 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800847c:	b29a      	uxth	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	220a      	movs	r2, #10
 8008486:	761a      	strb	r2, [r3, #24]
      break;
 8008488:	e055      	b.n	8008536 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	795b      	ldrb	r3, [r3, #5]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fbe1 	bl	8008c58 <USBH_LL_GetURBState>
 8008496:	4603      	mov	r3, r0
 8008498:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d105      	bne.n	80084ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	220d      	movs	r2, #13
 80084a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084aa:	e043      	b.n	8008534 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d103      	bne.n	80084ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2209      	movs	r2, #9
 80084b6:	761a      	strb	r2, [r3, #24]
      break;
 80084b8:	e03c      	b.n	8008534 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d139      	bne.n	8008534 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	220b      	movs	r2, #11
 80084c4:	761a      	strb	r2, [r3, #24]
      break;
 80084c6:	e035      	b.n	8008534 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7e5b      	ldrb	r3, [r3, #25]
 80084cc:	3301      	adds	r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	765a      	strb	r2, [r3, #25]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7e5b      	ldrb	r3, [r3, #25]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d806      	bhi.n	80084ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084e8:	e025      	b.n	8008536 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084f0:	2106      	movs	r1, #6
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	795b      	ldrb	r3, [r3, #5]
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f90c 	bl	8008720 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	791b      	ldrb	r3, [r3, #4]
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f906 	bl	8008720 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	73fb      	strb	r3, [r7, #15]
      break;
 800851e:	e00a      	b.n	8008536 <USBH_HandleControl+0x2de>

    default:
      break;
 8008520:	bf00      	nop
 8008522:	e008      	b.n	8008536 <USBH_HandleControl+0x2de>
      break;
 8008524:	bf00      	nop
 8008526:	e006      	b.n	8008536 <USBH_HandleControl+0x2de>
      break;
 8008528:	bf00      	nop
 800852a:	e004      	b.n	8008536 <USBH_HandleControl+0x2de>
      break;
 800852c:	bf00      	nop
 800852e:	e002      	b.n	8008536 <USBH_HandleControl+0x2de>
      break;
 8008530:	bf00      	nop
 8008532:	e000      	b.n	8008536 <USBH_HandleControl+0x2de>
      break;
 8008534:	bf00      	nop
  }

  return status;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af04      	add	r7, sp, #16
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800854e:	79f9      	ldrb	r1, [r7, #7]
 8008550:	2300      	movs	r3, #0
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	2308      	movs	r3, #8
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	2300      	movs	r3, #0
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	2300      	movs	r3, #0
 8008562:	2200      	movs	r2, #0
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fb46 	bl	8008bf6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af04      	add	r7, sp, #16
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4611      	mov	r1, r2
 8008580:	461a      	mov	r2, r3
 8008582:	460b      	mov	r3, r1
 8008584:	80fb      	strh	r3, [r7, #6]
 8008586:	4613      	mov	r3, r2
 8008588:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008598:	7979      	ldrb	r1, [r7, #5]
 800859a:	7e3b      	ldrb	r3, [r7, #24]
 800859c:	9303      	str	r3, [sp, #12]
 800859e:	88fb      	ldrh	r3, [r7, #6]
 80085a0:	9302      	str	r3, [sp, #8]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	2301      	movs	r3, #1
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	2200      	movs	r2, #0
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fb21 	bl	8008bf6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b088      	sub	sp, #32
 80085c2:	af04      	add	r7, sp, #16
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	4611      	mov	r1, r2
 80085ca:	461a      	mov	r2, r3
 80085cc:	460b      	mov	r3, r1
 80085ce:	80fb      	strh	r3, [r7, #6]
 80085d0:	4613      	mov	r3, r2
 80085d2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085d4:	7979      	ldrb	r1, [r7, #5]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9303      	str	r3, [sp, #12]
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	9302      	str	r3, [sp, #8]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	2301      	movs	r3, #1
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	2201      	movs	r2, #1
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fb03 	bl	8008bf6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085f0:	2300      	movs	r3, #0

}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af04      	add	r7, sp, #16
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	4611      	mov	r1, r2
 8008606:	461a      	mov	r2, r3
 8008608:	460b      	mov	r3, r1
 800860a:	80fb      	strh	r3, [r7, #6]
 800860c:	4613      	mov	r3, r2
 800860e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800861e:	7979      	ldrb	r1, [r7, #5]
 8008620:	7e3b      	ldrb	r3, [r7, #24]
 8008622:	9303      	str	r3, [sp, #12]
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	9302      	str	r3, [sp, #8]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	2301      	movs	r3, #1
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	2302      	movs	r3, #2
 8008632:	2200      	movs	r2, #0
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 fade 	bl	8008bf6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af04      	add	r7, sp, #16
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	460b      	mov	r3, r1
 8008654:	80fb      	strh	r3, [r7, #6]
 8008656:	4613      	mov	r3, r2
 8008658:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800865a:	7979      	ldrb	r1, [r7, #5]
 800865c:	2300      	movs	r3, #0
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	9302      	str	r3, [sp, #8]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	2301      	movs	r3, #1
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	2302      	movs	r3, #2
 800866e:	2201      	movs	r2, #1
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 fac0 	bl	8008bf6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af04      	add	r7, sp, #16
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	4608      	mov	r0, r1
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	4603      	mov	r3, r0
 8008690:	70fb      	strb	r3, [r7, #3]
 8008692:	460b      	mov	r3, r1
 8008694:	70bb      	strb	r3, [r7, #2]
 8008696:	4613      	mov	r3, r2
 8008698:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800869a:	7878      	ldrb	r0, [r7, #1]
 800869c:	78ba      	ldrb	r2, [r7, #2]
 800869e:	78f9      	ldrb	r1, [r7, #3]
 80086a0:	8b3b      	ldrh	r3, [r7, #24]
 80086a2:	9302      	str	r3, [sp, #8]
 80086a4:	7d3b      	ldrb	r3, [r7, #20]
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	7c3b      	ldrb	r3, [r7, #16]
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	4603      	mov	r3, r0
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa53 	bl	8008b5a <USBH_LL_OpenPipe>

  return USBH_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa72 	bl	8008bb8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	460b      	mov	r3, r1
 80086e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f836 	bl	800875c <USBH_GetFreePipe>
 80086f0:	4603      	mov	r3, r0
 80086f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00a      	beq.n	8008714 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	89fb      	ldrh	r3, [r7, #14]
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	33e0      	adds	r3, #224	; 0xe0
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008714:	89fb      	ldrh	r3, [r7, #14]
 8008716:	b2db      	uxtb	r3, r3
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	2b0f      	cmp	r3, #15
 8008730:	d80d      	bhi.n	800874e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	33e0      	adds	r3, #224	; 0xe0
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	33e0      	adds	r3, #224	; 0xe0
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
 800876c:	e00f      	b.n	800878e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	33e0      	adds	r3, #224	; 0xe0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	b29b      	uxth	r3, r3
 8008786:	e007      	b.n	8008798 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	3301      	adds	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b0f      	cmp	r3, #15
 8008792:	d9ec      	bls.n	800876e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008794:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087a8:	2201      	movs	r2, #1
 80087aa:	490e      	ldr	r1, [pc, #56]	; (80087e4 <MX_USB_HOST_Init+0x40>)
 80087ac:	480e      	ldr	r0, [pc, #56]	; (80087e8 <MX_USB_HOST_Init+0x44>)
 80087ae:	f7fe fba5 	bl	8006efc <USBH_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80087b8:	f7f8 fa04 	bl	8000bc4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80087bc:	490b      	ldr	r1, [pc, #44]	; (80087ec <MX_USB_HOST_Init+0x48>)
 80087be:	480a      	ldr	r0, [pc, #40]	; (80087e8 <MX_USB_HOST_Init+0x44>)
 80087c0:	f7fe fc2a 	bl	8007018 <USBH_RegisterClass>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80087ca:	f7f8 f9fb 	bl	8000bc4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80087ce:	4806      	ldr	r0, [pc, #24]	; (80087e8 <MX_USB_HOST_Init+0x44>)
 80087d0:	f7fe fcae 	bl	8007130 <USBH_Start>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80087da:	f7f8 f9f3 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80087de:	bf00      	nop
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	08008805 	.word	0x08008805
 80087e8:	20000300 	.word	0x20000300
 80087ec:	2000000c 	.word	0x2000000c

080087f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087f4:	4802      	ldr	r0, [pc, #8]	; (8008800 <MX_USB_HOST_Process+0x10>)
 80087f6:	f7fe fcab 	bl	8007150 <USBH_Process>
}
 80087fa:	bf00      	nop
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000300 	.word	0x20000300

08008804 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	3b01      	subs	r3, #1
 8008814:	2b04      	cmp	r3, #4
 8008816:	d819      	bhi.n	800884c <USBH_UserProcess+0x48>
 8008818:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <USBH_UserProcess+0x1c>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	0800884d 	.word	0x0800884d
 8008824:	0800883d 	.word	0x0800883d
 8008828:	0800884d 	.word	0x0800884d
 800882c:	08008845 	.word	0x08008845
 8008830:	08008835 	.word	0x08008835
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008834:	4b09      	ldr	r3, [pc, #36]	; (800885c <USBH_UserProcess+0x58>)
 8008836:	2203      	movs	r2, #3
 8008838:	701a      	strb	r2, [r3, #0]
  break;
 800883a:	e008      	b.n	800884e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <USBH_UserProcess+0x58>)
 800883e:	2202      	movs	r2, #2
 8008840:	701a      	strb	r2, [r3, #0]
  break;
 8008842:	e004      	b.n	800884e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <USBH_UserProcess+0x58>)
 8008846:	2201      	movs	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
  break;
 800884a:	e000      	b.n	800884e <USBH_UserProcess+0x4a>

  default:
  break;
 800884c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	200006d8 	.word	0x200006d8

08008860 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	609a      	str	r2, [r3, #8]
 8008874:	60da      	str	r2, [r3, #12]
 8008876:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008880:	d147      	bne.n	8008912 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008882:	2300      	movs	r3, #0
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	4b25      	ldr	r3, [pc, #148]	; (800891c <HAL_HCD_MspInit+0xbc>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	4a24      	ldr	r2, [pc, #144]	; (800891c <HAL_HCD_MspInit+0xbc>)
 800888c:	f043 0301 	orr.w	r3, r3, #1
 8008890:	6313      	str	r3, [r2, #48]	; 0x30
 8008892:	4b22      	ldr	r3, [pc, #136]	; (800891c <HAL_HCD_MspInit+0xbc>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800889e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088ac:	f107 0314 	add.w	r3, r7, #20
 80088b0:	4619      	mov	r1, r3
 80088b2:	481b      	ldr	r0, [pc, #108]	; (8008920 <HAL_HCD_MspInit+0xc0>)
 80088b4:	f7f9 f8fc 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088be:	2302      	movs	r3, #2
 80088c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088c6:	2303      	movs	r3, #3
 80088c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088ca:	230a      	movs	r3, #10
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ce:	f107 0314 	add.w	r3, r7, #20
 80088d2:	4619      	mov	r1, r3
 80088d4:	4812      	ldr	r0, [pc, #72]	; (8008920 <HAL_HCD_MspInit+0xc0>)
 80088d6:	f7f9 f8eb 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <HAL_HCD_MspInit+0xbc>)
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	4a0f      	ldr	r2, [pc, #60]	; (800891c <HAL_HCD_MspInit+0xbc>)
 80088e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e4:	6353      	str	r3, [r2, #52]	; 0x34
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <HAL_HCD_MspInit+0xbc>)
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	4a0b      	ldr	r2, [pc, #44]	; (800891c <HAL_HCD_MspInit+0xbc>)
 80088f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088f4:	6453      	str	r3, [r2, #68]	; 0x44
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <HAL_HCD_MspInit+0xbc>)
 80088f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	2043      	movs	r0, #67	; 0x43
 8008908:	f7f8 fd2b 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800890c:	2043      	movs	r0, #67	; 0x43
 800890e:	f7f8 fd44 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008912:	bf00      	nop
 8008914:	3728      	adds	r7, #40	; 0x28
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40023800 	.word	0x40023800
 8008920:	40020000 	.word	0x40020000

08008924 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe ffeb 	bl	800790e <USBH_LL_IncTimer>
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff f823 	bl	800799a <USBH_LL_Connect>
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff f82c 	bl	80079c8 <USBH_LL_Disconnect>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
 8008984:	4613      	mov	r3, r2
 8008986:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe ffdd 	bl	8007962 <USBH_LL_PortEnabled>
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe ffdd 	bl	800797e <USBH_LL_PortDisabled>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d12a      	bne.n	8008a34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089de:	4a18      	ldr	r2, [pc, #96]	; (8008a40 <USBH_LL_Init+0x74>)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <USBH_LL_Init+0x74>)
 80089ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089ee:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <USBH_LL_Init+0x74>)
 80089f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089f6:	4b12      	ldr	r3, [pc, #72]	; (8008a40 <USBH_LL_Init+0x74>)
 80089f8:	2208      	movs	r2, #8
 80089fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089fc:	4b10      	ldr	r3, [pc, #64]	; (8008a40 <USBH_LL_Init+0x74>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a02:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <USBH_LL_Init+0x74>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a08:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <USBH_LL_Init+0x74>)
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a0e:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <USBH_LL_Init+0x74>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a14:	480a      	ldr	r0, [pc, #40]	; (8008a40 <USBH_LL_Init+0x74>)
 8008a16:	f7f9 fa02 	bl	8001e1e <HAL_HCD_Init>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a20:	f7f8 f8d0 	bl	8000bc4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a24:	4806      	ldr	r0, [pc, #24]	; (8008a40 <USBH_LL_Init+0x74>)
 8008a26:	f7f9 fde6 	bl	80025f6 <HAL_HCD_GetCurrentFrame>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7fe ff5e 	bl	80078f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	200006dc 	.word	0x200006dc

08008a44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f9 fd55 	bl	800250a <HAL_HCD_Start>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f95c 	bl	8008d24 <USBH_Get_USB_Status>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7f9 fd5d 	bl	8002550 <HAL_HCD_Stop>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f941 	bl	8008d24 <USBH_Get_USB_Status>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f9 fda5 	bl	8002612 <HAL_HCD_GetCurrentSpeed>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d00c      	beq.n	8008ae8 <USBH_LL_GetSpeed+0x38>
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d80d      	bhi.n	8008aee <USBH_LL_GetSpeed+0x3e>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <USBH_LL_GetSpeed+0x2c>
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d003      	beq.n	8008ae2 <USBH_LL_GetSpeed+0x32>
 8008ada:	e008      	b.n	8008aee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	e008      	b.n	8008af4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae6:	e005      	b.n	8008af4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	73fb      	strb	r3, [r7, #15]
    break;
 8008aec:	e002      	b.n	8008af4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008aee:	2301      	movs	r3, #1
 8008af0:	73fb      	strb	r3, [r7, #15]
    break;
 8008af2:	bf00      	nop
  }
  return  speed;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7f9 fd38 	bl	800258a <HAL_HCD_ResetPort>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f8ff 	bl	8008d24 <USBH_Get_USB_Status>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f9 fd3f 	bl	80025ce <HAL_HCD_HC_GetXferCount>
 8008b50:	4603      	mov	r3, r0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b5a:	b590      	push	{r4, r7, lr}
 8008b5c:	b089      	sub	sp, #36	; 0x24
 8008b5e:	af04      	add	r7, sp, #16
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	461a      	mov	r2, r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	70fb      	strb	r3, [r7, #3]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70bb      	strb	r3, [r7, #2]
 8008b70:	4613      	mov	r3, r2
 8008b72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b82:	787c      	ldrb	r4, [r7, #1]
 8008b84:	78ba      	ldrb	r2, [r7, #2]
 8008b86:	78f9      	ldrb	r1, [r7, #3]
 8008b88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	4623      	mov	r3, r4
 8008b9a:	f7f9 f9a2 	bl	8001ee2 <HAL_HCD_HC_Init>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f8bd 	bl	8008d24 <USBH_Get_USB_Status>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd90      	pop	{r4, r7, pc}

08008bb8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7f9 fa12 	bl	8002000 <HAL_HCD_HC_Halt>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f89e 	bl	8008d24 <USBH_Get_USB_Status>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bf6:	b590      	push	{r4, r7, lr}
 8008bf8:	b089      	sub	sp, #36	; 0x24
 8008bfa:	af04      	add	r7, sp, #16
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	461a      	mov	r2, r3
 8008c04:	4603      	mov	r3, r0
 8008c06:	70fb      	strb	r3, [r7, #3]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70bb      	strb	r3, [r7, #2]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c1e:	787c      	ldrb	r4, [r7, #1]
 8008c20:	78ba      	ldrb	r2, [r7, #2]
 8008c22:	78f9      	ldrb	r1, [r7, #3]
 8008c24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c28:	9303      	str	r3, [sp, #12]
 8008c2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c2c:	9302      	str	r3, [sp, #8]
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	4623      	mov	r3, r4
 8008c3a:	f7f9 fa05 	bl	8002048 <HAL_HCD_HC_SubmitRequest>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 f86d 	bl	8008d24 <USBH_Get_USB_Status>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd90      	pop	{r4, r7, pc}

08008c58 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7f9 fc99 	bl	80025a6 <HAL_HCD_HC_GetURBState>
 8008c74:	4603      	mov	r3, r0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d103      	bne.n	8008c9c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 f870 	bl	8008d7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c9c:	20c8      	movs	r0, #200	; 0xc8
 8008c9e:	f7f8 fa61 	bl	8001164 <HAL_Delay>
  return USBH_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cc2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	212c      	movs	r1, #44	; 0x2c
 8008cca:	fb01 f303 	mul.w	r3, r1, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	333b      	adds	r3, #59	; 0x3b
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	212c      	movs	r1, #44	; 0x2c
 8008cde:	fb01 f303 	mul.w	r3, r1, r3
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3354      	adds	r3, #84	; 0x54
 8008ce6:	78ba      	ldrb	r2, [r7, #2]
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	e008      	b.n	8008cfe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	212c      	movs	r1, #44	; 0x2c
 8008cf2:	fb01 f303 	mul.w	r3, r1, r3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3355      	adds	r3, #85	; 0x55
 8008cfa:	78ba      	ldrb	r2, [r7, #2]
 8008cfc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7f8 fa25 	bl	8001164 <HAL_Delay>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d817      	bhi.n	8008d68 <USBH_Get_USB_Status+0x44>
 8008d38:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <USBH_Get_USB_Status+0x1c>)
 8008d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3e:	bf00      	nop
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d57 	.word	0x08008d57
 8008d48:	08008d5d 	.word	0x08008d5d
 8008d4c:	08008d63 	.word	0x08008d63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
    break;
 8008d54:	e00b      	b.n	8008d6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d56:	2302      	movs	r3, #2
 8008d58:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5a:	e008      	b.n	8008d6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	e005      	b.n	8008d6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d62:	2302      	movs	r3, #2
 8008d64:	73fb      	strb	r3, [r7, #15]
    break;
 8008d66:	e002      	b.n	8008d6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	bf00      	nop
  }
  return usb_status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
 8008d94:	e001      	b.n	8008d9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d96:	2301      	movs	r3, #1
 8008d98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2101      	movs	r1, #1
 8008da0:	4803      	ldr	r0, [pc, #12]	; (8008db0 <MX_DriverVbusFS+0x34>)
 8008da2:	f7f9 f809 	bl	8001db8 <HAL_GPIO_WritePin>
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	40020800 	.word	0x40020800

08008db4 <initializeApplication>:
		{.function = stateLED3, .stateTransitionCondition = FALSE},
		{.function = stateLED4, .stateTransitionCondition = FALSE}
};

uint8_t initializeApplication(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
	timerAppInit();						//systick initialze
 8008db8:	f000 f892 	bl	8008ee0 <timerAppInit>
	startTimer(STATE_TIMER_TAG, 1000);	//timer initialize 1 s
 8008dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f000 f893 	bl	8008eec <startTimer>

	currentState = stateLed1;			// initialze the state machine
 8008dc6:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <initializeApplication+0x30>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	701a      	strb	r2, [r3, #0]
	txMessage.datas.initial = 0xAA;		// initialize completed flag
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <initializeApplication+0x34>)
 8008dce:	22aa      	movs	r2, #170	; 0xaa
 8008dd0:	701a      	strb	r2, [r3, #0]

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 8008dd2:	2205      	movs	r2, #5
 8008dd4:	4904      	ldr	r1, [pc, #16]	; (8008de8 <initializeApplication+0x34>)
 8008dd6:	4805      	ldr	r0, [pc, #20]	; (8008dec <initializeApplication+0x38>)
 8008dd8:	f000 f93a 	bl	8009050 <uartSendDMA>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	b2db      	uxtb	r3, r3
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	200009e0 	.word	0x200009e0
 8008de8:	200009e4 	.word	0x200009e4
 8008dec:	200001f8 	.word	0x200001f8

08008df0 <stateLED1>:

uint8_t stateLED1(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
	currentState = stateLed2;
 8008df4:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <stateLED1+0x2c>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led1 = 0xBB;		// initialize completed flag
 8008dfa:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <stateLED1+0x30>)
 8008dfc:	22bb      	movs	r2, #187	; 0xbb
 8008dfe:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8008e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e04:	4807      	ldr	r0, [pc, #28]	; (8008e24 <stateLED1+0x34>)
 8008e06:	f7f8 fff0 	bl	8001dea <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 8008e0a:	2205      	movs	r2, #5
 8008e0c:	4904      	ldr	r1, [pc, #16]	; (8008e20 <stateLED1+0x30>)
 8008e0e:	4806      	ldr	r0, [pc, #24]	; (8008e28 <stateLED1+0x38>)
 8008e10:	f000 f91e 	bl	8009050 <uartSendDMA>
 8008e14:	4603      	mov	r3, r0
 8008e16:	b2db      	uxtb	r3, r3
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	200009e0 	.word	0x200009e0
 8008e20:	200009e4 	.word	0x200009e4
 8008e24:	40020c00 	.word	0x40020c00
 8008e28:	200001f8 	.word	0x200001f8

08008e2c <stateLED2>:

uint8_t stateLED2(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
	currentState = stateLed3;
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <stateLED2+0x2c>)
 8008e32:	2202      	movs	r2, #2
 8008e34:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led2 = 0xCC;		// initialize completed flag
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <stateLED2+0x30>)
 8008e38:	22cc      	movs	r2, #204	; 0xcc
 8008e3a:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8008e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e40:	4807      	ldr	r0, [pc, #28]	; (8008e60 <stateLED2+0x34>)
 8008e42:	f7f8 ffd2 	bl	8001dea <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 8008e46:	2205      	movs	r2, #5
 8008e48:	4904      	ldr	r1, [pc, #16]	; (8008e5c <stateLED2+0x30>)
 8008e4a:	4806      	ldr	r0, [pc, #24]	; (8008e64 <stateLED2+0x38>)
 8008e4c:	f000 f900 	bl	8009050 <uartSendDMA>
 8008e50:	4603      	mov	r3, r0
 8008e52:	b2db      	uxtb	r3, r3
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	200009e0 	.word	0x200009e0
 8008e5c:	200009e4 	.word	0x200009e4
 8008e60:	40020c00 	.word	0x40020c00
 8008e64:	200001f8 	.word	0x200001f8

08008e68 <stateLED3>:

uint8_t stateLED3(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
	currentState = stateLed4;
 8008e6c:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <stateLED3+0x2c>)
 8008e6e:	2203      	movs	r2, #3
 8008e70:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led3 = 0xDD;		// initialize completed flag
 8008e72:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <stateLED3+0x30>)
 8008e74:	22dd      	movs	r2, #221	; 0xdd
 8008e76:	70da      	strb	r2, [r3, #3]
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8008e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008e7c:	4807      	ldr	r0, [pc, #28]	; (8008e9c <stateLED3+0x34>)
 8008e7e:	f7f8 ffb4 	bl	8001dea <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 8008e82:	2205      	movs	r2, #5
 8008e84:	4904      	ldr	r1, [pc, #16]	; (8008e98 <stateLED3+0x30>)
 8008e86:	4806      	ldr	r0, [pc, #24]	; (8008ea0 <stateLED3+0x38>)
 8008e88:	f000 f8e2 	bl	8009050 <uartSendDMA>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	b2db      	uxtb	r3, r3
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	200009e0 	.word	0x200009e0
 8008e98:	200009e4 	.word	0x200009e4
 8008e9c:	40020c00 	.word	0x40020c00
 8008ea0:	200001f8 	.word	0x200001f8

08008ea4 <stateLED4>:

uint8_t stateLED4(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
	currentState = stateLed4;
 8008ea8:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <stateLED4+0x2c>)
 8008eaa:	2203      	movs	r2, #3
 8008eac:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led4 = 0xFF;		// initialize completed flag
 8008eae:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <stateLED4+0x30>)
 8008eb0:	22ff      	movs	r2, #255	; 0xff
 8008eb2:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8008eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eb8:	4807      	ldr	r0, [pc, #28]	; (8008ed8 <stateLED4+0x34>)
 8008eba:	f7f8 ff96 	bl	8001dea <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 8008ebe:	2205      	movs	r2, #5
 8008ec0:	4904      	ldr	r1, [pc, #16]	; (8008ed4 <stateLED4+0x30>)
 8008ec2:	4806      	ldr	r0, [pc, #24]	; (8008edc <stateLED4+0x38>)
 8008ec4:	f000 f8c4 	bl	8009050 <uartSendDMA>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	b2db      	uxtb	r3, r3
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	200009e0 	.word	0x200009e0
 8008ed4:	200009e4 	.word	0x200009e4
 8008ed8:	40020c00 	.word	0x40020c00
 8008edc:	200001f8 	.word	0x200001f8

08008ee0 <timerAppInit>:
 *
 * Return: NONE
 *
 */
void timerAppInit(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
	systickinit();
 8008ee4:	f000 f8a6 	bl	8009034 <systickinit>
}
 8008ee8:	bf00      	nop
 8008eea:	bd80      	pop	{r7, pc}

08008eec <startTimer>:
 * NOTE: startTimer() fonksiyonu her çağırıldığında ilgili index'in Initial değerini günceller.
 * 		Fonksiyon döngü içerisinde sürekli kullanılırsa Initial değer sürekli güncelleneceği için
 * 		üstLimite hiçbir zaman ulaşılamayacaktır.
 */
void startTimer(uint8_t index, uint32_t upperLimit)
{
 8008eec:	b590      	push	{r4, r7, lr}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6039      	str	r1, [r7, #0]
 8008ef6:	71fb      	strb	r3, [r7, #7]
	timerControlArr[index].InitialValue = getSystickCount();
 8008ef8:	79fc      	ldrb	r4, [r7, #7]
 8008efa:	f000 f8a2 	bl	8009042 <getSystickCount>
 8008efe:	4602      	mov	r2, r0
 8008f00:	4914      	ldr	r1, [pc, #80]	; (8008f54 <startTimer+0x68>)
 8008f02:	4623      	mov	r3, r4
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4423      	add	r3, r4
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	440b      	add	r3, r1
 8008f0c:	601a      	str	r2, [r3, #0]
	timerControlArr[index].controlFlag = true;
 8008f0e:	79fa      	ldrb	r2, [r7, #7]
 8008f10:	4910      	ldr	r1, [pc, #64]	; (8008f54 <startTimer+0x68>)
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3309      	adds	r3, #9
 8008f1e:	2201      	movs	r2, #1
 8008f20:	701a      	strb	r2, [r3, #0]
	timerControlArr[index].resultFlag = false;
 8008f22:	79fa      	ldrb	r2, [r7, #7]
 8008f24:	490b      	ldr	r1, [pc, #44]	; (8008f54 <startTimer+0x68>)
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	440b      	add	r3, r1
 8008f30:	3308      	adds	r3, #8
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
	timerControlArr[index].counterUpperLimit = upperLimit;
 8008f36:	79fa      	ldrb	r2, [r7, #7]
 8008f38:	4906      	ldr	r1, [pc, #24]	; (8008f54 <startTimer+0x68>)
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	440b      	add	r3, r1
 8008f44:	3304      	adds	r3, #4
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	601a      	str	r2, [r3, #0]
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd90      	pop	{r4, r7, pc}
 8008f52:	bf00      	nop
 8008f54:	200009ec 	.word	0x200009ec

08008f58 <controlTimer>:
 * 		kontrolünü sonlandırır ve result flag'ını HIGH ayarlar.
 *
 * Return: NONE
 */
void controlTimer(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
	uint32_t elapsedTime = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	603b      	str	r3, [r7, #0]

	for(int i = 0; i<NOFTIMER; i++)
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	e03a      	b.n	8008fde <controlTimer+0x86>
	{
		if(timerControlArr[i].controlFlag == true)		//kontrol flag'a bakılır
 8008f68:	4921      	ldr	r1, [pc, #132]	; (8008ff0 <controlTimer+0x98>)
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	440b      	add	r3, r1
 8008f76:	3309      	adds	r3, #9
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d02c      	beq.n	8008fd8 <controlTimer+0x80>
		{
			elapsedTime = (getSystickCount() - timerControlArr[i].InitialValue);
 8008f7e:	f000 f860 	bl	8009042 <getSystickCount>
 8008f82:	4601      	mov	r1, r0
 8008f84:	481a      	ldr	r0, [pc, #104]	; (8008ff0 <controlTimer+0x98>)
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4403      	add	r3, r0
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	1acb      	subs	r3, r1, r3
 8008f96:	603b      	str	r3, [r7, #0]
			if(timerControlArr[i].counterUpperLimit <= elapsedTime)		//istenen süre dolmuşsa
 8008f98:	4915      	ldr	r1, [pc, #84]	; (8008ff0 <controlTimer+0x98>)
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	440b      	add	r3, r1
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d313      	bcc.n	8008fd8 <controlTimer+0x80>
			{
				timerControlArr[i].resultFlag = true;		//Süre dolma flag'ı set edilir.
 8008fb0:	490f      	ldr	r1, [pc, #60]	; (8008ff0 <controlTimer+0x98>)
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	440b      	add	r3, r1
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	701a      	strb	r2, [r3, #0]
				timerControlArr[i].controlFlag = false;		//Tekrar kontrol edilmemesi için kontrol flag'ı false çekilir
 8008fc4:	490a      	ldr	r1, [pc, #40]	; (8008ff0 <controlTimer+0x98>)
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	440b      	add	r3, r1
 8008fd2:	3309      	adds	r3, #9
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<NOFTIMER; i++)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	607b      	str	r3, [r7, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b0f      	cmp	r3, #15
 8008fe2:	ddc1      	ble.n	8008f68 <controlTimer+0x10>
			}
		}
	}
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200009ec 	.word	0x200009ec

08008ff4 <getTimerResultStatus>:
 * Return: sayacın dolma durumunu 'bool' tipinde döndürür
 * 		TRUE 	=> Timer Dolmuştur
 * 		FALSE	=> Timer Dolmamıştır
 */
bool getTimerResultStatus(uint8_t index)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]

	if(timerControlArr[index].resultFlag == true)
 8009002:	79fa      	ldrb	r2, [r7, #7]
 8009004:	490a      	ldr	r1, [pc, #40]	; (8009030 <getTimerResultStatus+0x3c>)
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	440b      	add	r3, r1
 8009010:	3308      	adds	r3, #8
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <getTimerResultStatus+0x2a>
	{
		res = true;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e001      	b.n	8009022 <getTimerResultStatus+0x2e>
	}
	else
	{
		res = false;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	200009ec 	.word	0x200009ec

08009034 <systickinit>:
  * @note  Initiliazing step done automatically while setting up HAL_INIT and SystemClockConfig phase
  *
  * @retval None
  */
void systickinit(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 8009038:	2000      	movs	r0, #0
 800903a:	f7f8 f843 	bl	80010c4 <HAL_InitTick>
}
 800903e:	bf00      	nop
 8009040:	bd80      	pop	{r7, pc}

08009042 <getSystickCount>:
  * @brief Provides a tick value in millisecond.
  *
  * @retval tick value
  */
uint32_t getSystickCount(void)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8009046:	f7f8 f881 	bl	800114c <HAL_GetTick>
 800904a:	4603      	mov	r3, r0
}
 800904c:	4618      	mov	r0, r3
 800904e:	bd80      	pop	{r7, pc}

08009050 <uartSendDMA>:
 *
 * NOTE: huart->Instance->SR kontrolü her STM32 ürünü için geçerli değildir.
 * 		 farklı bir işlemciye geçilmesi durumunda sadece HAL_UART_Transmit_DMA() fonksiyonu kullanılmalıdır.
 */
int32_t uartSendDMA(void *handle, const uint8_t *bufferPtr, uint8_t size)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
	int32_t ret = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	617b      	str	r3, [r7, #20]

	UART_HandleTypeDef *huart = (void *)handle;	//Cast void pointer to UART_HandleTypeDef type. Void pointer used for generic driver purposes
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	613b      	str	r3, [r7, #16]

	//Check whether transmission complete or not
	if(__HAL_UART_GET_FLAG(huart,UART_FLAG_TC))
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009070:	2b40      	cmp	r3, #64	; 0x40
 8009072:	d117      	bne.n	80090a4 <uartSendDMA+0x54>
	{
		//if transmission completed, clear transmission complete flag (TC)
		__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_TC);
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800907c:	601a      	str	r2, [r3, #0]
		//To send new data configure the transmission state	--Mandatory!
		huart->gState = HAL_UART_STATE_READY;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2220      	movs	r2, #32
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		if(HAL_OK == HAL_UART_Transmit_DMA(handle, bufferPtr, size))	//Transmit new data
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	b29b      	uxth	r3, r3
 800908a:	461a      	mov	r2, r3
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7fb ff72 	bl	8004f78 <HAL_UART_Transmit_DMA>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <uartSendDMA+0x50>
		{
			ret = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e001      	b.n	80090a4 <uartSendDMA+0x54>
		}
		else
		{
			ret = 1;
 80090a0:	2301      	movs	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
	//		{
	//			ret = 1;
	//		}
	//	}

	return ret;
 80090a4:	697b      	ldr	r3, [r7, #20]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <malloc>:
 80090b0:	4b02      	ldr	r3, [pc, #8]	; (80090bc <malloc+0xc>)
 80090b2:	4601      	mov	r1, r0
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	f000 b82b 	b.w	8009110 <_malloc_r>
 80090ba:	bf00      	nop
 80090bc:	20000098 	.word	0x20000098

080090c0 <free>:
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <free+0xc>)
 80090c2:	4601      	mov	r1, r0
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	f000 b8f3 	b.w	80092b0 <_free_r>
 80090ca:	bf00      	nop
 80090cc:	20000098 	.word	0x20000098

080090d0 <sbrk_aligned>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	4e0e      	ldr	r6, [pc, #56]	; (800910c <sbrk_aligned+0x3c>)
 80090d4:	460c      	mov	r4, r1
 80090d6:	6831      	ldr	r1, [r6, #0]
 80090d8:	4605      	mov	r5, r0
 80090da:	b911      	cbnz	r1, 80090e2 <sbrk_aligned+0x12>
 80090dc:	f000 f8ac 	bl	8009238 <_sbrk_r>
 80090e0:	6030      	str	r0, [r6, #0]
 80090e2:	4621      	mov	r1, r4
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 f8a7 	bl	8009238 <_sbrk_r>
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	d00a      	beq.n	8009104 <sbrk_aligned+0x34>
 80090ee:	1cc4      	adds	r4, r0, #3
 80090f0:	f024 0403 	bic.w	r4, r4, #3
 80090f4:	42a0      	cmp	r0, r4
 80090f6:	d007      	beq.n	8009108 <sbrk_aligned+0x38>
 80090f8:	1a21      	subs	r1, r4, r0
 80090fa:	4628      	mov	r0, r5
 80090fc:	f000 f89c 	bl	8009238 <_sbrk_r>
 8009100:	3001      	adds	r0, #1
 8009102:	d101      	bne.n	8009108 <sbrk_aligned+0x38>
 8009104:	f04f 34ff 	mov.w	r4, #4294967295
 8009108:	4620      	mov	r0, r4
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	20000a90 	.word	0x20000a90

08009110 <_malloc_r>:
 8009110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009114:	1ccd      	adds	r5, r1, #3
 8009116:	f025 0503 	bic.w	r5, r5, #3
 800911a:	3508      	adds	r5, #8
 800911c:	2d0c      	cmp	r5, #12
 800911e:	bf38      	it	cc
 8009120:	250c      	movcc	r5, #12
 8009122:	2d00      	cmp	r5, #0
 8009124:	4607      	mov	r7, r0
 8009126:	db01      	blt.n	800912c <_malloc_r+0x1c>
 8009128:	42a9      	cmp	r1, r5
 800912a:	d905      	bls.n	8009138 <_malloc_r+0x28>
 800912c:	230c      	movs	r3, #12
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	2600      	movs	r6, #0
 8009132:	4630      	mov	r0, r6
 8009134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800920c <_malloc_r+0xfc>
 800913c:	f000 f868 	bl	8009210 <__malloc_lock>
 8009140:	f8d8 3000 	ldr.w	r3, [r8]
 8009144:	461c      	mov	r4, r3
 8009146:	bb5c      	cbnz	r4, 80091a0 <_malloc_r+0x90>
 8009148:	4629      	mov	r1, r5
 800914a:	4638      	mov	r0, r7
 800914c:	f7ff ffc0 	bl	80090d0 <sbrk_aligned>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	4604      	mov	r4, r0
 8009154:	d155      	bne.n	8009202 <_malloc_r+0xf2>
 8009156:	f8d8 4000 	ldr.w	r4, [r8]
 800915a:	4626      	mov	r6, r4
 800915c:	2e00      	cmp	r6, #0
 800915e:	d145      	bne.n	80091ec <_malloc_r+0xdc>
 8009160:	2c00      	cmp	r4, #0
 8009162:	d048      	beq.n	80091f6 <_malloc_r+0xe6>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	4631      	mov	r1, r6
 8009168:	4638      	mov	r0, r7
 800916a:	eb04 0903 	add.w	r9, r4, r3
 800916e:	f000 f863 	bl	8009238 <_sbrk_r>
 8009172:	4581      	cmp	r9, r0
 8009174:	d13f      	bne.n	80091f6 <_malloc_r+0xe6>
 8009176:	6821      	ldr	r1, [r4, #0]
 8009178:	1a6d      	subs	r5, r5, r1
 800917a:	4629      	mov	r1, r5
 800917c:	4638      	mov	r0, r7
 800917e:	f7ff ffa7 	bl	80090d0 <sbrk_aligned>
 8009182:	3001      	adds	r0, #1
 8009184:	d037      	beq.n	80091f6 <_malloc_r+0xe6>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	442b      	add	r3, r5
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	f8d8 3000 	ldr.w	r3, [r8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d038      	beq.n	8009206 <_malloc_r+0xf6>
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	42a2      	cmp	r2, r4
 8009198:	d12b      	bne.n	80091f2 <_malloc_r+0xe2>
 800919a:	2200      	movs	r2, #0
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	e00f      	b.n	80091c0 <_malloc_r+0xb0>
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	1b52      	subs	r2, r2, r5
 80091a4:	d41f      	bmi.n	80091e6 <_malloc_r+0xd6>
 80091a6:	2a0b      	cmp	r2, #11
 80091a8:	d917      	bls.n	80091da <_malloc_r+0xca>
 80091aa:	1961      	adds	r1, r4, r5
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	6025      	str	r5, [r4, #0]
 80091b0:	bf18      	it	ne
 80091b2:	6059      	strne	r1, [r3, #4]
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	bf08      	it	eq
 80091b8:	f8c8 1000 	streq.w	r1, [r8]
 80091bc:	5162      	str	r2, [r4, r5]
 80091be:	604b      	str	r3, [r1, #4]
 80091c0:	4638      	mov	r0, r7
 80091c2:	f104 060b 	add.w	r6, r4, #11
 80091c6:	f000 f829 	bl	800921c <__malloc_unlock>
 80091ca:	f026 0607 	bic.w	r6, r6, #7
 80091ce:	1d23      	adds	r3, r4, #4
 80091d0:	1af2      	subs	r2, r6, r3
 80091d2:	d0ae      	beq.n	8009132 <_malloc_r+0x22>
 80091d4:	1b9b      	subs	r3, r3, r6
 80091d6:	50a3      	str	r3, [r4, r2]
 80091d8:	e7ab      	b.n	8009132 <_malloc_r+0x22>
 80091da:	42a3      	cmp	r3, r4
 80091dc:	6862      	ldr	r2, [r4, #4]
 80091de:	d1dd      	bne.n	800919c <_malloc_r+0x8c>
 80091e0:	f8c8 2000 	str.w	r2, [r8]
 80091e4:	e7ec      	b.n	80091c0 <_malloc_r+0xb0>
 80091e6:	4623      	mov	r3, r4
 80091e8:	6864      	ldr	r4, [r4, #4]
 80091ea:	e7ac      	b.n	8009146 <_malloc_r+0x36>
 80091ec:	4634      	mov	r4, r6
 80091ee:	6876      	ldr	r6, [r6, #4]
 80091f0:	e7b4      	b.n	800915c <_malloc_r+0x4c>
 80091f2:	4613      	mov	r3, r2
 80091f4:	e7cc      	b.n	8009190 <_malloc_r+0x80>
 80091f6:	230c      	movs	r3, #12
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	4638      	mov	r0, r7
 80091fc:	f000 f80e 	bl	800921c <__malloc_unlock>
 8009200:	e797      	b.n	8009132 <_malloc_r+0x22>
 8009202:	6025      	str	r5, [r4, #0]
 8009204:	e7dc      	b.n	80091c0 <_malloc_r+0xb0>
 8009206:	605b      	str	r3, [r3, #4]
 8009208:	deff      	udf	#255	; 0xff
 800920a:	bf00      	nop
 800920c:	20000a8c 	.word	0x20000a8c

08009210 <__malloc_lock>:
 8009210:	4801      	ldr	r0, [pc, #4]	; (8009218 <__malloc_lock+0x8>)
 8009212:	f000 b84b 	b.w	80092ac <__retarget_lock_acquire_recursive>
 8009216:	bf00      	nop
 8009218:	20000bd0 	.word	0x20000bd0

0800921c <__malloc_unlock>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__malloc_unlock+0x8>)
 800921e:	f000 b846 	b.w	80092ae <__retarget_lock_release_recursive>
 8009222:	bf00      	nop
 8009224:	20000bd0 	.word	0x20000bd0

08009228 <memset>:
 8009228:	4402      	add	r2, r0
 800922a:	4603      	mov	r3, r0
 800922c:	4293      	cmp	r3, r2
 800922e:	d100      	bne.n	8009232 <memset+0xa>
 8009230:	4770      	bx	lr
 8009232:	f803 1b01 	strb.w	r1, [r3], #1
 8009236:	e7f9      	b.n	800922c <memset+0x4>

08009238 <_sbrk_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d06      	ldr	r5, [pc, #24]	; (8009254 <_sbrk_r+0x1c>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	f7f7 fdb2 	bl	8000dac <_sbrk>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_sbrk_r+0x1a>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_sbrk_r+0x1a>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20000bcc 	.word	0x20000bcc

08009258 <__errno>:
 8009258:	4b01      	ldr	r3, [pc, #4]	; (8009260 <__errno+0x8>)
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20000098 	.word	0x20000098

08009264 <__libc_init_array>:
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	4d0d      	ldr	r5, [pc, #52]	; (800929c <__libc_init_array+0x38>)
 8009268:	4c0d      	ldr	r4, [pc, #52]	; (80092a0 <__libc_init_array+0x3c>)
 800926a:	1b64      	subs	r4, r4, r5
 800926c:	10a4      	asrs	r4, r4, #2
 800926e:	2600      	movs	r6, #0
 8009270:	42a6      	cmp	r6, r4
 8009272:	d109      	bne.n	8009288 <__libc_init_array+0x24>
 8009274:	4d0b      	ldr	r5, [pc, #44]	; (80092a4 <__libc_init_array+0x40>)
 8009276:	4c0c      	ldr	r4, [pc, #48]	; (80092a8 <__libc_init_array+0x44>)
 8009278:	f000 f866 	bl	8009348 <_init>
 800927c:	1b64      	subs	r4, r4, r5
 800927e:	10a4      	asrs	r4, r4, #2
 8009280:	2600      	movs	r6, #0
 8009282:	42a6      	cmp	r6, r4
 8009284:	d105      	bne.n	8009292 <__libc_init_array+0x2e>
 8009286:	bd70      	pop	{r4, r5, r6, pc}
 8009288:	f855 3b04 	ldr.w	r3, [r5], #4
 800928c:	4798      	blx	r3
 800928e:	3601      	adds	r6, #1
 8009290:	e7ee      	b.n	8009270 <__libc_init_array+0xc>
 8009292:	f855 3b04 	ldr.w	r3, [r5], #4
 8009296:	4798      	blx	r3
 8009298:	3601      	adds	r6, #1
 800929a:	e7f2      	b.n	8009282 <__libc_init_array+0x1e>
 800929c:	0800938c 	.word	0x0800938c
 80092a0:	0800938c 	.word	0x0800938c
 80092a4:	0800938c 	.word	0x0800938c
 80092a8:	08009390 	.word	0x08009390

080092ac <__retarget_lock_acquire_recursive>:
 80092ac:	4770      	bx	lr

080092ae <__retarget_lock_release_recursive>:
 80092ae:	4770      	bx	lr

080092b0 <_free_r>:
 80092b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092b2:	2900      	cmp	r1, #0
 80092b4:	d044      	beq.n	8009340 <_free_r+0x90>
 80092b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ba:	9001      	str	r0, [sp, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f1a1 0404 	sub.w	r4, r1, #4
 80092c2:	bfb8      	it	lt
 80092c4:	18e4      	addlt	r4, r4, r3
 80092c6:	f7ff ffa3 	bl	8009210 <__malloc_lock>
 80092ca:	4a1e      	ldr	r2, [pc, #120]	; (8009344 <_free_r+0x94>)
 80092cc:	9801      	ldr	r0, [sp, #4]
 80092ce:	6813      	ldr	r3, [r2, #0]
 80092d0:	b933      	cbnz	r3, 80092e0 <_free_r+0x30>
 80092d2:	6063      	str	r3, [r4, #4]
 80092d4:	6014      	str	r4, [r2, #0]
 80092d6:	b003      	add	sp, #12
 80092d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092dc:	f7ff bf9e 	b.w	800921c <__malloc_unlock>
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	d908      	bls.n	80092f6 <_free_r+0x46>
 80092e4:	6825      	ldr	r5, [r4, #0]
 80092e6:	1961      	adds	r1, r4, r5
 80092e8:	428b      	cmp	r3, r1
 80092ea:	bf01      	itttt	eq
 80092ec:	6819      	ldreq	r1, [r3, #0]
 80092ee:	685b      	ldreq	r3, [r3, #4]
 80092f0:	1949      	addeq	r1, r1, r5
 80092f2:	6021      	streq	r1, [r4, #0]
 80092f4:	e7ed      	b.n	80092d2 <_free_r+0x22>
 80092f6:	461a      	mov	r2, r3
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	b10b      	cbz	r3, 8009300 <_free_r+0x50>
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d9fa      	bls.n	80092f6 <_free_r+0x46>
 8009300:	6811      	ldr	r1, [r2, #0]
 8009302:	1855      	adds	r5, r2, r1
 8009304:	42a5      	cmp	r5, r4
 8009306:	d10b      	bne.n	8009320 <_free_r+0x70>
 8009308:	6824      	ldr	r4, [r4, #0]
 800930a:	4421      	add	r1, r4
 800930c:	1854      	adds	r4, r2, r1
 800930e:	42a3      	cmp	r3, r4
 8009310:	6011      	str	r1, [r2, #0]
 8009312:	d1e0      	bne.n	80092d6 <_free_r+0x26>
 8009314:	681c      	ldr	r4, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	6053      	str	r3, [r2, #4]
 800931a:	440c      	add	r4, r1
 800931c:	6014      	str	r4, [r2, #0]
 800931e:	e7da      	b.n	80092d6 <_free_r+0x26>
 8009320:	d902      	bls.n	8009328 <_free_r+0x78>
 8009322:	230c      	movs	r3, #12
 8009324:	6003      	str	r3, [r0, #0]
 8009326:	e7d6      	b.n	80092d6 <_free_r+0x26>
 8009328:	6825      	ldr	r5, [r4, #0]
 800932a:	1961      	adds	r1, r4, r5
 800932c:	428b      	cmp	r3, r1
 800932e:	bf04      	itt	eq
 8009330:	6819      	ldreq	r1, [r3, #0]
 8009332:	685b      	ldreq	r3, [r3, #4]
 8009334:	6063      	str	r3, [r4, #4]
 8009336:	bf04      	itt	eq
 8009338:	1949      	addeq	r1, r1, r5
 800933a:	6021      	streq	r1, [r4, #0]
 800933c:	6054      	str	r4, [r2, #4]
 800933e:	e7ca      	b.n	80092d6 <_free_r+0x26>
 8009340:	b003      	add	sp, #12
 8009342:	bd30      	pop	{r4, r5, pc}
 8009344:	20000a8c 	.word	0x20000a8c

08009348 <_init>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr

08009354 <_fini>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	bf00      	nop
 8009358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935a:	bc08      	pop	{r3}
 800935c:	469e      	mov	lr, r3
 800935e:	4770      	bx	lr
