
DiscoF411_StateMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000955c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080096f4  080096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009718  08009718  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08009718  08009718  00019718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009720  08009720  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009724  08009724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08009728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  2000009c  080097c4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bd4  080097c4  00020bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0e6  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c7e  00000000  00000000  0003b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102a  00000000  00000000  000413b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b248  00000000  00000000  000423da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002077f  00000000  00000000  0005d622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f47  00000000  00000000  0007dda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058f8  00000000  00000000  0010ece8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  001145e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000009c 	.word	0x2000009c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080096dc 	.word	0x080096dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	080096dc 	.word	0x080096dc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_DMA_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	203a      	movs	r0, #58	; 0x3a
 80004fc:	f000 ff3f 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000500:	203a      	movs	r0, #58	; 0x3a
 8000502:	f000 ff58 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2046      	movs	r0, #70	; 0x46
 800050c:	f000 ff37 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000510:	2046      	movs	r0, #70	; 0x46
 8000512:	f000 ff50 	bl	80013b6 <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08c      	sub	sp, #48	; 0x30
 8000528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
 800053e:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a60      	ldr	r2, [pc, #384]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000544:	f043 0310 	orr.w	r3, r3, #16
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b5e      	ldr	r3, [pc, #376]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0310 	and.w	r3, r3, #16
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	4b5a      	ldr	r3, [pc, #360]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a59      	ldr	r2, [pc, #356]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b57      	ldr	r3, [pc, #348]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	4b53      	ldr	r3, [pc, #332]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a52      	ldr	r2, [pc, #328]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 800057c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b50      	ldr	r3, [pc, #320]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a4b      	ldr	r2, [pc, #300]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a44      	ldr	r2, [pc, #272]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a3d      	ldr	r2, [pc, #244]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <MX_GPIO_Init+0x1a0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2108      	movs	r1, #8
 80005e6:	4838      	ldr	r0, [pc, #224]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 80005e8:	f001 fbf4 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4836      	ldr	r0, [pc, #216]	; (80006cc <MX_GPIO_Init+0x1a8>)
 80005f2:	f001 fbef 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005f6:	2200      	movs	r2, #0
 80005f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005fc:	4834      	ldr	r0, [pc, #208]	; (80006d0 <MX_GPIO_Init+0x1ac>)
 80005fe:	f001 fbe9 	bl	8001dd4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000602:	2304      	movs	r3, #4
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	482c      	ldr	r0, [pc, #176]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 8000616:	f001 fa59 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800061a:	2308      	movs	r3, #8
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4825      	ldr	r0, [pc, #148]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 8000632:	f001 fa4b 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000636:	2332      	movs	r3, #50	; 0x32
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800063a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	481f      	ldr	r0, [pc, #124]	; (80006c8 <MX_GPIO_Init+0x1a4>)
 800064c:	f001 fa3e 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000650:	2301      	movs	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4819      	ldr	r0, [pc, #100]	; (80006cc <MX_GPIO_Init+0x1a8>)
 8000668:	f001 fa30 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000670:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4814      	ldr	r0, [pc, #80]	; (80006d4 <MX_GPIO_Init+0x1b0>)
 8000682:	f001 fa23 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000686:	f24f 0310 	movw	r3, #61456	; 0xf010
 800068a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0x1ac>)
 80006a0:	f001 fa14 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006a4:	2320      	movs	r3, #32
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_GPIO_Init+0x1ac>)
 80006b8:	f001 fa08 	bl	8001acc <HAL_GPIO_Init>

}
 80006bc:	bf00      	nop
 80006be:	3730      	adds	r7, #48	; 0x30
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40020000 	.word	0x40020000

080006d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f002 ff9b 	bl	8003650 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 fa5e 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000b8 	.word	0x200000b8
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_I2C_MspInit+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d12c      	bne.n	80007b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000772:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <HAL_I2C_MspInit+0x8c>)
 8000790:	f001 f99c 	bl	8001acc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_I2C_MspInit+0x88>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2S2_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <MX_I2S2_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2S2_Init+0x50>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2S2_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_I2S2_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_I2S2_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_I2S2_Init+0x50>)
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <MX_I2S2_Init+0x58>)
 80007ec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2S2_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_I2S2_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2S2_Init+0x50>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_I2S2_Init+0x50>)
 8000802:	f003 f869 	bl	80038d8 <HAL_I2S_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f9e8 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000010c 	.word	0x2000010c
 8000818:	40003800 	.word	0x40003800
 800081c:	00017700 	.word	0x00017700

08000820 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_I2S3_Init+0x54>)
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <MX_I2S3_Init+0x58>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2S3_Init+0x54>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_I2S3_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_I2S3_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_I2S3_Init+0x54>)
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <MX_I2S3_Init+0x5c>)
 800084a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_I2S3_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_I2S3_Init+0x54>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2S3_Init+0x54>)
 8000860:	f003 f83a 	bl	80038d8 <HAL_I2S_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800086a:	f000 f9b9 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000154 	.word	0x20000154
 8000878:	40003c00 	.word	0x40003c00
 800087c:	00017700 	.word	0x00017700

08000880 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a59      	ldr	r2, [pc, #356]	; (8000a04 <HAL_I2S_MspInit+0x184>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d15b      	bne.n	800095a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
 80008a6:	4b58      	ldr	r3, [pc, #352]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a57      	ldr	r2, [pc, #348]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b55      	ldr	r3, [pc, #340]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	623b      	str	r3, [r7, #32]
 80008bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	4b51      	ldr	r3, [pc, #324]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a50      	ldr	r2, [pc, #320]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a49      	ldr	r2, [pc, #292]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f6:	2304      	movs	r3, #4
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000906:	2306      	movs	r3, #6
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	483e      	ldr	r0, [pc, #248]	; (8000a0c <HAL_I2S_MspInit+0x18c>)
 8000912:	f001 f8db 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4836      	ldr	r0, [pc, #216]	; (8000a0c <HAL_I2S_MspInit+0x18c>)
 8000932:	f001 f8cb 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000936:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000948:	2305      	movs	r3, #5
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	482f      	ldr	r0, [pc, #188]	; (8000a10 <HAL_I2S_MspInit+0x190>)
 8000954:	f001 f8ba 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000958:	e04f      	b.n	80009fa <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <HAL_I2S_MspInit+0x194>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d14a      	bne.n	80009fa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 800096e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_I2S_MspInit+0x188>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009b8:	2310      	movs	r3, #16
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c8:	2306      	movs	r3, #6
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <HAL_I2S_MspInit+0x198>)
 80009d4:	f001 f87a 	bl	8001acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ea:	2306      	movs	r3, #6
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_I2S_MspInit+0x18c>)
 80009f6:	f001 f869 	bl	8001acc <HAL_GPIO_Init>
}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40003800 	.word	0x40003800
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40003c00 	.word	0x40003c00
 8000a18:	40020000 	.word	0x40020000

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fb3b 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f853 	bl	8000ad0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a2a:	f000 f8b9 	bl	8000ba0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f7ff fd79 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a32:	f7ff fd4f 	bl	80004d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a36:	f7ff fe4f 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a3a:	f7ff fec3 	bl	80007c4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a3e:	f7ff feef 	bl	8000820 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a42:	f000 f8d3 	bl	8000bec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a46:	f008 f859 	bl	8008afc <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8000a4a:	f000 fa05 	bl	8000e58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  initializeApplication();
 8000a4e:	f008 fb5d 	bl	800910c <initializeApplication>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a52:	f008 f879 	bl	8008b48 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //while(appFunctionTable[currentState].function());	// This method can be applied when there is no declare "stateTransitionCondition" variable in appFunctionTable

    controlTimer();
 8000a56:	f008 fc2b 	bl	80092b0 <controlTimer>
    if(getTimerResultStatus(STATE_TIMER_TAG))
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f008 fc76 	bl	800934c <getTimerResultStatus>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <main+0x58>
    {
    	appFunctionTable[currentState].stateTransitionCondition = TRUE;		//Set State Flag
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <main+0xa8>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <main+0xac>)
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4413      	add	r3, r2
 8000a70:	2201      	movs	r2, #1
 8000a72:	711a      	strb	r2, [r3, #4]
    }

    if(appFunctionTable[currentState].stateTransitionCondition)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <main+0xa8>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <main+0xac>)
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d012      	beq.n	8000aaa <main+0x8e>
    {
    	appFunctionTable[currentState].stateTransitionCondition = FALSE;	//Clear State Flag
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <main+0xa8>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <main+0xac>)
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2200      	movs	r2, #0
 8000a90:	711a      	strb	r2, [r3, #4]
    	appFunctionTable[currentState].function();
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <main+0xa8>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <main+0xac>)
 8000a9a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a9e:	4798      	blx	r3
    	startTimer(STATE_TIMER_TAG, 1000);			//timer re-initialize to 1 s
 8000aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f008 fbcd 	bl	8009244 <startTimer>
    }
    //! Starts DMA_RX Work here

    uartReceiveDMA(&huart1, rxBuffer, 8);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <main+0xb0>)
 8000ab2:	f008 fca9 	bl	8009408 <uartReceiveDMA>
    uartSendDMA(&huart1, rxBuffer, 8);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2208      	movs	r2, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <main+0xb0>)
 8000abe:	f008 fc73 	bl	80093a8 <uartSendDMA>
    MX_USB_HOST_Process();
 8000ac2:	e7c6      	b.n	8000a52 <main+0x36>
 8000ac4:	200009e0 	.word	0x200009e0
 8000ac8:	2000002c 	.word	0x2000002c
 8000acc:	200001f8 	.word	0x200001f8

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2230      	movs	r2, #48	; 0x30
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 fd6c 	bl	80095bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <SystemClock_Config+0xc8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <SystemClock_Config+0xc8>)
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <SystemClock_Config+0xc8>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <SystemClock_Config+0xcc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <SystemClock_Config+0xcc>)
 8000b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <SystemClock_Config+0xcc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b44:	23c0      	movs	r3, #192	; 0xc0
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fb5f 	bl	8004218 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b60:	f000 f83e 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2103      	movs	r1, #3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fdc1 	bl	8004708 <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b8c:	f000 f828 	bl	8000be0 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3750      	adds	r7, #80	; 0x50
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000bba:	23c8      	movs	r3, #200	; 0xc8
 8000bbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 ffbd 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000bd4:	f000 f804 	bl	8000be0 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <MX_SPI1_Init+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c38:	220a      	movs	r2, #10
 8000c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_SPI1_Init+0x64>)
 8000c3e:	f004 f8d3 	bl	8004de8 <HAL_SPI_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c48:	f7ff ffca 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000019c 	.word	0x2000019c
 8000c54:	40013000 	.word	0x40013000

08000c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cb2:	23e0      	movs	r3, #224	; 0xe0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_SPI_MspInit+0x8c>)
 8000cce:	f000 fefd 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d26:	2007      	movs	r0, #7
 8000d28:	f000 fb1e 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f9dc 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <DMA2_Stream2_IRQHandler+0x10>)
 8000d92:	f000 fc31 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000029c 	.word	0x2000029c

08000da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <OTG_FS_IRQHandler+0x10>)
 8000da6:	f001 fab3 	bl	8002310 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200006dc 	.word	0x200006dc

08000db4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <DMA2_Stream7_IRQHandler+0x10>)
 8000dba:	f000 fc1d 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000023c 	.word	0x2000023c

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f008 fbf8 	bl	80095ec <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20020000 	.word	0x20020000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	200001f4 	.word	0x200001f4
 8000e30:	20000bd8 	.word	0x20000bd8

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_USART1_UART_Init+0x50>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e90:	f004 f833 	bl	8004efa <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e9a:	f7ff fea1 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001f8 	.word	0x200001f8
 8000ea8:	40011000 	.word	0x40011000

08000eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a57      	ldr	r2, [pc, #348]	; (8001028 <HAL_UART_MspInit+0x17c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	f040 80a7 	bne.w	800101e <HAL_UART_MspInit+0x172>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <HAL_UART_MspInit+0x180>)
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	4a54      	ldr	r2, [pc, #336]	; (800102c <HAL_UART_MspInit+0x180>)
 8000eda:	f043 0310 	orr.w	r3, r3, #16
 8000ede:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee0:	4b52      	ldr	r3, [pc, #328]	; (800102c <HAL_UART_MspInit+0x180>)
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee4:	f003 0310 	and.w	r3, r3, #16
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4b4e      	ldr	r3, [pc, #312]	; (800102c <HAL_UART_MspInit+0x180>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_UART_MspInit+0x180>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
 8000efc:	4b4b      	ldr	r3, [pc, #300]	; (800102c <HAL_UART_MspInit+0x180>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	4b47      	ldr	r3, [pc, #284]	; (800102c <HAL_UART_MspInit+0x180>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a46      	ldr	r2, [pc, #280]	; (800102c <HAL_UART_MspInit+0x180>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b44      	ldr	r3, [pc, #272]	; (800102c <HAL_UART_MspInit+0x180>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f36:	2307      	movs	r3, #7
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	483b      	ldr	r0, [pc, #236]	; (8001030 <HAL_UART_MspInit+0x184>)
 8000f42:	f000 fdc3 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f56:	2307      	movs	r3, #7
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4834      	ldr	r0, [pc, #208]	; (8001034 <HAL_UART_MspInit+0x188>)
 8000f62:	f000 fdb3 	bl	8001acc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f68:	4a34      	ldr	r2, [pc, #208]	; (800103c <HAL_UART_MspInit+0x190>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f76:	2240      	movs	r2, #64	; 0x40
 8000f78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fa6:	4824      	ldr	r0, [pc, #144]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000fa8:	f000 fa20 	bl	80013ec <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000fb2:	f7ff fe15 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HAL_UART_MspInit+0x18c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000fc4:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <HAL_UART_MspInit+0x198>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_UART_MspInit+0x194>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001002:	480f      	ldr	r0, [pc, #60]	; (8001040 <HAL_UART_MspInit+0x194>)
 8001004:	f000 f9f2 	bl	80013ec <HAL_DMA_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800100e:	f7ff fde7 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_UART_MspInit+0x194>)
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_UART_MspInit+0x194>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40011000 	.word	0x40011000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	2000023c 	.word	0x2000023c
 800103c:	400264b8 	.word	0x400264b8
 8001040:	2000029c 	.word	0x2000029c
 8001044:	40026440 	.word	0x40026440

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001072:	f7ff fedf 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f008 fabf 	bl	80095f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fccf 	bl	8000a1c <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800108c:	08009728 	.word	0x08009728
  ldr r2, =_sbss
 8001090:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001094:	20000bd4 	.word	0x20000bd4

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f94f 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe0a 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f967 	bl	80013d2 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f92f 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	200002fc 	.word	0x200002fc

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200002fc 	.word	0x200002fc

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff29 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff3e 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff31 	bl	800122c <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff feb6 	bl	8001168 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e099      	b.n	800153c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001428:	e00f      	b.n	800144a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142a:	f7ff fe9d 	bl	8001168 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b05      	cmp	r3, #5
 8001436:	d908      	bls.n	800144a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e078      	b.n	800153c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e8      	bne.n	800142a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_DMA_Init+0x158>)
 8001464:	4013      	ands	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4313      	orrs	r3, r2
 800149a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d107      	bne.n	80014b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	4313      	orrs	r3, r2
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d117      	bne.n	800150e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00e      	beq.n	800150e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fa6f 	bl	80019d4 <DMA_CheckFifoParam>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800150a:	2301      	movs	r3, #1
 800150c:	e016      	b.n	800153c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fa26 	bl	8001968 <DMA_CalcBaseAndBitshift>
 800151c:	4603      	mov	r3, r0
 800151e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	223f      	movs	r2, #63	; 0x3f
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	f010803f 	.word	0xf010803f

08001548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_DMA_Start_IT+0x26>
 800156a:	2302      	movs	r3, #2
 800156c:	e040      	b.n	80015f0 <HAL_DMA_Start_IT+0xa8>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12f      	bne.n	80015e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2202      	movs	r2, #2
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f9b8 	bl	800190c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	223f      	movs	r2, #63	; 0x3f
 80015a2:	409a      	lsls	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0216 	orr.w	r2, r2, #22
 80015b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0208 	orr.w	r2, r2, #8
 80015ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e005      	b.n	80015ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ea:	2302      	movs	r3, #2
 80015ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001604:	4b8e      	ldr	r3, [pc, #568]	; (8001840 <HAL_DMA_IRQHandler+0x248>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a8e      	ldr	r2, [pc, #568]	; (8001844 <HAL_DMA_IRQHandler+0x24c>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0a9b      	lsrs	r3, r3, #10
 8001610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2208      	movs	r2, #8
 8001624:	409a      	lsls	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01a      	beq.n	8001664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0204 	bic.w	r2, r2, #4
 800164a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2208      	movs	r2, #8
 8001652:	409a      	lsls	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2201      	movs	r2, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d012      	beq.n	800169a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2201      	movs	r2, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001692:	f043 0202 	orr.w	r2, r3, #2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	2204      	movs	r2, #4
 80016a0:	409a      	lsls	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d012      	beq.n	80016d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	2204      	movs	r2, #4
 80016be:	409a      	lsls	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f043 0204 	orr.w	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	2210      	movs	r2, #16
 80016d6:	409a      	lsls	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d043      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d03c      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	2210      	movs	r2, #16
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d018      	beq.n	800173a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d108      	bne.n	8001728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d024      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
 8001726:	e01f      	b.n	8001768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01b      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
 8001738:	e016      	b.n	8001768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d107      	bne.n	8001758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0208 	bic.w	r2, r2, #8
 8001756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	2220      	movs	r2, #32
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 808f 	beq.w	8001898 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8087 	beq.w	8001898 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2220      	movs	r2, #32
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d136      	bne.n	8001810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0216 	bic.w	r2, r2, #22
 80017b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <HAL_DMA_IRQHandler+0x1da>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0208 	bic.w	r2, r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	223f      	movs	r2, #63	; 0x3f
 80017e8:	409a      	lsls	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001802:	2b00      	cmp	r3, #0
 8001804:	d07e      	beq.n	8001904 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
        }
        return;
 800180e:	e079      	b.n	8001904 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01d      	beq.n	800185a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	2b00      	cmp	r3, #0
 8001832:	d031      	beq.n	8001898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
 800183c:	e02c      	b.n	8001898 <HAL_DMA_IRQHandler+0x2a0>
 800183e:	bf00      	nop
 8001840:	20000000 	.word	0x20000000
 8001844:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d023      	beq.n	8001898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
 8001858:	e01e      	b.n	8001898 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10f      	bne.n	8001888 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0210 	bic.w	r2, r2, #16
 8001876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189c:	2b00      	cmp	r3, #0
 800189e:	d032      	beq.n	8001906 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d022      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2205      	movs	r2, #5
 80018b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d307      	bcc.n	80018e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x2cc>
 80018de:	e000      	b.n	80018e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3
 8001902:	e000      	b.n	8001906 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001904:	bf00      	nop
    }
  }
}
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001928:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b40      	cmp	r3, #64	; 0x40
 8001938:	d108      	bne.n	800194c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800194a:	e007      	b.n	800195c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	3b10      	subs	r3, #16
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <DMA_CalcBaseAndBitshift+0x64>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001982:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d909      	bls.n	80019aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	1d1a      	adds	r2, r3, #4
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	659a      	str	r2, [r3, #88]	; 0x58
 80019a8:	e007      	b.n	80019ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019b2:	f023 0303 	bic.w	r3, r3, #3
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	aaaaaaab 	.word	0xaaaaaaab
 80019d0:	08009710 	.word	0x08009710

080019d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d11f      	bne.n	8001a2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d856      	bhi.n	8001aa2 <DMA_CheckFifoParam+0xce>
 80019f4:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <DMA_CheckFifoParam+0x28>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a1f 	.word	0x08001a1f
 8001a04:	08001a0d 	.word	0x08001a0d
 8001a08:	08001aa3 	.word	0x08001aa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d046      	beq.n	8001aa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a1c:	e043      	b.n	8001aa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a26:	d140      	bne.n	8001aaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a2c:	e03d      	b.n	8001aaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a36:	d121      	bne.n	8001a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d837      	bhi.n	8001aae <DMA_CheckFifoParam+0xda>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <DMA_CheckFifoParam+0x70>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a5b 	.word	0x08001a5b
 8001a4c:	08001a55 	.word	0x08001a55
 8001a50:	08001a6d 	.word	0x08001a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
      break;
 8001a58:	e030      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d025      	beq.n	8001ab2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a6a:	e022      	b.n	8001ab2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a74:	d11f      	bne.n	8001ab6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a7a:	e01c      	b.n	8001ab6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d903      	bls.n	8001a8a <DMA_CheckFifoParam+0xb6>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d003      	beq.n	8001a90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a88:	e018      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a8e:	e015      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00e      	beq.n	8001aba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa0:	e00b      	b.n	8001aba <DMA_CheckFifoParam+0xe6>
      break;
 8001aa2:	bf00      	nop
 8001aa4:	e00a      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      break;
 8001aa6:	bf00      	nop
 8001aa8:	e008      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      break;
 8001aaa:	bf00      	nop
 8001aac:	e006      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      break;
 8001aae:	bf00      	nop
 8001ab0:	e004      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      break;
 8001ab2:	bf00      	nop
 8001ab4:	e002      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ab6:	bf00      	nop
 8001ab8:	e000      	b.n	8001abc <DMA_CheckFifoParam+0xe8>
      break;
 8001aba:	bf00      	nop
    }
  } 
  
  return status; 
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	e159      	b.n	8001d9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	f040 8148 	bne.w	8001d96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d005      	beq.n	8001b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d130      	bne.n	8001b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 0201 	and.w	r2, r3, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d017      	beq.n	8001bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d123      	bne.n	8001c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80a2 	beq.w	8001d96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a56      	ldr	r2, [pc, #344]	; (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b54      	ldr	r3, [pc, #336]	; (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6e:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a49      	ldr	r2, [pc, #292]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x202>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a48      	ldr	r2, [pc, #288]	; (8001dc0 <HAL_GPIO_Init+0x2f4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x1fe>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a47      	ldr	r2, [pc, #284]	; (8001dc4 <HAL_GPIO_Init+0x2f8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a46      	ldr	r2, [pc, #280]	; (8001dc8 <HAL_GPIO_Init+0x2fc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x1f6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a45      	ldr	r2, [pc, #276]	; (8001dcc <HAL_GPIO_Init+0x300>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x1f2>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e008      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x204>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d42:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d66:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d90:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	f67f aea2 	bls.w	8001ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df0:	e003      	b.n	8001dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	041a      	lsls	r2, r3, #16
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	400b      	ands	r3, r1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3c:	b08f      	sub	sp, #60	; 0x3c
 8001e3e:	af0a      	add	r7, sp, #40	; 0x28
 8001e40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e054      	b.n	8001ef6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f006 fea6 	bl	8008bb8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fed2 	bl	8005c34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	687e      	ldr	r6, [r7, #4]
 8001e98:	466d      	mov	r5, sp
 8001e9a:	f106 0410 	add.w	r4, r6, #16
 8001e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eae:	1d33      	adds	r3, r6, #4
 8001eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f003 fe4c 	bl	8005b50 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fec9 	bl	8005c56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	687e      	ldr	r6, [r7, #4]
 8001ecc:	466d      	mov	r5, sp
 8001ece:	f106 0410 	add.w	r4, r6, #16
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ede:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee2:	1d33      	adds	r3, r6, #4
 8001ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f004 f852 	bl	8005f90 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001efe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001efe:	b590      	push	{r4, r7, lr}
 8001f00:	b089      	sub	sp, #36	; 0x24
 8001f02:	af04      	add	r7, sp, #16
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	4608      	mov	r0, r1
 8001f08:	4611      	mov	r1, r2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	70fb      	strb	r3, [r7, #3]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70bb      	strb	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_HCD_HC_Init+0x28>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e076      	b.n	8002014 <HAL_HCD_HC_Init+0x116>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	333d      	adds	r3, #61	; 0x3d
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3338      	adds	r3, #56	; 0x38
 8001f4e:	787a      	ldrb	r2, [r7, #1]
 8001f50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3340      	adds	r3, #64	; 0x40
 8001f60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f62:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	3339      	adds	r3, #57	; 0x39
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	333f      	adds	r3, #63	; 0x3f
 8001f84:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	78ba      	ldrb	r2, [r7, #2]
 8001f8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f92:	b2d0      	uxtb	r0, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	333a      	adds	r3, #58	; 0x3a
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001fa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da09      	bge.n	8001fc0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	333b      	adds	r3, #59	; 0x3b
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e008      	b.n	8001fd2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	333b      	adds	r3, #59	; 0x3b
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	333c      	adds	r3, #60	; 0x3c
 8001fe0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fe4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	787c      	ldrb	r4, [r7, #1]
 8001fec:	78ba      	ldrb	r2, [r7, #2]
 8001fee:	78f9      	ldrb	r1, [r7, #3]
 8001ff0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4623      	mov	r3, r4
 8002002:	f004 f94b 	bl	800629c <USB_HC_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}

0800201c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_HCD_HC_Halt+0x1e>
 8002036:	2302      	movs	r3, #2
 8002038:	e00f      	b.n	800205a <HAL_HCD_HC_Halt+0x3e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f004 fb9b 	bl	8006786 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4603      	mov	r3, r0
 8002074:	70fb      	strb	r3, [r7, #3]
 8002076:	460b      	mov	r3, r1
 8002078:	70bb      	strb	r3, [r7, #2]
 800207a:	4613      	mov	r3, r2
 800207c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	333b      	adds	r3, #59	; 0x3b
 800208c:	78ba      	ldrb	r2, [r7, #2]
 800208e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	333f      	adds	r3, #63	; 0x3f
 800209e:	787a      	ldrb	r2, [r7, #1]
 80020a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020a2:	7c3b      	ldrb	r3, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d112      	bne.n	80020ce <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3342      	adds	r3, #66	; 0x42
 80020b6:	2203      	movs	r2, #3
 80020b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	333d      	adds	r3, #61	; 0x3d
 80020c8:	7f3a      	ldrb	r2, [r7, #28]
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	e008      	b.n	80020e0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3342      	adds	r3, #66	; 0x42
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	f200 80c6 	bhi.w	8002274 <HAL_HCD_HC_SubmitRequest+0x210>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002261 	.word	0x08002261
 80020f8:	08002165 	.word	0x08002165
 80020fc:	080021e3 	.word	0x080021e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002100:	7c3b      	ldrb	r3, [r7, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 80b8 	bne.w	8002278 <HAL_HCD_HC_SubmitRequest+0x214>
 8002108:	78bb      	ldrb	r3, [r7, #2]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80b4 	bne.w	8002278 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002110:	8b3b      	ldrh	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3355      	adds	r3, #85	; 0x55
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3355      	adds	r3, #85	; 0x55
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3342      	adds	r3, #66	; 0x42
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800214e:	e093      	b.n	8002278 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3342      	adds	r3, #66	; 0x42
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
      break;
 8002162:	e089      	b.n	8002278 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002164:	78bb      	ldrb	r3, [r7, #2]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11d      	bne.n	80021a6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3355      	adds	r3, #85	; 0x55
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3342      	adds	r3, #66	; 0x42
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002190:	e073      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3342      	adds	r3, #66	; 0x42
 80021a0:	2202      	movs	r2, #2
 80021a2:	701a      	strb	r2, [r3, #0]
      break;
 80021a4:	e069      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3354      	adds	r3, #84	; 0x54
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3342      	adds	r3, #66	; 0x42
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
      break;
 80021cc:	e055      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3342      	adds	r3, #66	; 0x42
 80021dc:	2202      	movs	r2, #2
 80021de:	701a      	strb	r2, [r3, #0]
      break;
 80021e0:	e04b      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021e2:	78bb      	ldrb	r3, [r7, #2]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11d      	bne.n	8002224 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3355      	adds	r3, #85	; 0x55
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3342      	adds	r3, #66	; 0x42
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800220e:	e034      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3342      	adds	r3, #66	; 0x42
 800221e:	2202      	movs	r2, #2
 8002220:	701a      	strb	r2, [r3, #0]
      break;
 8002222:	e02a      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3354      	adds	r3, #84	; 0x54
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3342      	adds	r3, #66	; 0x42
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
      break;
 800224a:	e016      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3342      	adds	r3, #66	; 0x42
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
      break;
 800225e:	e00c      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3342      	adds	r3, #66	; 0x42
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
      break;
 8002272:	e002      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002274:	bf00      	nop
 8002276:	e000      	b.n	800227a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002278:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3344      	adds	r3, #68	; 0x44
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	8b3a      	ldrh	r2, [r7, #24]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	202c      	movs	r0, #44	; 0x2c
 8002294:	fb00 f303 	mul.w	r3, r0, r3
 8002298:	440b      	add	r3, r1
 800229a:	334c      	adds	r3, #76	; 0x4c
 800229c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3360      	adds	r3, #96	; 0x60
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3350      	adds	r3, #80	; 0x50
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3339      	adds	r3, #57	; 0x39
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	3361      	adds	r3, #97	; 0x61
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	222c      	movs	r2, #44	; 0x2c
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	3338      	adds	r3, #56	; 0x38
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	18d1      	adds	r1, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	f004 f8ee 	bl	80064e0 <USB_HC_StartXfer>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop

08002310 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fdef 	bl	8005f0a <USB_GetMode>
 800232c:	4603      	mov	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	f040 80f6 	bne.w	8002520 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fdd3 	bl	8005ee4 <USB_ReadInterrupts>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80ec 	beq.w	800251e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 fdca 	bl	8005ee4 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800235a:	d104      	bne.n	8002366 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002364:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 fdba 	bl	8005ee4 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800237a:	d104      	bne.n	8002386 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002384:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fdaa 	bl	8005ee4 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239a:	d104      	bne.n	80023a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fd9a 	bl	8005ee4 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d103      	bne.n	80023c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fd8c 	bl	8005ee4 <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d6:	d11c      	bne.n	8002412 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023f2:	2110      	movs	r1, #16
 80023f4:	6938      	ldr	r0, [r7, #16]
 80023f6:	f003 fc7b 	bl	8005cf0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023fa:	6938      	ldr	r0, [r7, #16]
 80023fc:	f003 fcac 	bl	8005d58 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fe82 	bl	8006110 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f006 fc51 	bl	8008cb4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fd64 	bl	8005ee4 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002422:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002426:	d102      	bne.n	800242e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f001 f89e 	bl	800356a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fd56 	bl	8005ee4 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b08      	cmp	r3, #8
 8002440:	d106      	bne.n	8002450 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f006 fc1a 	bl	8008c7c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2208      	movs	r2, #8
 800244e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fd45 	bl	8005ee4 <USB_ReadInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b10      	cmp	r3, #16
 8002462:	d101      	bne.n	8002468 <HAL_HCD_IRQHandler+0x158>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_HCD_IRQHandler+0x15a>
 8002468:	2300      	movs	r3, #0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0210 	bic.w	r2, r2, #16
 800247c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 ffa1 	bl	80033c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0210 	orr.w	r2, r2, #16
 8002492:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f003 fd23 	bl	8005ee4 <USB_ReadInterrupts>
 800249e:	4603      	mov	r3, r0
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a8:	d13a      	bne.n	8002520 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 f958 	bl	8006764 <USB_HC_ReadInterrupt>
 80024b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e025      	b.n	8002508 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d018      	beq.n	8002502 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e6:	d106      	bne.n	80024f6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f8ab 	bl	800264a <HCD_HC_IN_IRQHandler>
 80024f4:	e005      	b.n	8002502 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fbf9 	bl	8002cf4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3d4      	bcc.n	80024bc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251a:	615a      	str	r2, [r3, #20]
 800251c:	e000      	b.n	8002520 <HAL_HCD_IRQHandler+0x210>
      return;
 800251e:	bf00      	nop
    }
  }
}
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_HCD_Start+0x16>
 8002538:	2302      	movs	r3, #2
 800253a:	e013      	b.n	8002564 <HAL_HCD_Start+0x3e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fe44 	bl	80061d8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fb5c 	bl	8005c12 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_HCD_Stop+0x16>
 800257e:	2302      	movs	r3, #2
 8002580:	e00d      	b.n	800259e <HAL_HCD_Stop+0x32>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fa32 	bl	80069f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fde6 	bl	8006184 <USB_ResetPort>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	781b      	ldrb	r3, [r3, #0]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3350      	adds	r3, #80	; 0x50
 8002604:	681b      	ldr	r3, [r3, #0]
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fe2a 	bl	8006278 <USB_GetCurrentFrame>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fe05 	bl	800624a <USB_GetHostSpeed>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d11a      	bne.n	80026b0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	2304      	movs	r3, #4
 800268a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3361      	adds	r3, #97	; 0x61
 800269a:	2206      	movs	r2, #6
 800269c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 f86c 	bl	8006786 <USB_HC_Halt>
 80026ae:	e0af      	b.n	8002810 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c6:	d11b      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	461a      	mov	r2, r3
 80026d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3361      	adds	r3, #97	; 0x61
 80026ea:	2207      	movs	r2, #7
 80026ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 f844 	bl	8006786 <USB_HC_Halt>
 80026fe:	e087      	b.n	8002810 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b20      	cmp	r3, #32
 8002714:	d109      	bne.n	800272a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	461a      	mov	r2, r3
 8002724:	2320      	movs	r3, #32
 8002726:	6093      	str	r3, [r2, #8]
 8002728:	e072      	b.n	8002810 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b08      	cmp	r3, #8
 800273e:	d11a      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	2308      	movs	r3, #8
 8002750:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3361      	adds	r3, #97	; 0x61
 8002760:	2205      	movs	r2, #5
 8002762:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f004 f809 	bl	8006786 <USB_HC_Halt>
 8002774:	e04c      	b.n	8002810 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278c:	d11b      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2208      	movs	r2, #8
 80027b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 ffe1 	bl	8006786 <USB_HC_Halt>
 80027c4:	e024      	b.n	8002810 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b80      	cmp	r3, #128	; 0x80
 80027da:	d119      	bne.n	8002810 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	461a      	mov	r2, r3
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3361      	adds	r3, #97	; 0x61
 80027fc:	2206      	movs	r2, #6
 80027fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 ffbb 	bl	8006786 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002826:	d112      	bne.n	800284e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f003 ffa7 	bl	8006786 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800284c:	e24e      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 80df 	bne.w	8002a24 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3348      	adds	r3, #72	; 0x48
 800287c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	440b      	add	r3, r1
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002890:	1ad2      	subs	r2, r2, r3
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	202c      	movs	r0, #44	; 0x2c
 8002898:	fb00 f303 	mul.w	r3, r0, r3
 800289c:	440b      	add	r3, r1
 800289e:	3350      	adds	r3, #80	; 0x50
 80028a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3361      	adds	r3, #97	; 0x61
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	335c      	adds	r3, #92	; 0x5c
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	461a      	mov	r2, r3
 80028d4:	2301      	movs	r3, #1
 80028d6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	333f      	adds	r3, #63	; 0x3f
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	333f      	adds	r3, #63	; 0x3f
 80028fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d111      	bne.n	8002924 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f003 ff3b 	bl	8006786 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2310      	movs	r3, #16
 8002920:	6093      	str	r3, [r2, #8]
 8002922:	e03a      	b.n	800299a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	333f      	adds	r3, #63	; 0x3f
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d009      	beq.n	800294c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	333f      	adds	r3, #63	; 0x3f
 8002946:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002948:	2b01      	cmp	r3, #1
 800294a:	d126      	bne.n	800299a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	440a      	add	r2, r1
 8002962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800296a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3360      	adds	r3, #96	; 0x60
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	b2d9      	uxtb	r1, r3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	202c      	movs	r0, #44	; 0x2c
 8002988:	fb00 f303 	mul.w	r3, r0, r3
 800298c:	4413      	add	r3, r2
 800298e:	3360      	adds	r3, #96	; 0x60
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f006 f99b 	bl	8008cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d12b      	bne.n	80029fa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3348      	adds	r3, #72	; 0x48
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	202c      	movs	r0, #44	; 0x2c
 80029b8:	fb00 f202 	mul.w	r2, r0, r2
 80029bc:	440a      	add	r2, r1
 80029be:	3240      	adds	r2, #64	; 0x40
 80029c0:	8812      	ldrh	r2, [r2, #0]
 80029c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 818e 	beq.w	8002cec <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3354      	adds	r3, #84	; 0x54
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2d8      	uxtb	r0, r3
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3354      	adds	r3, #84	; 0x54
 80029f4:	4602      	mov	r2, r0
 80029f6:	701a      	strb	r2, [r3, #0]
}
 80029f8:	e178      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3354      	adds	r3, #84	; 0x54
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2d8      	uxtb	r0, r3
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3354      	adds	r3, #84	; 0x54
 8002a1e:	4602      	mov	r2, r0
 8002a20:	701a      	strb	r2, [r3, #0]
}
 8002a22:	e163      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	f040 80f6 	bne.w	8002c28 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3361      	adds	r3, #97	; 0x61
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d109      	bne.n	8002a64 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3360      	adds	r3, #96	; 0x60
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e0c9      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3361      	adds	r3, #97	; 0x61
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d109      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	2205      	movs	r2, #5
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e0b5      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d009      	beq.n	8002ab4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3361      	adds	r3, #97	; 0x61
 8002aae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d150      	bne.n	8002b56 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	335c      	adds	r3, #92	; 0x5c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	202c      	movs	r0, #44	; 0x2c
 8002acc:	fb00 f303 	mul.w	r3, r0, r3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	335c      	adds	r3, #92	; 0x5c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d912      	bls.n	8002b10 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3360      	adds	r3, #96	; 0x60
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b0e:	e073      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3360      	adds	r3, #96	; 0x60
 8002b1e:	2202      	movs	r2, #2
 8002b20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b38:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b40:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b54:	e050      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3361      	adds	r3, #97	; 0x61
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d122      	bne.n	8002bb0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3360      	adds	r3, #96	; 0x60
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e023      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3361      	adds	r3, #97	; 0x61
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d119      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	335c      	adds	r3, #92	; 0x5c
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	202c      	movs	r0, #44	; 0x2c
 8002bdc:	fb00 f303 	mul.w	r3, r0, r3
 8002be0:	440b      	add	r3, r1
 8002be2:	335c      	adds	r3, #92	; 0x5c
 8002be4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3360      	adds	r3, #96	; 0x60
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	461a      	mov	r2, r3
 8002c06:	2302      	movs	r3, #2
 8002c08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	b2d9      	uxtb	r1, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3360      	adds	r3, #96	; 0x60
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f006 f855 	bl	8008cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c26:	e061      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d156      	bne.n	8002cec <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	333f      	adds	r3, #63	; 0x3f
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d111      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fd89 	bl	8006786 <USB_HC_Halt>
 8002c74:	e031      	b.n	8002cda <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	333f      	adds	r3, #63	; 0x3f
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	333f      	adds	r3, #63	; 0x3f
 8002c98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d11d      	bne.n	8002cda <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d110      	bne.n	8002cda <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3361      	adds	r3, #97	; 0x61
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fd56 	bl	8006786 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2310      	movs	r3, #16
 8002cea:	6093      	str	r3, [r2, #8]
}
 8002cec:	bf00      	nop
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d11a      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	2304      	movs	r3, #4
 8002d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3361      	adds	r3, #97	; 0x61
 8002d44:	2206      	movs	r2, #6
 8002d46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fd17 	bl	8006786 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d58:	e331      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d12e      	bne.n	8002dce <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2320      	movs	r3, #32
 8002d80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	333d      	adds	r3, #61	; 0x3d
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	f040 8313 	bne.w	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	333d      	adds	r3, #61	; 0x3d
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3360      	adds	r3, #96	; 0x60
 8002db8:	2202      	movs	r2, #2
 8002dba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 fcdd 	bl	8006786 <USB_HC_Halt>
}
 8002dcc:	e2f7      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de4:	d112      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	461a      	mov	r2, r3
 8002df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fcbe 	bl	8006786 <USB_HC_Halt>
}
 8002e0a:	e2d8      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d140      	bne.n	8002ea4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	335c      	adds	r3, #92	; 0x5c
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d111      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	333d      	adds	r3, #61	; 0x3d
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2340      	movs	r3, #64	; 0x40
 8002e6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3361      	adds	r3, #97	; 0x61
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fc72 	bl	8006786 <USB_HC_Halt>
}
 8002ea2:	e28c      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d12c      	bne.n	8002f14 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3361      	adds	r3, #97	; 0x61
 8002ec8:	2204      	movs	r2, #4
 8002eca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	333d      	adds	r3, #61	; 0x3d
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	335c      	adds	r3, #92	; 0x5c
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fc43 	bl	8006786 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2340      	movs	r3, #64	; 0x40
 8002f10:	6093      	str	r3, [r2, #8]
}
 8002f12:	e254      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d11a      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	2308      	movs	r3, #8
 8002f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3361      	adds	r3, #97	; 0x61
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fc14 	bl	8006786 <USB_HC_Halt>
}
 8002f5e:	e22e      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d140      	bne.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	335c      	adds	r3, #92	; 0x5c
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3361      	adds	r3, #97	; 0x61
 8002f96:	2203      	movs	r2, #3
 8002f98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	333d      	adds	r3, #61	; 0x3d
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d112      	bne.n	8002fd4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	333c      	adds	r3, #60	; 0x3c
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	333d      	adds	r3, #61	; 0x3d
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 fbd1 	bl	8006786 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	6093      	str	r3, [r2, #8]
}
 8002ff6:	e1e2      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b80      	cmp	r3, #128	; 0x80
 800300c:	d164      	bne.n	80030d8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d111      	bne.n	800303a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3361      	adds	r3, #97	; 0x61
 8003024:	2206      	movs	r2, #6
 8003026:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fba7 	bl	8006786 <USB_HC_Halt>
 8003038:	e044      	b.n	80030c4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	335c      	adds	r3, #92	; 0x5c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	202c      	movs	r0, #44	; 0x2c
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	440b      	add	r3, r1
 8003058:	335c      	adds	r3, #92	; 0x5c
 800305a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	335c      	adds	r3, #92	; 0x5c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d920      	bls.n	80030b2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	335c      	adds	r3, #92	; 0x5c
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3360      	adds	r3, #96	; 0x60
 8003090:	2204      	movs	r2, #4
 8003092:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	b2d9      	uxtb	r1, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3360      	adds	r3, #96	; 0x60
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f005 fe10 	bl	8008cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030b0:	e008      	b.n	80030c4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3360      	adds	r3, #96	; 0x60
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	6093      	str	r3, [r2, #8]
}
 80030d6:	e172      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d11b      	bne.n	8003128 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3361      	adds	r3, #97	; 0x61
 80030fe:	2208      	movs	r2, #8
 8003100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f003 fb3a 	bl	8006786 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	461a      	mov	r2, r3
 8003120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003124:	6093      	str	r3, [r2, #8]
}
 8003126:	e14a      	b.n	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	f040 813f 	bne.w	80033be <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d17d      	bne.n	8003250 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3360      	adds	r3, #96	; 0x60
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	333f      	adds	r3, #63	; 0x3f
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d00a      	beq.n	8003190 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	333f      	adds	r3, #63	; 0x3f
 8003188:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	f040 8100 	bne.w	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d113      	bne.n	80031c0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3355      	adds	r3, #85	; 0x55
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	f083 0301 	eor.w	r3, r3, #1
 80031ac:	b2d8      	uxtb	r0, r3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3355      	adds	r3, #85	; 0x55
 80031bc:	4602      	mov	r2, r0
 80031be:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 80e3 	bne.w	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	334c      	adds	r3, #76	; 0x4c
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80d8 	beq.w	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	334c      	adds	r3, #76	; 0x4c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	202c      	movs	r0, #44	; 0x2c
 80031f6:	fb00 f202 	mul.w	r2, r0, r2
 80031fa:	440a      	add	r2, r1
 80031fc:	3240      	adds	r2, #64	; 0x40
 80031fe:	8812      	ldrh	r2, [r2, #0]
 8003200:	4413      	add	r3, r2
 8003202:	3b01      	subs	r3, #1
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	202c      	movs	r0, #44	; 0x2c
 800320a:	fb00 f202 	mul.w	r2, r0, r2
 800320e:	440a      	add	r2, r1
 8003210:	3240      	adds	r2, #64	; 0x40
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	fbb3 f3f2 	udiv	r3, r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80b5 	beq.w	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3355      	adds	r3, #85	; 0x55
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	f083 0301 	eor.w	r3, r3, #1
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3355      	adds	r3, #85	; 0x55
 800324a:	4602      	mov	r2, r0
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e09f      	b.n	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	3361      	adds	r3, #97	; 0x61
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d109      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3360      	adds	r3, #96	; 0x60
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e08b      	b.n	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3361      	adds	r3, #97	; 0x61
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d109      	bne.n	80032a0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	212c      	movs	r1, #44	; 0x2c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	3360      	adds	r3, #96	; 0x60
 800329a:	2202      	movs	r2, #2
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e077      	b.n	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	3361      	adds	r3, #97	; 0x61
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d109      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3360      	adds	r3, #96	; 0x60
 80032c2:	2205      	movs	r2, #5
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e063      	b.n	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3361      	adds	r3, #97	; 0x61
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d009      	beq.n	80032f0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3361      	adds	r3, #97	; 0x61
 80032ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d14f      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	335c      	adds	r3, #92	; 0x5c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	202c      	movs	r0, #44	; 0x2c
 8003308:	fb00 f303 	mul.w	r3, r0, r3
 800330c:	440b      	add	r3, r1
 800330e:	335c      	adds	r3, #92	; 0x5c
 8003310:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	335c      	adds	r3, #92	; 0x5c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d912      	bls.n	800334c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	335c      	adds	r3, #92	; 0x5c
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3360      	adds	r3, #96	; 0x60
 8003346:	2204      	movs	r2, #4
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e021      	b.n	8003390 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3360      	adds	r3, #96	; 0x60
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003374:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800337c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	461a      	mov	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	461a      	mov	r2, r3
 800339e:	2302      	movs	r3, #2
 80033a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	b2d9      	uxtb	r1, r3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	202c      	movs	r0, #44	; 0x2c
 80033ac:	fb00 f303 	mul.w	r3, r0, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3360      	adds	r3, #96	; 0x60
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f005 fc89 	bl	8008cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033be:	bf00      	nop
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08a      	sub	sp, #40	; 0x28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	0c5b      	lsrs	r3, r3, #17
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d004      	beq.n	800340c <HCD_RXQLVL_IRQHandler+0x46>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b05      	cmp	r3, #5
 8003406:	f000 80a9 	beq.w	800355c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800340a:	e0aa      	b.n	8003562 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80a6 	beq.w	8003560 <HCD_RXQLVL_IRQHandler+0x19a>
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3344      	adds	r3, #68	; 0x44
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 809b 	beq.w	8003560 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3350      	adds	r3, #80	; 0x50
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	441a      	add	r2, r3
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	202c      	movs	r0, #44	; 0x2c
 8003444:	fb00 f303 	mul.w	r3, r0, r3
 8003448:	440b      	add	r3, r1
 800344a:	334c      	adds	r3, #76	; 0x4c
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d87a      	bhi.n	8003548 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3344      	adds	r3, #68	; 0x44
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	b292      	uxth	r2, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f002 fce2 	bl	8005e34 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3344      	adds	r3, #68	; 0x44
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	441a      	add	r2, r3
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	202c      	movs	r0, #44	; 0x2c
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	440b      	add	r3, r1
 8003490:	3344      	adds	r3, #68	; 0x44
 8003492:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3350      	adds	r3, #80	; 0x50
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	441a      	add	r2, r3
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	202c      	movs	r0, #44	; 0x2c
 80034ae:	fb00 f303 	mul.w	r3, r0, r3
 80034b2:	440b      	add	r3, r1
 80034b4:	3350      	adds	r3, #80	; 0x50
 80034b6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	0cdb      	lsrs	r3, r3, #19
 80034c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034cc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	3340      	adds	r3, #64	; 0x40
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d13c      	bne.n	8003560 <HCD_RXQLVL_IRQHandler+0x19a>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d039      	beq.n	8003560 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003502:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800350a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	461a      	mov	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	3354      	adds	r3, #84	; 0x54
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2d8      	uxtb	r0, r3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3354      	adds	r3, #84	; 0x54
 8003542:	4602      	mov	r2, r0
 8003544:	701a      	strb	r2, [r3, #0]
      break;
 8003546:	e00b      	b.n	8003560 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3360      	adds	r3, #96	; 0x60
 8003556:	2204      	movs	r2, #4
 8003558:	701a      	strb	r2, [r3, #0]
      break;
 800355a:	e001      	b.n	8003560 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800355c:	bf00      	nop
 800355e:	e000      	b.n	8003562 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003560:	bf00      	nop
  }
}
 8003562:	bf00      	nop
 8003564:	3728      	adds	r7, #40	; 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003596:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d10b      	bne.n	80035ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f005 fb73 	bl	8008c98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d132      	bne.n	800362a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d126      	bne.n	8003624 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d113      	bne.n	8003606 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035e8:	d106      	bne.n	80035f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2102      	movs	r1, #2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 fd8d 	bl	8006110 <USB_InitFSLSPClkSel>
 80035f6:	e011      	b.n	800361c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 fd86 	bl	8006110 <USB_InitFSLSPClkSel>
 8003604:	e00a      	b.n	800361c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d106      	bne.n	800361c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003614:	461a      	mov	r2, r3
 8003616:	f64e 2360 	movw	r3, #60000	; 0xea60
 800361a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f005 fb65 	bl	8008cec <HAL_HCD_PortEnabled_Callback>
 8003622:	e002      	b.n	800362a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f005 fb6f 	bl	8008d08 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b20      	cmp	r3, #32
 8003632:	d103      	bne.n	800363c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f043 0320 	orr.w	r3, r3, #32
 800363a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e12b      	b.n	80038ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd f85c 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036b4:	f001 fa20 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 80036b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4a81      	ldr	r2, [pc, #516]	; (80038c4 <HAL_I2C_Init+0x274>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d807      	bhi.n	80036d4 <HAL_I2C_Init+0x84>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a80      	ldr	r2, [pc, #512]	; (80038c8 <HAL_I2C_Init+0x278>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	bf94      	ite	ls
 80036cc:	2301      	movls	r3, #1
 80036ce:	2300      	movhi	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e006      	b.n	80036e2 <HAL_I2C_Init+0x92>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a7d      	ldr	r2, [pc, #500]	; (80038cc <HAL_I2C_Init+0x27c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	bf94      	ite	ls
 80036dc:	2301      	movls	r3, #1
 80036de:	2300      	movhi	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0e7      	b.n	80038ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a78      	ldr	r2, [pc, #480]	; (80038d0 <HAL_I2C_Init+0x280>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	0c9b      	lsrs	r3, r3, #18
 80036f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a6a      	ldr	r2, [pc, #424]	; (80038c4 <HAL_I2C_Init+0x274>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d802      	bhi.n	8003724 <HAL_I2C_Init+0xd4>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	3301      	adds	r3, #1
 8003722:	e009      	b.n	8003738 <HAL_I2C_Init+0xe8>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	4a69      	ldr	r2, [pc, #420]	; (80038d4 <HAL_I2C_Init+0x284>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	3301      	adds	r3, #1
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	430b      	orrs	r3, r1
 800373e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800374a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	495c      	ldr	r1, [pc, #368]	; (80038c4 <HAL_I2C_Init+0x274>)
 8003754:	428b      	cmp	r3, r1
 8003756:	d819      	bhi.n	800378c <HAL_I2C_Init+0x13c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e59      	subs	r1, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fbb1 f3f3 	udiv	r3, r1, r3
 8003766:	1c59      	adds	r1, r3, #1
 8003768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800376c:	400b      	ands	r3, r1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_I2C_Init+0x138>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1e59      	subs	r1, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003786:	e051      	b.n	800382c <HAL_I2C_Init+0x1dc>
 8003788:	2304      	movs	r3, #4
 800378a:	e04f      	b.n	800382c <HAL_I2C_Init+0x1dc>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d111      	bne.n	80037b8 <HAL_I2C_Init+0x168>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e58      	subs	r0, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	440b      	add	r3, r1
 80037a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e012      	b.n	80037de <HAL_I2C_Init+0x18e>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1e58      	subs	r0, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	0099      	lsls	r1, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Init+0x196>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e022      	b.n	800382c <HAL_I2C_Init+0x1dc>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10e      	bne.n	800380c <HAL_I2C_Init+0x1bc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1e58      	subs	r0, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6859      	ldr	r1, [r3, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	440b      	add	r3, r1
 80037fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003800:	3301      	adds	r3, #1
 8003802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	e00f      	b.n	800382c <HAL_I2C_Init+0x1dc>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	0099      	lsls	r1, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	6809      	ldr	r1, [r1, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800385a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6911      	ldr	r1, [r2, #16]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	430b      	orrs	r3, r1
 800386e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	000186a0 	.word	0x000186a0
 80038c8:	001e847f 	.word	0x001e847f
 80038cc:	003d08ff 	.word	0x003d08ff
 80038d0:	431bde83 	.word	0x431bde83
 80038d4:	10624dd3 	.word	0x10624dd3

080038d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e128      	b.n	8003b3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a90      	ldr	r2, [pc, #576]	; (8003b44 <HAL_I2S_Init+0x26c>)
 8003902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fc ffbb 	bl	8000880 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003920:	f023 030f 	bic.w	r3, r3, #15
 8003924:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2202      	movs	r2, #2
 800392c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d060      	beq.n	80039f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800393e:	2310      	movs	r3, #16
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e001      	b.n	8003948 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003944:	2320      	movs	r3, #32
 8003946:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b20      	cmp	r3, #32
 800394e:	d802      	bhi.n	8003956 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003956:	2001      	movs	r0, #1
 8003958:	f001 f9e6 	bl	8004d28 <HAL_RCCEx_GetPeriphCLKFreq>
 800395c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003966:	d125      	bne.n	80039b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	fbb2 f2f3 	udiv	r2, r2, r3
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	3305      	adds	r3, #5
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	e01f      	b.n	80039d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	fbb2 f2f3 	udiv	r2, r2, r3
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	461a      	mov	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	3305      	adds	r3, #5
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	e00e      	b.n	80039d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	3305      	adds	r3, #5
 80039d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4a5c      	ldr	r2, [pc, #368]	; (8003b48 <HAL_I2S_Init+0x270>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	08db      	lsrs	r3, r3, #3
 80039dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039f8:	2302      	movs	r3, #2
 80039fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d902      	bls.n	8003a0c <HAL_I2S_Init+0x134>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2bff      	cmp	r3, #255	; 0xff
 8003a0a:	d907      	bls.n	8003a1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f043 0210 	orr.w	r2, r3, #16
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e08f      	b.n	8003b3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	ea42 0103 	orr.w	r1, r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a3a:	f023 030f 	bic.w	r3, r3, #15
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6851      	ldr	r1, [r2, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6892      	ldr	r2, [r2, #8]
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68d2      	ldr	r2, [r2, #12]
 8003a4c:	4311      	orrs	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6992      	ldr	r2, [r2, #24]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d161      	bne.n	8003b2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_I2S_Init+0x274>)
 8003a6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a37      	ldr	r2, [pc, #220]	; (8003b50 <HAL_I2S_Init+0x278>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_I2S_Init+0x1a4>
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <HAL_I2S_Init+0x27c>)
 8003a7a:	e001      	b.n	8003a80 <HAL_I2S_Init+0x1a8>
 8003a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	4932      	ldr	r1, [pc, #200]	; (8003b50 <HAL_I2S_Init+0x278>)
 8003a88:	428a      	cmp	r2, r1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2S_Init+0x1b8>
 8003a8c:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <HAL_I2S_Init+0x27c>)
 8003a8e:	e001      	b.n	8003a94 <HAL_I2S_Init+0x1bc>
 8003a90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a98:	f023 030f 	bic.w	r3, r3, #15
 8003a9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <HAL_I2S_Init+0x278>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_I2S_Init+0x1d4>
 8003aa8:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <HAL_I2S_Init+0x27c>)
 8003aaa:	e001      	b.n	8003ab0 <HAL_I2S_Init+0x1d8>
 8003aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <HAL_I2S_Init+0x278>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_I2S_Init+0x1ea>
 8003abe:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <HAL_I2S_Init+0x27c>)
 8003ac0:	e001      	b.n	8003ac6 <HAL_I2S_Init+0x1ee>
 8003ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad2:	d003      	beq.n	8003adc <HAL_I2S_Init+0x204>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e001      	b.n	8003ae8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003af2:	4313      	orrs	r3, r2
 8003af4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003afc:	4313      	orrs	r3, r2
 8003afe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x24c>
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x250>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b28:	897a      	ldrh	r2, [r7, #10]
 8003b2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	08003c4f 	.word	0x08003c4f
 8003b48:	cccccccd 	.word	0xcccccccd
 8003b4c:	08003d65 	.word	0x08003d65
 8003b50:	40003800 	.word	0x40003800
 8003b54:	40003400 	.word	0x40003400

08003b58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10e      	bne.n	8003be8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffb8 	bl	8003b58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	b292      	uxth	r2, r2
 8003c04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	1c9a      	adds	r2, r3, #2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10e      	bne.n	8003c46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff93 	bl	8003b6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d13a      	bne.n	8003ce0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d109      	bne.n	8003c88 <I2S_IRQHandler+0x3a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d102      	bne.n	8003c88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ffb4 	bl	8003bf0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d126      	bne.n	8003ce0 <I2S_IRQHandler+0x92>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d11f      	bne.n	8003ce0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f043 0202 	orr.w	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ff50 	bl	8003b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d136      	bne.n	8003d5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d109      	bne.n	8003d0a <I2S_IRQHandler+0xbc>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d102      	bne.n	8003d0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff45 	bl	8003b94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d122      	bne.n	8003d5a <I2S_IRQHandler+0x10c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d11b      	bne.n	8003d5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	f043 0204 	orr.w	r2, r3, #4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff13 	bl	8003b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a92      	ldr	r2, [pc, #584]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d7e:	4b92      	ldr	r3, [pc, #584]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d80:	e001      	b.n	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a8b      	ldr	r2, [pc, #556]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d9c:	4b8a      	ldr	r3, [pc, #552]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d9e:	e001      	b.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db0:	d004      	beq.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 8099 	bne.w	8003eee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d107      	bne.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f925 	bl	8004020 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d107      	bne.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9c8 	bl	8004180 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d13a      	bne.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d035      	beq.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a6e      	ldr	r2, [pc, #440]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e0e:	4b6e      	ldr	r3, [pc, #440]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e10:	e001      	b.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4969      	ldr	r1, [pc, #420]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1e:	428b      	cmp	r3, r1
 8003e20:	d101      	bne.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e22:	4b69      	ldr	r3, [pc, #420]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e24:	e001      	b.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fe88 	bl	8003b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	f040 80c3 	bne.w	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80bd 	beq.w	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a49      	ldr	r2, [pc, #292]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ea2:	4b49      	ldr	r3, [pc, #292]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea4:	e001      	b.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4944      	ldr	r1, [pc, #272]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb2:	428b      	cmp	r3, r1
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003eb6:	4b44      	ldr	r3, [pc, #272]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ec2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f043 0204 	orr.w	r2, r3, #4
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fe4a 	bl	8003b80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eec:	e089      	b.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d107      	bne.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8be 	bl	8004084 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d107      	bne.n	8003f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f8fd 	bl	800411c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d12f      	bne.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02a      	beq.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f50:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f52:	e001      	b.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4919      	ldr	r1, [pc, #100]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f60:	428b      	cmp	r3, r1
 8003f62:	d101      	bne.n	8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f64:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f66:	e001      	b.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fdfa 	bl	8003b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d136      	bne.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d031      	beq.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fac:	e001      	b.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4902      	ldr	r1, [pc, #8]	; (8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fba:	428b      	cmp	r3, r1
 8003fbc:	d106      	bne.n	8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fbe:	4b02      	ldr	r3, [pc, #8]	; (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc0:	e006      	b.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003fc2:	bf00      	nop
 8003fc4:	40003800 	.word	0x40003800
 8003fc8:	40003400 	.word	0x40003400
 8003fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fe4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fdc0 	bl	8003b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004000:	e000      	b.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004002:	bf00      	nop
}
 8004004:	bf00      	nop
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	1c99      	adds	r1, r3, #2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6251      	str	r1, [r2, #36]	; 0x24
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d113      	bne.n	800407a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004060:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ffc9 	bl	800400c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	1c99      	adds	r1, r3, #2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6251      	str	r1, [r2, #36]	; 0x24
 8004096:	8819      	ldrh	r1, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <I2SEx_TxISR_I2SExt+0x90>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <I2SEx_TxISR_I2SExt+0x22>
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <I2SEx_TxISR_I2SExt+0x94>)
 80040a4:	e001      	b.n	80040aa <I2SEx_TxISR_I2SExt+0x26>
 80040a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040aa:	460a      	mov	r2, r1
 80040ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d121      	bne.n	800410a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <I2SEx_TxISR_I2SExt+0x90>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d101      	bne.n	80040d4 <I2SEx_TxISR_I2SExt+0x50>
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <I2SEx_TxISR_I2SExt+0x94>)
 80040d2:	e001      	b.n	80040d8 <I2SEx_TxISR_I2SExt+0x54>
 80040d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	490d      	ldr	r1, [pc, #52]	; (8004114 <I2SEx_TxISR_I2SExt+0x90>)
 80040e0:	428b      	cmp	r3, r1
 80040e2:	d101      	bne.n	80040e8 <I2SEx_TxISR_I2SExt+0x64>
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <I2SEx_TxISR_I2SExt+0x94>)
 80040e6:	e001      	b.n	80040ec <I2SEx_TxISR_I2SExt+0x68>
 80040e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff81 	bl	800400c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40003800 	.word	0x40003800
 8004118:	40003400 	.word	0x40003400

0800411c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68d8      	ldr	r0, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	1c99      	adds	r1, r3, #2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004134:	b282      	uxth	r2, r0
 8004136:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d113      	bne.n	8004178 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800415e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff4a 	bl	800400c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a20      	ldr	r2, [pc, #128]	; (8004210 <I2SEx_RxISR_I2SExt+0x90>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <I2SEx_RxISR_I2SExt+0x16>
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <I2SEx_RxISR_I2SExt+0x94>)
 8004194:	e001      	b.n	800419a <I2SEx_RxISR_I2SExt+0x1a>
 8004196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419a:	68d8      	ldr	r0, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	1c99      	adds	r1, r3, #2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041a6:	b282      	uxth	r2, r0
 80041a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d121      	bne.n	8004206 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <I2SEx_RxISR_I2SExt+0x90>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <I2SEx_RxISR_I2SExt+0x50>
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <I2SEx_RxISR_I2SExt+0x94>)
 80041ce:	e001      	b.n	80041d4 <I2SEx_RxISR_I2SExt+0x54>
 80041d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	490d      	ldr	r1, [pc, #52]	; (8004210 <I2SEx_RxISR_I2SExt+0x90>)
 80041dc:	428b      	cmp	r3, r1
 80041de:	d101      	bne.n	80041e4 <I2SEx_RxISR_I2SExt+0x64>
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <I2SEx_RxISR_I2SExt+0x94>)
 80041e2:	e001      	b.n	80041e8 <I2SEx_RxISR_I2SExt+0x68>
 80041e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff03 	bl	800400c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40003800 	.word	0x40003800
 8004214:	40003400 	.word	0x40003400

08004218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e267      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d075      	beq.n	8004322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004236:	4b88      	ldr	r3, [pc, #544]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00c      	beq.n	800425c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b85      	ldr	r3, [pc, #532]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424a:	2b08      	cmp	r3, #8
 800424c:	d112      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b82      	ldr	r3, [pc, #520]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425a:	d10b      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	4b7e      	ldr	r3, [pc, #504]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05b      	beq.n	8004320 <HAL_RCC_OscConfig+0x108>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d157      	bne.n	8004320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e242      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d106      	bne.n	800428c <HAL_RCC_OscConfig+0x74>
 800427e:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e01d      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x98>
 8004296:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6c      	ldr	r2, [pc, #432]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 80042b0:	4b69      	ldr	r3, [pc, #420]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a68      	ldr	r2, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b66      	ldr	r3, [pc, #408]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a65      	ldr	r2, [pc, #404]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fc ff4a 	bl	8001168 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fc ff46 	bl	8001168 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e207      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b5b      	ldr	r3, [pc, #364]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xc0>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fc ff36 	bl	8001168 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fc ff32 	bl	8001168 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1f3      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0xe8>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d063      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432e:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004342:	2b08      	cmp	r3, #8
 8004344:	d11c      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d116      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e1c7      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4937      	ldr	r1, [pc, #220]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	e03a      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_RCC_OscConfig+0x244>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fc feeb 	bl	8001168 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004396:	f7fc fee7 	bl	8001168 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1a8      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4925      	ldr	r1, [pc, #148]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCC_OscConfig+0x244>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fc feca 	bl	8001168 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d8:	f7fc fec6 	bl	8001168 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e187      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d036      	beq.n	8004470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <HAL_RCC_OscConfig+0x248>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fc feaa 	bl	8001168 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004418:	f7fc fea6 	bl	8001168 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e167      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800442c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x200>
 8004436:	e01b      	b.n	8004470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_OscConfig+0x248>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443e:	f7fc fe93 	bl	8001168 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	e00e      	b.n	8004464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004446:	f7fc fe8f 	bl	8001168 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d907      	bls.n	8004464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e150      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
 8004458:	40023800 	.word	0x40023800
 800445c:	42470000 	.word	0x42470000
 8004460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	4b88      	ldr	r3, [pc, #544]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ea      	bne.n	8004446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8097 	beq.w	80045ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004482:	4b81      	ldr	r3, [pc, #516]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	4b7d      	ldr	r3, [pc, #500]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a7c      	ldr	r2, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
 800449e:	4b7a      	ldr	r3, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	4b77      	ldr	r3, [pc, #476]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d118      	bne.n	80044ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ba:	4b74      	ldr	r3, [pc, #464]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a73      	ldr	r2, [pc, #460]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c6:	f7fc fe4f 	bl	8001168 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ce:	f7fc fe4b 	bl	8001168 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e10c      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x2ea>
 80044f4:	4b64      	ldr	r3, [pc, #400]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	e01c      	b.n	800453c <HAL_RCC_OscConfig+0x324>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b05      	cmp	r3, #5
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x30c>
 800450a:	4b5f      	ldr	r3, [pc, #380]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a5e      	ldr	r2, [pc, #376]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	4b5c      	ldr	r3, [pc, #368]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a5b      	ldr	r2, [pc, #364]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0x324>
 8004524:	4b58      	ldr	r3, [pc, #352]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a57      	ldr	r2, [pc, #348]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	4b55      	ldr	r3, [pc, #340]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a54      	ldr	r2, [pc, #336]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004536:	f023 0304 	bic.w	r3, r3, #4
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fc fe10 	bl	8001168 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454c:	f7fc fe0c 	bl	8001168 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0cb      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	4b49      	ldr	r3, [pc, #292]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ee      	beq.n	800454c <HAL_RCC_OscConfig+0x334>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004570:	f7fc fdfa 	bl	8001168 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fc fdf6 	bl	8001168 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0b5      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458e:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ee      	bne.n	8004578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a38      	ldr	r2, [pc, #224]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80a1 	beq.w	80046f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045b6:	4b34      	ldr	r3, [pc, #208]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d05c      	beq.n	800467c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d141      	bne.n	800464e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fc fdca 	bl	8001168 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fc fdc6 	bl	8001168 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e087      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b27      	ldr	r3, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	3b01      	subs	r3, #1
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	491b      	ldr	r1, [pc, #108]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fc fd9f 	bl	8001168 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462e:	f7fc fd9b 	bl	8001168 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e05c      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x416>
 800464c:	e054      	b.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fc fd88 	bl	8001168 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465c:	f7fc fd84 	bl	8001168 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e045      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x444>
 800467a:	e03d      	b.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e038      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
 8004688:	40023800 	.word	0x40023800
 800468c:	40007000 	.word	0x40007000
 8004690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4ec>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d028      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d121      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d11a      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d111      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	3b01      	subs	r3, #1
 80046de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800

08004708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0cc      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800471c:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d90c      	bls.n	8004744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b8      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800475c:	4b59      	ldr	r3, [pc, #356]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004774:	4b53      	ldr	r3, [pc, #332]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a52      	ldr	r2, [pc, #328]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	494d      	ldr	r1, [pc, #308]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d044      	beq.n	8004828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d119      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e07f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e067      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4934      	ldr	r1, [pc, #208]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f8:	f7fc fcb6 	bl	8001168 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fc fcb2 	bl	8001168 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e04f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20c      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e032      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4916      	ldr	r1, [pc, #88]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	490e      	ldr	r1, [pc, #56]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800488e:	f000 f821 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004892:	4602      	mov	r2, r0
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	490a      	ldr	r1, [pc, #40]	; (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	5ccb      	ldrb	r3, [r1, r3]
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	4a09      	ldr	r2, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc fc16 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023c00 	.word	0x40023c00
 80048c4:	40023800 	.word	0x40023800
 80048c8:	080096f8 	.word	0x080096f8
 80048cc:	20000000 	.word	0x20000000
 80048d0:	20000004 	.word	0x20000004

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b094      	sub	sp, #80	; 0x50
 80048da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
 80048e0:	2300      	movs	r3, #0
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	2300      	movs	r3, #0
 80048e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ec:	4b79      	ldr	r3, [pc, #484]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d00d      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x40>
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	f200 80e1 	bhi.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x34>
 8004902:	2b04      	cmp	r3, #4
 8004904:	d003      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x3a>
 8004906:	e0db      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800490c:	e0db      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800490e:	4b73      	ldr	r3, [pc, #460]	; (8004adc <HAL_RCC_GetSysClockFreq+0x208>)
 8004910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004912:	e0d8      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004914:	4b6f      	ldr	r3, [pc, #444]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800491e:	4b6d      	ldr	r3, [pc, #436]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d063      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	2200      	movs	r2, #0
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
 8004934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
 800493e:	2300      	movs	r3, #0
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
 8004942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	f04f 0000 	mov.w	r0, #0
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	0159      	lsls	r1, r3, #5
 8004954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004958:	0150      	lsls	r0, r2, #5
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4621      	mov	r1, r4
 8004960:	1a51      	subs	r1, r2, r1
 8004962:	6139      	str	r1, [r7, #16]
 8004964:	4629      	mov	r1, r5
 8004966:	eb63 0301 	sbc.w	r3, r3, r1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004978:	4659      	mov	r1, fp
 800497a:	018b      	lsls	r3, r1, #6
 800497c:	4651      	mov	r1, sl
 800497e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004982:	4651      	mov	r1, sl
 8004984:	018a      	lsls	r2, r1, #6
 8004986:	4651      	mov	r1, sl
 8004988:	ebb2 0801 	subs.w	r8, r2, r1
 800498c:	4659      	mov	r1, fp
 800498e:	eb63 0901 	sbc.w	r9, r3, r1
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a6:	4690      	mov	r8, r2
 80049a8:	4699      	mov	r9, r3
 80049aa:	4623      	mov	r3, r4
 80049ac:	eb18 0303 	adds.w	r3, r8, r3
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	462b      	mov	r3, r5
 80049b4:	eb49 0303 	adc.w	r3, r9, r3
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049c6:	4629      	mov	r1, r5
 80049c8:	024b      	lsls	r3, r1, #9
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049d0:	4621      	mov	r1, r4
 80049d2:	024a      	lsls	r2, r1, #9
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	2200      	movs	r2, #0
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e4:	f7fb fbf8 	bl	80001d8 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f0:	e058      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	2200      	movs	r2, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	4611      	mov	r1, r2
 80049fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	2300      	movs	r3, #0
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	f04f 0000 	mov.w	r0, #0
 8004a14:	f04f 0100 	mov.w	r1, #0
 8004a18:	0159      	lsls	r1, r3, #5
 8004a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1e:	0150      	lsls	r0, r2, #5
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4641      	mov	r1, r8
 8004a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a44:	ebb2 040a 	subs.w	r4, r2, sl
 8004a48:	eb63 050b 	sbc.w	r5, r3, fp
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	00eb      	lsls	r3, r5, #3
 8004a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5a:	00e2      	lsls	r2, r4, #3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	18e3      	adds	r3, r4, r3
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	464b      	mov	r3, r9
 8004a68:	eb45 0303 	adc.w	r3, r5, r3
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	028b      	lsls	r3, r1, #10
 8004a7e:	4621      	mov	r1, r4
 8004a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a84:	4621      	mov	r1, r4
 8004a86:	028a      	lsls	r2, r1, #10
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8e:	2200      	movs	r2, #0
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	61fa      	str	r2, [r7, #28]
 8004a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a98:	f7fb fb9e 	bl	80001d8 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3750      	adds	r7, #80	; 0x50
 8004acc:	46bd      	mov	sp, r7
 8004ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	007a1200 	.word	0x007a1200

08004ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000000 	.word	0x20000000

08004af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004afc:	f7ff fff0 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0a9b      	lsrs	r3, r3, #10
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4903      	ldr	r1, [pc, #12]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	08009708 	.word	0x08009708

08004b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b24:	f7ff ffdc 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0b5b      	lsrs	r3, r3, #13
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4903      	ldr	r1, [pc, #12]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40023800 	.word	0x40023800
 8004b44:	08009708 	.word	0x08009708

08004b48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d038      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b70:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b76:	f7fc faf7 	bl	8001168 <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b7e:	f7fc faf3 	bl	8001168 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0bd      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b90:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	019b      	lsls	r3, r3, #6
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	071b      	lsls	r3, r3, #28
 8004bae:	495a      	ldr	r1, [pc, #360]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb6:	4b57      	ldr	r3, [pc, #348]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bbc:	f7fc fad4 	bl	8001168 <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bc4:	f7fc fad0 	bl	8001168 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e09a      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd6:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8083 	beq.w	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	4b48      	ldr	r3, [pc, #288]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	4a47      	ldr	r2, [pc, #284]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8004c00:	4b45      	ldr	r3, [pc, #276]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c0c:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a42      	ldr	r2, [pc, #264]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c16:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c18:	f7fc faa6 	bl	8001168 <HAL_GetTick>
 8004c1c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fc faa2 	bl	8001168 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e06c      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02f      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d028      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c64:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c72:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d114      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fc fa70 	bl	8001168 <HAL_GetTick>
 8004c88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8c:	f7fc fa6c 	bl	8001168 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e034      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0ee      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004cbc:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd0:	4911      	ldr	r1, [pc, #68]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
 8004cd6:	e005      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ce2:	6093      	str	r3, [r2, #8]
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf0:	4909      	ldr	r1, [pc, #36]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7d1a      	ldrb	r2, [r3, #20]
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d08:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	42470068 	.word	0x42470068
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42470e40 	.word	0x42470e40
 8004d24:	424711e0 	.word	0x424711e0

08004d28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d140      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d46:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d131      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	; (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d5e:	617b      	str	r3, [r7, #20]
          break;
 8004d60:	e031      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d6e:	d109      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7a:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e008      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db0:	0f1b      	lsrs	r3, r3, #28
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
          break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
          break;
 8004dc4:	bf00      	nop
        }
      }
      break;
 8004dc6:	bf00      	nop
    }
  }
  return frequency;
 8004dc8:	697b      	ldr	r3, [r7, #20]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	00bb8000 	.word	0x00bb8000
 8004de0:	007a1200 	.word	0x007a1200
 8004de4:	00f42400 	.word	0x00f42400

08004de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e07b      	b.n	8004ef2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d108      	bne.n	8004e14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0a:	d009      	beq.n	8004e20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61da      	str	r2, [r3, #28]
 8004e12:	e005      	b.n	8004e20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fb ff0c 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	ea42 0103 	orr.w	r1, r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	f003 0104 	and.w	r1, r3, #4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0210 	and.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e03f      	b.n	8004f8c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fb ffc3 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2224      	movs	r2, #36	; 0x24
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fb92 	bl	8005668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08c      	sub	sp, #48	; 0x30
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d165      	bne.n	800507a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_UART_Transmit_DMA+0x26>
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e05e      	b.n	800507c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_UART_Transmit_DMA+0x38>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e057      	b.n	800507c <HAL_UART_Transmit_DMA+0xe8>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2221      	movs	r2, #33	; 0x21
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff8:	4a22      	ldr	r2, [pc, #136]	; (8005084 <HAL_UART_Transmit_DMA+0xf0>)
 8004ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	4a21      	ldr	r2, [pc, #132]	; (8005088 <HAL_UART_Transmit_DMA+0xf4>)
 8005002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	4a20      	ldr	r2, [pc, #128]	; (800508c <HAL_UART_Transmit_DMA+0xf8>)
 800500a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005010:	2200      	movs	r2, #0
 8005012:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005014:	f107 0308 	add.w	r3, r7, #8
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3304      	adds	r3, #4
 8005028:	461a      	mov	r2, r3
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	f7fc fa8c 	bl	8001548 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005038:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	617b      	str	r3, [r7, #20]
   return(result);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005062:	627a      	str	r2, [r7, #36]	; 0x24
 8005064:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6a39      	ldr	r1, [r7, #32]
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e5      	bne.n	8005042 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3730      	adds	r7, #48	; 0x30
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	0800516d 	.word	0x0800516d
 8005088:	08005207 	.word	0x08005207
 800508c:	0800537f 	.word	0x0800537f

08005090 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d11d      	bne.n	80050e6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_UART_Receive_DMA+0x26>
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e016      	b.n	80050e8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_UART_Receive_DMA+0x38>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e00f      	b.n	80050e8 <HAL_UART_Receive_DMA+0x58>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	461a      	mov	r2, r3
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f999 	bl	8005414 <UART_Start_Receive_DMA>
 80050e2:	4603      	mov	r3, r0
 80050e4:	e000      	b.n	80050e8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b090      	sub	sp, #64	; 0x40
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d137      	bne.n	80051f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	2200      	movs	r2, #0
 800518c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800518e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	623b      	str	r3, [r7, #32]
   return(result);
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3314      	adds	r3, #20
 80051ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ae:	633a      	str	r2, [r7, #48]	; 0x30
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e5      	bne.n	800518e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
 80051da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e2:	61fa      	str	r2, [r7, #28]
 80051e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	69b9      	ldr	r1, [r7, #24]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	617b      	str	r3, [r7, #20]
   return(result);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e5      	bne.n	80051c2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051f6:	e002      	b.n	80051fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80051f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80051fa:	f7ff ff79 	bl	80050f0 <HAL_UART_TxCpltCallback>
}
 80051fe:	bf00      	nop
 8005200:	3740      	adds	r7, #64	; 0x40
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff ff75 	bl	8005104 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b09c      	sub	sp, #112	; 0x70
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d172      	bne.n	8005324 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800523e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005240:	2200      	movs	r2, #0
 8005242:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525a:	66bb      	str	r3, [r7, #104]	; 0x68
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005264:	65ba      	str	r2, [r7, #88]	; 0x58
 8005266:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800526a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	667b      	str	r3, [r7, #100]	; 0x64
 8005290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005298:	647a      	str	r2, [r7, #68]	; 0x44
 800529a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800529e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e5      	bne.n	8005278 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	623b      	str	r3, [r7, #32]
   return(result);
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c2:	663b      	str	r3, [r7, #96]	; 0x60
 80052c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052cc:	633a      	str	r2, [r7, #48]	; 0x30
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d119      	bne.n	8005324 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0310 	bic.w	r3, r3, #16
 8005306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005310:	61fa      	str	r2, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	2b01      	cmp	r3, #1
 800532a:	d106      	bne.n	800533a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005330:	4619      	mov	r1, r3
 8005332:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005334:	f7ff ff0e 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005338:	e002      	b.n	8005340 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800533a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800533c:	f7ff feec 	bl	8005118 <HAL_UART_RxCpltCallback>
}
 8005340:	bf00      	nop
 8005342:	3770      	adds	r7, #112	; 0x70
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	2b01      	cmp	r3, #1
 800535c:	d108      	bne.n	8005370 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	b29b      	uxth	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff fef3 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800536e:	e002      	b.n	8005376 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff fedb 	bl	800512c <HAL_UART_RxHalfCpltCallback>
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b21      	cmp	r3, #33	; 0x21
 80053b0:	d108      	bne.n	80053c4 <UART_DMAError+0x46>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2200      	movs	r2, #0
 80053bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80053be:	68b8      	ldr	r0, [r7, #8]
 80053c0:	f000 f8c6 	bl	8005550 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b22      	cmp	r3, #34	; 0x22
 80053e4:	d108      	bne.n	80053f8 <UART_DMAError+0x7a>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80053f2:	68b8      	ldr	r0, [r7, #8]
 80053f4:	f000 f8d4 	bl	80055a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f043 0210 	orr.w	r2, r3, #16
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005404:	68b8      	ldr	r0, [r7, #8]
 8005406:	f7ff fe9b 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b098      	sub	sp, #96	; 0x60
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2222      	movs	r2, #34	; 0x22
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	4a40      	ldr	r2, [pc, #256]	; (8005544 <UART_Start_Receive_DMA+0x130>)
 8005442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4a3f      	ldr	r2, [pc, #252]	; (8005548 <UART_Start_Receive_DMA+0x134>)
 800544a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	4a3e      	ldr	r2, [pc, #248]	; (800554c <UART_Start_Receive_DMA+0x138>)
 8005452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	2200      	movs	r2, #0
 800545a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	f7fc f868 	bl	8001548 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d019      	beq.n	80054d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80054c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3314      	adds	r3, #20
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3314      	adds	r3, #20
 80054f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e5      	bne.n	80054d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3314      	adds	r3, #20
 800550c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	617b      	str	r3, [r7, #20]
   return(result);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551c:	653b      	str	r3, [r7, #80]	; 0x50
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005526:	627a      	str	r2, [r7, #36]	; 0x24
 8005528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6a39      	ldr	r1, [r7, #32]
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	61fb      	str	r3, [r7, #28]
   return(result);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e5      	bne.n	8005506 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3760      	adds	r7, #96	; 0x60
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	08005223 	.word	0x08005223
 8005548:	08005349 	.word	0x08005349
 800554c:	0800537f 	.word	0x0800537f

08005550 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	60bb      	str	r3, [r7, #8]
   return(result);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	61ba      	str	r2, [r7, #24]
 800557a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6979      	ldr	r1, [r7, #20]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	613b      	str	r3, [r7, #16]
   return(result);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005594:	bf00      	nop
 8005596:	3724      	adds	r7, #36	; 0x24
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b095      	sub	sp, #84	; 0x54
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055c8:	643a      	str	r2, [r7, #64]	; 0x40
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3314      	adds	r3, #20
 80055fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e5      	bne.n	80055dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	2b01      	cmp	r3, #1
 8005616:	d119      	bne.n	800564c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	60bb      	str	r3, [r7, #8]
   return(result);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005638:	61ba      	str	r2, [r7, #24]
 800563a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6979      	ldr	r1, [r7, #20]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	613b      	str	r3, [r7, #16]
   return(result);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800565a:	bf00      	nop
 800565c:	3754      	adds	r7, #84	; 0x54
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800566c:	b0c0      	sub	sp, #256	; 0x100
 800566e:	af00      	add	r7, sp, #0
 8005670:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	68d9      	ldr	r1, [r3, #12]
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	ea40 0301 	orr.w	r3, r0, r1
 8005690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	431a      	orrs	r2, r3
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056c0:	f021 010c 	bic.w	r1, r1, #12
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056ce:	430b      	orrs	r3, r1
 80056d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	6999      	ldr	r1, [r3, #24]
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	ea40 0301 	orr.w	r3, r0, r1
 80056ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b8f      	ldr	r3, [pc, #572]	; (8005934 <UART_SetConfig+0x2cc>)
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d005      	beq.n	8005708 <UART_SetConfig+0xa0>
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b8d      	ldr	r3, [pc, #564]	; (8005938 <UART_SetConfig+0x2d0>)
 8005704:	429a      	cmp	r2, r3
 8005706:	d104      	bne.n	8005712 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005708:	f7ff fa0a 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 800570c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005710:	e003      	b.n	800571a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005712:	f7ff f9f1 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8005716:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005724:	f040 810c 	bne.w	8005940 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800572c:	2200      	movs	r2, #0
 800572e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005732:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005736:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800573a:	4622      	mov	r2, r4
 800573c:	462b      	mov	r3, r5
 800573e:	1891      	adds	r1, r2, r2
 8005740:	65b9      	str	r1, [r7, #88]	; 0x58
 8005742:	415b      	adcs	r3, r3
 8005744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005746:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800574a:	4621      	mov	r1, r4
 800574c:	eb12 0801 	adds.w	r8, r2, r1
 8005750:	4629      	mov	r1, r5
 8005752:	eb43 0901 	adc.w	r9, r3, r1
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576a:	4690      	mov	r8, r2
 800576c:	4699      	mov	r9, r3
 800576e:	4623      	mov	r3, r4
 8005770:	eb18 0303 	adds.w	r3, r8, r3
 8005774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005778:	462b      	mov	r3, r5
 800577a:	eb49 0303 	adc.w	r3, r9, r3
 800577e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800578e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005796:	460b      	mov	r3, r1
 8005798:	18db      	adds	r3, r3, r3
 800579a:	653b      	str	r3, [r7, #80]	; 0x50
 800579c:	4613      	mov	r3, r2
 800579e:	eb42 0303 	adc.w	r3, r2, r3
 80057a2:	657b      	str	r3, [r7, #84]	; 0x54
 80057a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057ac:	f7fa fd14 	bl	80001d8 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4b61      	ldr	r3, [pc, #388]	; (800593c <UART_SetConfig+0x2d4>)
 80057b6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	011c      	lsls	r4, r3, #4
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80057d8:	415b      	adcs	r3, r3
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057e0:	4641      	mov	r1, r8
 80057e2:	eb12 0a01 	adds.w	sl, r2, r1
 80057e6:	4649      	mov	r1, r9
 80057e8:	eb43 0b01 	adc.w	fp, r3, r1
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005800:	4692      	mov	sl, r2
 8005802:	469b      	mov	fp, r3
 8005804:	4643      	mov	r3, r8
 8005806:	eb1a 0303 	adds.w	r3, sl, r3
 800580a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800580e:	464b      	mov	r3, r9
 8005810:	eb4b 0303 	adc.w	r3, fp, r3
 8005814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005824:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005828:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800582c:	460b      	mov	r3, r1
 800582e:	18db      	adds	r3, r3, r3
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
 8005832:	4613      	mov	r3, r2
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800583e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005842:	f7fa fcc9 	bl	80001d8 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4611      	mov	r1, r2
 800584c:	4b3b      	ldr	r3, [pc, #236]	; (800593c <UART_SetConfig+0x2d4>)
 800584e:	fba3 2301 	umull	r2, r3, r3, r1
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2264      	movs	r2, #100	; 0x64
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	1acb      	subs	r3, r1, r3
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <UART_SetConfig+0x2d4>)
 8005864:	fba3 2302 	umull	r2, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005870:	441c      	add	r4, r3
 8005872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005876:	2200      	movs	r2, #0
 8005878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800587c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005880:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	63b9      	str	r1, [r7, #56]	; 0x38
 800588c:	415b      	adcs	r3, r3
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005894:	4641      	mov	r1, r8
 8005896:	1851      	adds	r1, r2, r1
 8005898:	6339      	str	r1, [r7, #48]	; 0x30
 800589a:	4649      	mov	r1, r9
 800589c:	414b      	adcs	r3, r1
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058ac:	4659      	mov	r1, fp
 80058ae:	00cb      	lsls	r3, r1, #3
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b6:	4651      	mov	r1, sl
 80058b8:	00ca      	lsls	r2, r1, #3
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	4642      	mov	r2, r8
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058c8:	464b      	mov	r3, r9
 80058ca:	460a      	mov	r2, r1
 80058cc:	eb42 0303 	adc.w	r3, r2, r3
 80058d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058e8:	460b      	mov	r3, r1
 80058ea:	18db      	adds	r3, r3, r3
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ee:	4613      	mov	r3, r2
 80058f0:	eb42 0303 	adc.w	r3, r2, r3
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058fe:	f7fa fc6b 	bl	80001d8 <__aeabi_uldivmod>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <UART_SetConfig+0x2d4>)
 8005908:	fba3 1302 	umull	r1, r3, r3, r2
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	2164      	movs	r1, #100	; 0x64
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	3332      	adds	r3, #50	; 0x32
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <UART_SetConfig+0x2d4>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	f003 0207 	and.w	r2, r3, #7
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4422      	add	r2, r4
 800592e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005930:	e106      	b.n	8005b40 <UART_SetConfig+0x4d8>
 8005932:	bf00      	nop
 8005934:	40011000 	.word	0x40011000
 8005938:	40011400 	.word	0x40011400
 800593c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005944:	2200      	movs	r2, #0
 8005946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800594a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800594e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005952:	4642      	mov	r2, r8
 8005954:	464b      	mov	r3, r9
 8005956:	1891      	adds	r1, r2, r2
 8005958:	6239      	str	r1, [r7, #32]
 800595a:	415b      	adcs	r3, r3
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005962:	4641      	mov	r1, r8
 8005964:	1854      	adds	r4, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb43 0501 	adc.w	r5, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	00eb      	lsls	r3, r5, #3
 8005976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800597a:	00e2      	lsls	r2, r4, #3
 800597c:	4614      	mov	r4, r2
 800597e:	461d      	mov	r5, r3
 8005980:	4643      	mov	r3, r8
 8005982:	18e3      	adds	r3, r4, r3
 8005984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005988:	464b      	mov	r3, r9
 800598a:	eb45 0303 	adc.w	r3, r5, r3
 800598e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800599e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059ae:	4629      	mov	r1, r5
 80059b0:	008b      	lsls	r3, r1, #2
 80059b2:	4621      	mov	r1, r4
 80059b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b8:	4621      	mov	r1, r4
 80059ba:	008a      	lsls	r2, r1, #2
 80059bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059c0:	f7fa fc0a 	bl	80001d8 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4b60      	ldr	r3, [pc, #384]	; (8005b4c <UART_SetConfig+0x4e4>)
 80059ca:	fba3 2302 	umull	r2, r3, r3, r2
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	011c      	lsls	r4, r3, #4
 80059d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	1891      	adds	r1, r2, r2
 80059ea:	61b9      	str	r1, [r7, #24]
 80059ec:	415b      	adcs	r3, r3
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f4:	4641      	mov	r1, r8
 80059f6:	1851      	adds	r1, r2, r1
 80059f8:	6139      	str	r1, [r7, #16]
 80059fa:	4649      	mov	r1, r9
 80059fc:	414b      	adcs	r3, r1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	00cb      	lsls	r3, r1, #3
 8005a10:	4651      	mov	r1, sl
 8005a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a16:	4651      	mov	r1, sl
 8005a18:	00ca      	lsls	r2, r1, #3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4642      	mov	r2, r8
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a28:	464b      	mov	r3, r9
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	eb42 0303 	adc.w	r3, r2, r3
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	008b      	lsls	r3, r1, #2
 8005a50:	4641      	mov	r1, r8
 8005a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a56:	4641      	mov	r1, r8
 8005a58:	008a      	lsls	r2, r1, #2
 8005a5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a5e:	f7fa fbbb 	bl	80001d8 <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	4b38      	ldr	r3, [pc, #224]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2264      	movs	r2, #100	; 0x64
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	1acb      	subs	r3, r1, r3
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a33      	ldr	r2, [pc, #204]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a88:	441c      	add	r4, r3
 8005a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8e:	2200      	movs	r2, #0
 8005a90:	673b      	str	r3, [r7, #112]	; 0x70
 8005a92:	677a      	str	r2, [r7, #116]	; 0x74
 8005a94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a98:	4642      	mov	r2, r8
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	1891      	adds	r1, r2, r2
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	415b      	adcs	r3, r3
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	1851      	adds	r1, r2, r1
 8005aac:	6039      	str	r1, [r7, #0]
 8005aae:	4649      	mov	r1, r9
 8005ab0:	414b      	adcs	r3, r1
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ac0:	4659      	mov	r1, fp
 8005ac2:	00cb      	lsls	r3, r1, #3
 8005ac4:	4651      	mov	r1, sl
 8005ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aca:	4651      	mov	r1, sl
 8005acc:	00ca      	lsls	r2, r1, #3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ada:	464b      	mov	r3, r9
 8005adc:	460a      	mov	r2, r1
 8005ade:	eb42 0303 	adc.w	r3, r2, r3
 8005ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	663b      	str	r3, [r7, #96]	; 0x60
 8005aee:	667a      	str	r2, [r7, #100]	; 0x64
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005afc:	4649      	mov	r1, r9
 8005afe:	008b      	lsls	r3, r1, #2
 8005b00:	4641      	mov	r1, r8
 8005b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b06:	4641      	mov	r1, r8
 8005b08:	008a      	lsls	r2, r1, #2
 8005b0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b0e:	f7fa fb63 	bl	80001d8 <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005b18:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	2164      	movs	r1, #100	; 0x64
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	3332      	adds	r3, #50	; 0x32
 8005b2a:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4422      	add	r2, r4
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	bf00      	nop
 8005b42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b46:	46bd      	mov	sp, r7
 8005b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4c:	51eb851f 	.word	0x51eb851f

08005b50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b50:	b084      	sub	sp, #16
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	f107 001c 	add.w	r0, r7, #28
 8005b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d122      	bne.n	8005bae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d105      	bne.n	8005ba2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9c0 	bl	8005f28 <USB_CoreReset>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
 8005bac:	e01a      	b.n	8005be4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9b4 	bl	8005f28 <USB_CoreReset>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8005bd6:	e005      	b.n	8005be4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d10b      	bne.n	8005c02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f043 0206 	orr.w	r2, r3, #6
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c0e:	b004      	add	sp, #16
 8005c10:	4770      	bx	lr

08005c12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f023 0201 	bic.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d115      	bne.n	8005ca4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c84:	2001      	movs	r0, #1
 8005c86:	f7fb fa7b 	bl	8001180 <HAL_Delay>
      ms++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f93a 	bl	8005f0a <USB_GetMode>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d01e      	beq.n	8005cda <USB_SetCurrentMode+0x84>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b31      	cmp	r3, #49	; 0x31
 8005ca0:	d9f0      	bls.n	8005c84 <USB_SetCurrentMode+0x2e>
 8005ca2:	e01a      	b.n	8005cda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d115      	bne.n	8005cd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	f7fb fa62 	bl	8001180 <HAL_Delay>
      ms++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f921 	bl	8005f0a <USB_GetMode>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <USB_SetCurrentMode+0x84>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b31      	cmp	r3, #49	; 0x31
 8005cd2:	d9f0      	bls.n	8005cb6 <USB_SetCurrentMode+0x60>
 8005cd4:	e001      	b.n	8005cda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e005      	b.n	8005ce6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b32      	cmp	r3, #50	; 0x32
 8005cde:	d101      	bne.n	8005ce4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <USB_FlushTxFifo+0x64>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d901      	bls.n	8005d10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e01b      	b.n	8005d48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	daf2      	bge.n	8005cfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	019b      	lsls	r3, r3, #6
 8005d20:	f043 0220 	orr.w	r2, r3, #32
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <USB_FlushTxFifo+0x64>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e006      	b.n	8005d48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d0f0      	beq.n	8005d28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	00030d40 	.word	0x00030d40

08005d58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <USB_FlushRxFifo+0x5c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e018      	b.n	8005da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	daf2      	bge.n	8005d64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2210      	movs	r2, #16
 8005d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <USB_FlushRxFifo+0x5c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d901      	bls.n	8005d9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e006      	b.n	8005da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d0f0      	beq.n	8005d88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	00030d40 	.word	0x00030d40

08005db8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	71fb      	strb	r3, [r7, #7]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d123      	bne.n	8005e26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dde:	88bb      	ldrh	r3, [r7, #4]
 8005de0:	3303      	adds	r3, #3
 8005de2:	089b      	lsrs	r3, r3, #2
 8005de4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e018      	b.n	8005e1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	031a      	lsls	r2, r3, #12
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df8:	461a      	mov	r2, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3301      	adds	r3, #1
 8005e04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3301      	adds	r3, #1
 8005e16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d3e2      	bcc.n	8005dec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3724      	adds	r7, #36	; 0x24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b08b      	sub	sp, #44	; 0x2c
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	e014      	b.n	8005e8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	3301      	adds	r3, #1
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	3301      	adds	r3, #1
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	3301      	adds	r3, #1
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	3301      	adds	r3, #1
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	6a3a      	ldr	r2, [r7, #32]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d3e6      	bcc.n	8005e60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e92:	8bfb      	ldrh	r3, [r7, #30]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01e      	beq.n	8005ed6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f107 0310 	add.w	r3, r7, #16
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	701a      	strb	r2, [r3, #0]
      i++;
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005eca:	8bfb      	ldrh	r3, [r7, #30]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ed0:	8bfb      	ldrh	r3, [r7, #30]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ea      	bne.n	8005eac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	372c      	adds	r7, #44	; 0x2c
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 0301 	and.w	r3, r3, #1
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <USB_CoreReset+0x64>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e01b      	b.n	8005f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	daf2      	bge.n	8005f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <USB_CoreReset+0x64>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d901      	bls.n	8005f70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e006      	b.n	8005f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d0f0      	beq.n	8005f5e <USB_CoreReset+0x36>

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	00030d40 	.word	0x00030d40

08005f90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f90:	b084      	sub	sp, #16
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d018      	beq.n	8006018 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10a      	bne.n	8006002 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e014      	b.n	800602c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006010:	f023 0304 	bic.w	r3, r3, #4
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e009      	b.n	800602c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800602c:	2110      	movs	r1, #16
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fe5e 	bl	8005cf0 <USB_FlushTxFifo>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fe8a 	bl	8005d58 <USB_FlushRxFifo>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	e015      	b.n	8006080 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	461a      	mov	r2, r3
 8006062:	f04f 33ff 	mov.w	r3, #4294967295
 8006066:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	461a      	mov	r2, r3
 8006076:	2300      	movs	r3, #0
 8006078:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	429a      	cmp	r2, r3
 8006086:	d3e5      	bcc.n	8006054 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f04f 32ff 	mov.w	r2, #4294967295
 8006094:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <USB_HostInit+0x16c>)
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a13      	ldr	r2, [pc, #76]	; (8006100 <USB_HostInit+0x170>)
 80060b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80060b8:	e009      	b.n	80060ce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a10      	ldr	r2, [pc, #64]	; (8006104 <USB_HostInit+0x174>)
 80060c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a0f      	ldr	r2, [pc, #60]	; (8006108 <USB_HostInit+0x178>)
 80060ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d105      	bne.n	80060e0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f043 0210 	orr.w	r2, r3, #16
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <USB_HostInit+0x17c>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f8:	b004      	add	sp, #16
 80060fa:	4770      	bx	lr
 80060fc:	01000200 	.word	0x01000200
 8006100:	00e00300 	.word	0x00e00300
 8006104:	00600080 	.word	0x00600080
 8006108:	004000e0 	.word	0x004000e0
 800610c:	a3200008 	.word	0xa3200008

08006110 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006148:	4313      	orrs	r3, r2
 800614a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006158:	461a      	mov	r2, r3
 800615a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800615e:	6053      	str	r3, [r2, #4]
 8006160:	e009      	b.n	8006176 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d106      	bne.n	8006176 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616e:	461a      	mov	r2, r3
 8006170:	f241 7370 	movw	r3, #6000	; 0x1770
 8006174:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80061b4:	2064      	movs	r0, #100	; 0x64
 80061b6:	f7fa ffe3 	bl	8001180 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80061c8:	200a      	movs	r0, #10
 80061ca:	f7fa ffd9 	bl	8001180 <HAL_Delay>

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <USB_DriveVbus+0x44>
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d106      	bne.n	800621c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800621a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006226:	d109      	bne.n	800623c <USB_DriveVbus+0x64>
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800623a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	0c5b      	lsrs	r3, r3, #17
 8006268:	f003 0303 	and.w	r3, r3, #3
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	b29b      	uxth	r3, r3
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	4608      	mov	r0, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	461a      	mov	r2, r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	70fb      	strb	r3, [r7, #3]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70bb      	strb	r3, [r7, #2]
 80062b2:	4613      	mov	r3, r2
 80062b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	461a      	mov	r2, r3
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295
 80062d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80062d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d87e      	bhi.n	80063d8 <USB_HC_Init+0x13c>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <USB_HC_Init+0x44>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	0800639b 	.word	0x0800639b
 80062e8:	080062f1 	.word	0x080062f1
 80062ec:	0800635d 	.word	0x0800635d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fc:	461a      	mov	r2, r3
 80062fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8006302:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006304:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006308:	2b00      	cmp	r3, #0
 800630a:	da10      	bge.n	800632e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800632a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800632c:	e057      	b.n	80063de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006336:	2b00      	cmp	r3, #0
 8006338:	d051      	beq.n	80063de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	440a      	add	r2, r1
 8006350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006354:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006358:	60d3      	str	r3, [r2, #12]
      break;
 800635a:	e040      	b.n	80063de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	461a      	mov	r2, r3
 800636a:	f240 639d 	movw	r3, #1693	; 0x69d
 800636e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006370:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	da34      	bge.n	80063e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	440a      	add	r2, r1
 800638e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006396:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006398:	e023      	b.n	80063e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	461a      	mov	r2, r3
 80063a8:	f240 2325 	movw	r3, #549	; 0x225
 80063ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	da17      	bge.n	80063e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80063d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80063d6:	e006      	b.n	80063e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	77fb      	strb	r3, [r7, #31]
      break;
 80063dc:	e004      	b.n	80063e8 <USB_HC_Init+0x14c>
      break;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <USB_HC_Init+0x14c>
      break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <USB_HC_Init+0x14c>
      break;
 80063e6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006402:	f043 0302 	orr.w	r3, r3, #2
 8006406:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	2101      	movs	r1, #1
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	6939      	ldr	r1, [r7, #16]
 800641e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006422:	4313      	orrs	r3, r2
 8006424:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006432:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006436:	2b00      	cmp	r3, #0
 8006438:	da03      	bge.n	8006442 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e001      	b.n	8006446 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff feff 	bl	800624a <USB_GetHostSpeed>
 800644c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800644e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006452:	2b02      	cmp	r3, #2
 8006454:	d106      	bne.n	8006464 <USB_HC_Init+0x1c8>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d003      	beq.n	8006464 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800645c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e001      	b.n	8006468 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006468:	787b      	ldrb	r3, [r7, #1]
 800646a:	059b      	lsls	r3, r3, #22
 800646c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006470:	78bb      	ldrb	r3, [r7, #2]
 8006472:	02db      	lsls	r3, r3, #11
 8006474:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006478:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800647a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800647e:	049b      	lsls	r3, r3, #18
 8006480:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006484:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006486:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006488:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800648c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	0159      	lsls	r1, r3, #5
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	440b      	add	r3, r1
 800649a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064a4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80064a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d003      	beq.n	80064b6 <USB_HC_Init+0x21a>
 80064ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d10f      	bne.n	80064d6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	78fa      	ldrb	r2, [r7, #3]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3720      	adds	r7, #32
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08c      	sub	sp, #48	; 0x30
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80064f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d02d      	beq.n	8006566 <USB_HC_StartXfer+0x86>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	791b      	ldrb	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d129      	bne.n	8006566 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d117      	bne.n	8006548 <USB_HC_StartXfer+0x68>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	79db      	ldrb	r3, [r3, #7]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <USB_HC_StartXfer+0x48>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	79db      	ldrb	r3, [r3, #7]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d10f      	bne.n	8006548 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	4413      	add	r3, r2
 8006530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	6a3a      	ldr	r2, [r7, #32]
 800653c:	440a      	add	r2, r1
 800653e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <USB_HC_StartXfer+0x86>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	795b      	ldrb	r3, [r3, #5]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d107      	bne.n	8006566 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	4619      	mov	r1, r3
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fa0f 	bl	8006980 <USB_DoPing>
      return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e0f8      	b.n	8006758 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d018      	beq.n	80065a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	8912      	ldrh	r2, [r2, #8]
 8006576:	4413      	add	r3, r2
 8006578:	3b01      	subs	r3, #1
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	8912      	ldrh	r2, [r2, #8]
 800657e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006582:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006584:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006586:	8b7b      	ldrh	r3, [r7, #26]
 8006588:	429a      	cmp	r2, r3
 800658a:	d90b      	bls.n	80065a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800658c:	8b7b      	ldrh	r3, [r7, #26]
 800658e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	8912      	ldrh	r2, [r2, #8]
 8006596:	fb03 f202 	mul.w	r2, r3, r2
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	e001      	b.n	80065a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80065a0:	2301      	movs	r3, #1
 80065a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	78db      	ldrb	r3, [r3, #3]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	8912      	ldrh	r2, [r2, #8]
 80065b2:	fb03 f202 	mul.w	r2, r3, r2
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	611a      	str	r2, [r3, #16]
 80065ba:	e003      	b.n	80065c4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	695a      	ldr	r2, [r3, #20]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065ce:	04d9      	lsls	r1, r3, #19
 80065d0:	4b63      	ldr	r3, [pc, #396]	; (8006760 <USB_HC_StartXfer+0x280>)
 80065d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	7a9b      	ldrb	r3, [r3, #10]
 80065da:	075b      	lsls	r3, r3, #29
 80065dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065e0:	69f9      	ldr	r1, [r7, #28]
 80065e2:	0148      	lsls	r0, r1, #5
 80065e4:	6a39      	ldr	r1, [r7, #32]
 80065e6:	4401      	add	r1, r0
 80065e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68d9      	ldr	r1, [r3, #12]
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006606:	460a      	mov	r2, r1
 8006608:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	440a      	add	r2, r1
 8006638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006640:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	7e7b      	ldrb	r3, [r7, #25]
 8006652:	075b      	lsls	r3, r3, #29
 8006654:	69f9      	ldr	r1, [r7, #28]
 8006656:	0148      	lsls	r0, r1, #5
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	4401      	add	r1, r0
 800665c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006660:	4313      	orrs	r3, r2
 8006662:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	4413      	add	r3, r2
 800666c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800667a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	78db      	ldrb	r3, [r3, #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	e003      	b.n	8006696 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006694:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800669c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	461a      	mov	r2, r3
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e04e      	b.n	8006758 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d149      	bne.n	8006756 <USB_HC_StartXfer+0x276>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d045      	beq.n	8006756 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	79db      	ldrb	r3, [r3, #7]
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d830      	bhi.n	8006734 <USB_HC_StartXfer+0x254>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <USB_HC_StartXfer+0x1f8>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	0800670d 	.word	0x0800670d
 80066e0:	080066e9 	.word	0x080066e9
 80066e4:	0800670d 	.word	0x0800670d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	3303      	adds	r3, #3
 80066ee:	089b      	lsrs	r3, r3, #2
 80066f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80066f2:	8afa      	ldrh	r2, [r7, #22]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d91c      	bls.n	8006738 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	619a      	str	r2, [r3, #24]
        }
        break;
 800670a:	e015      	b.n	8006738 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	3303      	adds	r3, #3
 8006712:	089b      	lsrs	r3, r3, #2
 8006714:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006716:	8afa      	ldrh	r2, [r7, #22]
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	b29b      	uxth	r3, r3
 8006722:	429a      	cmp	r2, r3
 8006724:	d90a      	bls.n	800673c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	619a      	str	r2, [r3, #24]
        }
        break;
 8006732:	e003      	b.n	800673c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006734:	bf00      	nop
 8006736:	e002      	b.n	800673e <USB_HC_StartXfer+0x25e>
        break;
 8006738:	bf00      	nop
 800673a:	e000      	b.n	800673e <USB_HC_StartXfer+0x25e>
        break;
 800673c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68d9      	ldr	r1, [r3, #12]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	785a      	ldrb	r2, [r3, #1]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	b29b      	uxth	r3, r3
 800674c:	2000      	movs	r0, #0
 800674e:	9000      	str	r0, [sp, #0]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff fb31 	bl	8005db8 <USB_WritePacket>
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3728      	adds	r7, #40	; 0x28
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	1ff80000 	.word	0x1ff80000

08006764 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	b29b      	uxth	r3, r3
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006786:	b480      	push	{r7}
 8006788:	b089      	sub	sp, #36	; 0x24
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	0c9b      	lsrs	r3, r3, #18
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	0fdb      	lsrs	r3, r3, #31
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d104      	bne.n	80067e0 <USB_HC_Halt+0x5a>
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	e0c8      	b.n	8006972 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <USB_HC_Halt+0x66>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d163      	bne.n	80068b4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	440a      	add	r2, r1
 8006802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800680a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 80ab 	bne.w	8006970 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d133      	bne.n	800688e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	440a      	add	r2, r1
 800683c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006844:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	440a      	add	r2, r1
 800685c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006864:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006872:	d81d      	bhi.n	80068b0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800688a:	d0ec      	beq.n	8006866 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800688c:	e070      	b.n	8006970 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068ae:	e05f      	b.n	8006970 <USB_HC_Halt+0x1ea>
            break;
 80068b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068b2:	e05d      	b.n	8006970 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d133      	bne.n	800694c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006902:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	440a      	add	r2, r1
 800691a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006922:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006930:	d81d      	bhi.n	800696e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006948:	d0ec      	beq.n	8006924 <USB_HC_Halt+0x19e>
 800694a:	e011      	b.n	8006970 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	440a      	add	r2, r1
 8006962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	e000      	b.n	8006970 <USB_HC_Halt+0x1ea>
          break;
 800696e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3724      	adds	r7, #36	; 0x24
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006994:	2301      	movs	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	04da      	lsls	r2, r3, #19
 800699c:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <USB_DoPing+0x74>)
 800699e:	4013      	ands	r3, r2
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	461a      	mov	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	1ff80000 	.word	0x1ff80000

080069f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff f911 	bl	8005c34 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a12:	2110      	movs	r1, #16
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff f96b 	bl	8005cf0 <USB_FlushTxFifo>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff f997 	bl	8005d58 <USB_FlushRxFifo>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	e01f      	b.n	8006a7a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	461a      	mov	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	3301      	adds	r3, #1
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b0f      	cmp	r3, #15
 8006a7e:	d9dc      	bls.n	8006a3a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a80:	2300      	movs	r3, #0
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	e034      	b.n	8006af0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	461a      	mov	r2, r3
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006acc:	d80c      	bhi.n	8006ae8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae4:	d0ec      	beq.n	8006ac0 <USB_StopHost+0xc8>
 8006ae6:	e000      	b.n	8006aea <USB_StopHost+0xf2>
        break;
 8006ae8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	3301      	adds	r3, #1
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b0f      	cmp	r3, #15
 8006af4:	d9c7      	bls.n	8006a86 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006afc:	461a      	mov	r2, r3
 8006afe:	f04f 33ff 	mov.w	r3, #4294967295
 8006b02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff f880 	bl	8005c12 <USB_EnableGlobalInt>

  return ret;
 8006b12:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b1c:	b590      	push	{r4, r7, lr}
 8006b1e:	b089      	sub	sp, #36	; 0x24
 8006b20:	af04      	add	r7, sp, #16
 8006b22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b24:	2301      	movs	r3, #1
 8006b26:	2202      	movs	r2, #2
 8006b28:	2102      	movs	r1, #2
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fc66 	bl	80073fc <USBH_FindInterface>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2bff      	cmp	r3, #255	; 0xff
 8006b38:	d002      	beq.n	8006b40 <USBH_CDC_InterfaceInit+0x24>
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d901      	bls.n	8006b44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b40:	2302      	movs	r3, #2
 8006b42:	e13d      	b.n	8006dc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fc3b 	bl	80073c4 <USBH_SelectInterface>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e131      	b.n	8006dc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b62:	2050      	movs	r0, #80	; 0x50
 8006b64:	f002 fc6e 	bl	8009444 <malloc>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e11f      	b.n	8006dc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b80:	2250      	movs	r2, #80	; 0x50
 8006b82:	2100      	movs	r1, #0
 8006b84:	68b8      	ldr	r0, [r7, #8]
 8006b86:	f002 fd19 	bl	80095bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	211a      	movs	r1, #26
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	b25b      	sxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	da15      	bge.n	8006bce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	211a      	movs	r1, #26
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	211a      	movs	r1, #26
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bc8:	881a      	ldrh	r2, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 ff2e 	bl	8008a36 <USBH_AllocPipe>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	7858      	ldrb	r0, [r3, #1]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	8952      	ldrh	r2, [r2, #10]
 8006bfa:	9202      	str	r2, [sp, #8]
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	9201      	str	r2, [sp, #4]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4623      	mov	r3, r4
 8006c04:	4602      	mov	r2, r0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fee6 	bl	80089d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2200      	movs	r2, #0
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f002 f9f5 	bl	8009004 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	210a      	movs	r1, #10
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fbeb 	bl	80073fc <USBH_FindInterface>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2bff      	cmp	r3, #255	; 0xff
 8006c2e:	d002      	beq.n	8006c36 <USBH_CDC_InterfaceInit+0x11a>
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d901      	bls.n	8006c3a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c36:	2302      	movs	r3, #2
 8006c38:	e0c2      	b.n	8006dc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	211a      	movs	r1, #26
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da16      	bge.n	8006c80 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	211a      	movs	r1, #26
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	211a      	movs	r1, #26
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c78:	881a      	ldrh	r2, [r3, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	835a      	strh	r2, [r3, #26]
 8006c7e:	e015      	b.n	8006cac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	211a      	movs	r1, #26
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	211a      	movs	r1, #26
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	211a      	movs	r1, #26
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da16      	bge.n	8006cf2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	211a      	movs	r1, #26
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	211a      	movs	r1, #26
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cea:	881a      	ldrh	r2, [r3, #0]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	835a      	strh	r2, [r3, #26]
 8006cf0:	e015      	b.n	8006d1e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	211a      	movs	r1, #26
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	211a      	movs	r1, #26
 8006d0e:	fb01 f303 	mul.w	r3, r1, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	7b9b      	ldrb	r3, [r3, #14]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fe86 	bl	8008a36 <USBH_AllocPipe>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	7bdb      	ldrb	r3, [r3, #15]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fe7c 	bl	8008a36 <USBH_AllocPipe>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	461a      	mov	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	7b59      	ldrb	r1, [r3, #13]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	7b98      	ldrb	r0, [r3, #14]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	8b12      	ldrh	r2, [r2, #24]
 8006d5e:	9202      	str	r2, [sp, #8]
 8006d60:	2202      	movs	r2, #2
 8006d62:	9201      	str	r2, [sp, #4]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4623      	mov	r3, r4
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fe34 	bl	80089d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	7b19      	ldrb	r1, [r3, #12]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	7bd8      	ldrb	r0, [r3, #15]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	8b52      	ldrh	r2, [r2, #26]
 8006d88:	9202      	str	r2, [sp, #8]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4623      	mov	r3, r4
 8006d92:	4602      	mov	r2, r0
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fe1f 	bl	80089d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	7b5b      	ldrb	r3, [r3, #13]
 8006da6:	2200      	movs	r2, #0
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f002 f92a 	bl	8009004 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	7b1b      	ldrb	r3, [r3, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f002 f923 	bl	8009004 <USBH_LL_SetToggle>

  return USBH_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd90      	pop	{r4, r7, pc}

08006dc8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fe14 	bl	8008a16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fe3f 	bl	8008a78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	7b1b      	ldrb	r3, [r3, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00e      	beq.n	8006e26 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	7b1b      	ldrb	r3, [r3, #12]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fe01 	bl	8008a16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	7b1b      	ldrb	r3, [r3, #12]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fe2c 	bl	8008a78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	7b5b      	ldrb	r3, [r3, #13]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00e      	beq.n	8006e4c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	7b5b      	ldrb	r3, [r3, #13]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 fdee 	bl	8008a16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	7b5b      	ldrb	r3, [r3, #13]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fe19 	bl	8008a78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f002 faf7 	bl	8009454 <free>
    phost->pActiveClass->pData = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3340      	adds	r3, #64	; 0x40
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8b1 	bl	8006ffa <GetLineCoding>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006eae:	7afb      	ldrb	r3, [r7, #11]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d877      	bhi.n	8006fcc <USBH_CDC_Process+0x114>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <USBH_CDC_Process+0x2c>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006ef9 	.word	0x08006ef9
 8006ee8:	08006eff 	.word	0x08006eff
 8006eec:	08006f2f 	.word	0x08006f2f
 8006ef0:	08006fa3 	.word	0x08006fa3
 8006ef4:	08006fb1 	.word	0x08006fb1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
      break;
 8006efc:	e06d      	b.n	8006fda <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f897 	bl	8007038 <SetLineCoding>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f1c:	e058      	b.n	8006fd0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d055      	beq.n	8006fd0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2204      	movs	r2, #4
 8006f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f2c:	e050      	b.n	8006fd0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	3340      	adds	r3, #64	; 0x40
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f860 	bl	8006ffa <GetLineCoding>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d126      	bne.n	8006f92 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f56:	791b      	ldrb	r3, [r3, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d13b      	bne.n	8006fd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d133      	bne.n	8006fd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d12b      	bne.n	8006fd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f84:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d124      	bne.n	8006fd4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f958 	bl	8007240 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f90:	e020      	b.n	8006fd4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d01d      	beq.n	8006fd4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006fa0:	e018      	b.n	8006fd4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f867 	bl	8007076 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f8da 	bl	8007162 <CDC_ProcessReception>
      break;
 8006fae:	e014      	b.n	8006fda <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 ffef 	bl	8007f96 <USBH_ClrFeature>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006fca:	e005      	b.n	8006fd8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006fcc:	bf00      	nop
 8006fce:	e004      	b.n	8006fda <USBH_CDC_Process+0x122>
      break;
 8006fd0:	bf00      	nop
 8006fd2:	e002      	b.n	8006fda <USBH_CDC_Process+0x122>
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <USBH_CDC_Process+0x122>
      break;
 8006fd8:	bf00      	nop

  }

  return status;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	22a1      	movs	r2, #161	; 0xa1
 8007008:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2221      	movs	r2, #33	; 0x21
 800700e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2207      	movs	r2, #7
 8007020:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2207      	movs	r2, #7
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fa83 	bl	8008534 <USBH_CtlReq>
 800702e:	4603      	mov	r3, r0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2221      	movs	r2, #33	; 0x21
 8007046:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2207      	movs	r2, #7
 800705e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2207      	movs	r2, #7
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fa64 	bl	8008534 <USBH_CtlReq>
 800706c:	4603      	mov	r3, r0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af02      	add	r7, sp, #8
 800707c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007088:	2300      	movs	r3, #0
 800708a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007092:	2b01      	cmp	r3, #1
 8007094:	d002      	beq.n	800709c <CDC_ProcessTransmission+0x26>
 8007096:	2b02      	cmp	r3, #2
 8007098:	d023      	beq.n	80070e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800709a:	e05e      	b.n	800715a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	8b12      	ldrh	r2, [r2, #24]
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d90b      	bls.n	80070c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	69d9      	ldr	r1, [r3, #28]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8b1a      	ldrh	r2, [r3, #24]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	7b5b      	ldrb	r3, [r3, #13]
 80070b4:	2001      	movs	r0, #1
 80070b6:	9000      	str	r0, [sp, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 fc4a 	bl	8008952 <USBH_BulkSendData>
 80070be:	e00b      	b.n	80070d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	7b5b      	ldrb	r3, [r3, #13]
 80070ce:	2001      	movs	r0, #1
 80070d0:	9000      	str	r0, [sp, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 fc3d 	bl	8008952 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070e0:	e03b      	b.n	800715a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	7b5b      	ldrb	r3, [r3, #13]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 ff61 	bl	8008fb0 <USBH_LL_GetURBState>
 80070ee:	4603      	mov	r3, r0
 80070f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d128      	bne.n	800714a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	8b12      	ldrh	r2, [r2, #24]
 8007100:	4293      	cmp	r3, r2
 8007102:	d90e      	bls.n	8007122 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	8b12      	ldrh	r2, [r2, #24]
 800710c:	1a9a      	subs	r2, r3, r2
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	8b12      	ldrh	r2, [r2, #24]
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	61da      	str	r2, [r3, #28]
 8007120:	e002      	b.n	8007128 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007138:	e00e      	b.n	8007158 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f868 	bl	8007218 <USBH_CDC_TransmitCallback>
      break;
 8007148:	e006      	b.n	8007158 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d103      	bne.n	8007158 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007158:	bf00      	nop
  }
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007174:	2300      	movs	r3, #0
 8007176:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800717e:	2b03      	cmp	r3, #3
 8007180:	d002      	beq.n	8007188 <CDC_ProcessReception+0x26>
 8007182:	2b04      	cmp	r3, #4
 8007184:	d00e      	beq.n	80071a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007186:	e043      	b.n	8007210 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6a19      	ldr	r1, [r3, #32]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	8b5a      	ldrh	r2, [r3, #26]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	7b1b      	ldrb	r3, [r3, #12]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fc01 	bl	800899c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2204      	movs	r2, #4
 800719e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071a2:	e035      	b.n	8007210 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	7b1b      	ldrb	r3, [r3, #12]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 ff00 	bl	8008fb0 <USBH_LL_GetURBState>
 80071b0:	4603      	mov	r3, r0
 80071b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d129      	bne.n	800720e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	7b1b      	ldrb	r3, [r3, #12]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fe63 	bl	8008e8c <USBH_LL_GetLastXferSize>
 80071c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d016      	beq.n	8007200 <CDC_ProcessReception+0x9e>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	8b5b      	ldrh	r3, [r3, #26]
 80071d6:	461a      	mov	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4293      	cmp	r3, r2
 80071dc:	d910      	bls.n	8007200 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1ad2      	subs	r2, r2, r3
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	6a1a      	ldr	r2, [r3, #32]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	441a      	add	r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2203      	movs	r2, #3
 80071fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071fe:	e006      	b.n	800720e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f80f 	bl	800722c <USBH_CDC_ReceiveCallback>
      break;
 800720e:	bf00      	nop
  }
}
 8007210:	bf00      	nop
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007268:	2302      	movs	r3, #2
 800726a:	e029      	b.n	80072c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	79fa      	ldrb	r2, [r7, #7]
 8007270:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f81f 	bl	80072c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fd33 	bl	8008d24 <USBH_LL_Init>

  return USBH_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	e009      	b.n	80072ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	33e0      	adds	r3, #224	; 0xe0
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	2200      	movs	r2, #0
 80072e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b0f      	cmp	r3, #15
 80072f2:	d9f2      	bls.n	80072da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	e009      	b.n	800730e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007314:	d3f1      	bcc.n	80072fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2240      	movs	r2, #64	; 0x40
 800733a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d016      	beq.n	80073b2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10e      	bne.n	80073ac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007394:	1c59      	adds	r1, r3, #1
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	33de      	adds	r3, #222	; 0xde
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
 80073aa:	e004      	b.n	80073b6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073ac:	2302      	movs	r3, #2
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e001      	b.n	80073b6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073b2:	2302      	movs	r3, #2
 80073b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d204      	bcs.n	80073ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073e8:	e001      	b.n	80073ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	461a      	mov	r2, r3
 800740a:	4603      	mov	r3, r0
 800740c:	70fb      	strb	r3, [r7, #3]
 800740e:	460b      	mov	r3, r1
 8007410:	70bb      	strb	r3, [r7, #2]
 8007412:	4613      	mov	r3, r2
 8007414:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007424:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007426:	e025      	b.n	8007474 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	221a      	movs	r2, #26
 800742c:	fb02 f303 	mul.w	r3, r2, r3
 8007430:	3308      	adds	r3, #8
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	3302      	adds	r3, #2
 8007438:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	795b      	ldrb	r3, [r3, #5]
 800743e:	78fa      	ldrb	r2, [r7, #3]
 8007440:	429a      	cmp	r2, r3
 8007442:	d002      	beq.n	800744a <USBH_FindInterface+0x4e>
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	2bff      	cmp	r3, #255	; 0xff
 8007448:	d111      	bne.n	800746e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800744e:	78ba      	ldrb	r2, [r7, #2]
 8007450:	429a      	cmp	r2, r3
 8007452:	d002      	beq.n	800745a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007454:	78bb      	ldrb	r3, [r7, #2]
 8007456:	2bff      	cmp	r3, #255	; 0xff
 8007458:	d109      	bne.n	800746e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800745e:	787a      	ldrb	r2, [r7, #1]
 8007460:	429a      	cmp	r2, r3
 8007462:	d002      	beq.n	800746a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007464:	787b      	ldrb	r3, [r7, #1]
 8007466:	2bff      	cmp	r3, #255	; 0xff
 8007468:	d101      	bne.n	800746e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	e006      	b.n	800747c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	3301      	adds	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d9d6      	bls.n	8007428 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800747a:	23ff      	movs	r3, #255	; 0xff
}
 800747c:	4618      	mov	r0, r3
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 fc83 	bl	8008d9c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007496:	2101      	movs	r1, #1
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 fd9c 	bl	8008fd6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074b0:	2302      	movs	r3, #2
 80074b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d102      	bne.n	80074ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2203      	movs	r2, #3
 80074c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b0b      	cmp	r3, #11
 80074d2:	f200 81be 	bhi.w	8007852 <USBH_Process+0x3aa>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <USBH_Process+0x34>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	0800750d 	.word	0x0800750d
 80074e0:	0800753f 	.word	0x0800753f
 80074e4:	080075a7 	.word	0x080075a7
 80074e8:	080077ed 	.word	0x080077ed
 80074ec:	08007853 	.word	0x08007853
 80074f0:	0800764b 	.word	0x0800764b
 80074f4:	08007793 	.word	0x08007793
 80074f8:	08007681 	.word	0x08007681
 80074fc:	080076a1 	.word	0x080076a1
 8007500:	080076c1 	.word	0x080076c1
 8007504:	08007705 	.word	0x08007705
 8007508:	080077d5 	.word	0x080077d5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 819e 	beq.w	8007856 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007520:	20c8      	movs	r0, #200	; 0xc8
 8007522:	f001 fd9f 	bl	8009064 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fc95 	bl	8008e56 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800753c:	e18b      	b.n	8007856 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007556:	e18d      	b.n	8007874 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800755e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007562:	d914      	bls.n	800758e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800756a:	3301      	adds	r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800757a:	2b03      	cmp	r3, #3
 800757c:	d903      	bls.n	8007586 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	220d      	movs	r2, #13
 8007582:	701a      	strb	r2, [r3, #0]
      break;
 8007584:	e176      	b.n	8007874 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
      break;
 800758c:	e172      	b.n	8007874 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007594:	f103 020a 	add.w	r2, r3, #10
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800759e:	200a      	movs	r0, #10
 80075a0:	f001 fd60 	bl	8009064 <USBH_Delay>
      break;
 80075a4:	e166      	b.n	8007874 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075b6:	2104      	movs	r1, #4
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075bc:	2064      	movs	r0, #100	; 0x64
 80075be:	f001 fd51 	bl	8009064 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fc20 	bl	8008e08 <USBH_LL_GetSpeed>
 80075c8:	4603      	mov	r3, r0
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2205      	movs	r2, #5
 80075d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 fa2b 	bl	8008a36 <USBH_AllocPipe>
 80075e0:	4603      	mov	r3, r0
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80075e8:	2180      	movs	r1, #128	; 0x80
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fa23 	bl	8008a36 <USBH_AllocPipe>
 80075f0:	4603      	mov	r3, r0
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7919      	ldrb	r1, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800760c:	b292      	uxth	r2, r2
 800760e:	9202      	str	r2, [sp, #8]
 8007610:	2200      	movs	r2, #0
 8007612:	9201      	str	r2, [sp, #4]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	4603      	mov	r3, r0
 8007618:	2280      	movs	r2, #128	; 0x80
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f9dc 	bl	80089d8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	7959      	ldrb	r1, [r3, #5]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007634:	b292      	uxth	r2, r2
 8007636:	9202      	str	r2, [sp, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	9201      	str	r2, [sp, #4]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4603      	mov	r3, r0
 8007640:	2200      	movs	r2, #0
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f9c8 	bl	80089d8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007648:	e114      	b.n	8007874 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f918 	bl	8007880 <USBH_HandleEnum>
 8007650:	4603      	mov	r3, r0
 8007652:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 80fe 	bne.w	800785a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800766c:	2b01      	cmp	r3, #1
 800766e:	d103      	bne.n	8007678 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2208      	movs	r2, #8
 8007674:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007676:	e0f0      	b.n	800785a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2207      	movs	r2, #7
 800767c:	701a      	strb	r2, [r3, #0]
      break;
 800767e:	e0ec      	b.n	800785a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80e9 	beq.w	800785e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007692:	2101      	movs	r1, #1
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2208      	movs	r2, #8
 800769c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800769e:	e0de      	b.n	800785e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fc2c 	bl	8007f08 <USBH_SetCfg>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 80d5 	bne.w	8007862 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2209      	movs	r2, #9
 80076bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076be:	e0d0      	b.n	8007862 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d016      	beq.n	80076fc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076ce:	2101      	movs	r1, #1
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc3c 	bl	8007f4e <USBH_SetFeature>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220a      	movs	r2, #10
 80076e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076e8:	e0bd      	b.n	8007866 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	f040 80b9 	bne.w	8007866 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	220a      	movs	r2, #10
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e0b4      	b.n	8007866 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	220a      	movs	r2, #10
 8007700:	701a      	strb	r2, [r3, #0]
      break;
 8007702:	e0b0      	b.n	8007866 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 80ad 	beq.w	800786a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	e016      	b.n	800774c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800771e:	7bfa      	ldrb	r2, [r7, #15]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	32de      	adds	r2, #222	; 0xde
 8007724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007728:	791a      	ldrb	r2, [r3, #4]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007730:	429a      	cmp	r2, r3
 8007732:	d108      	bne.n	8007746 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007734:	7bfa      	ldrb	r2, [r7, #15]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32de      	adds	r2, #222	; 0xde
 800773a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007744:	e005      	b.n	8007752 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	3301      	adds	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0e5      	beq.n	800771e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d016      	beq.n	800778a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2206      	movs	r2, #6
 8007772:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800777a:	2103      	movs	r1, #3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007780:	e073      	b.n	800786a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	220d      	movs	r2, #13
 8007786:	701a      	strb	r2, [r3, #0]
      break;
 8007788:	e06f      	b.n	800786a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	220d      	movs	r2, #13
 800778e:	701a      	strb	r2, [r3, #0]
      break;
 8007790:	e06b      	b.n	800786a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d017      	beq.n	80077cc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
 80077a8:	4603      	mov	r3, r0
 80077aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d103      	bne.n	80077bc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	220b      	movs	r2, #11
 80077b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077ba:	e058      	b.n	800786e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d154      	bne.n	800786e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	220d      	movs	r2, #13
 80077c8:	701a      	strb	r2, [r3, #0]
      break;
 80077ca:	e050      	b.n	800786e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	220d      	movs	r2, #13
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e04c      	b.n	800786e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d049      	beq.n	8007872 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
      }
      break;
 80077ea:	e042      	b.n	8007872 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fd67 	bl	80072c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d009      	beq.n	8007818 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007828:	2105      	movs	r1, #5
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b01      	cmp	r3, #1
 8007838:	d107      	bne.n	800784a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fe20 	bl	8007488 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007848:	e014      	b.n	8007874 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 faa6 	bl	8008d9c <USBH_LL_Start>
      break;
 8007850:	e010      	b.n	8007874 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007852:	bf00      	nop
 8007854:	e00e      	b.n	8007874 <USBH_Process+0x3cc>
      break;
 8007856:	bf00      	nop
 8007858:	e00c      	b.n	8007874 <USBH_Process+0x3cc>
      break;
 800785a:	bf00      	nop
 800785c:	e00a      	b.n	8007874 <USBH_Process+0x3cc>
    break;
 800785e:	bf00      	nop
 8007860:	e008      	b.n	8007874 <USBH_Process+0x3cc>
      break;
 8007862:	bf00      	nop
 8007864:	e006      	b.n	8007874 <USBH_Process+0x3cc>
      break;
 8007866:	bf00      	nop
 8007868:	e004      	b.n	8007874 <USBH_Process+0x3cc>
      break;
 800786a:	bf00      	nop
 800786c:	e002      	b.n	8007874 <USBH_Process+0x3cc>
      break;
 800786e:	bf00      	nop
 8007870:	e000      	b.n	8007874 <USBH_Process+0x3cc>
      break;
 8007872:	bf00      	nop
  }
  return USBH_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop

08007880 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af04      	add	r7, sp, #16
 8007886:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007888:	2301      	movs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800788c:	2301      	movs	r3, #1
 800788e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b07      	cmp	r3, #7
 8007896:	f200 81c1 	bhi.w	8007c1c <USBH_HandleEnum+0x39c>
 800789a:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <USBH_HandleEnum+0x20>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078c1 	.word	0x080078c1
 80078a4:	0800797f 	.word	0x0800797f
 80078a8:	080079e9 	.word	0x080079e9
 80078ac:	08007a77 	.word	0x08007a77
 80078b0:	08007ae1 	.word	0x08007ae1
 80078b4:	08007b51 	.word	0x08007b51
 80078b8:	08007b97 	.word	0x08007b97
 80078bc:	08007bdd 	.word	0x08007bdd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078c0:	2108      	movs	r1, #8
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa50 	bl	8007d68 <USBH_Get_DevDesc>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d130      	bne.n	8007934 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7919      	ldrb	r1, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078f6:	b292      	uxth	r2, r2
 80078f8:	9202      	str	r2, [sp, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	9201      	str	r2, [sp, #4]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	4603      	mov	r3, r0
 8007902:	2280      	movs	r2, #128	; 0x80
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 f867 	bl	80089d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7959      	ldrb	r1, [r3, #5]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800791e:	b292      	uxth	r2, r2
 8007920:	9202      	str	r2, [sp, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	9201      	str	r2, [sp, #4]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	4603      	mov	r3, r0
 800792a:	2200      	movs	r2, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f853 	bl	80089d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007932:	e175      	b.n	8007c20 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b03      	cmp	r3, #3
 8007938:	f040 8172 	bne.w	8007c20 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007942:	3301      	adds	r3, #1
 8007944:	b2da      	uxtb	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007952:	2b03      	cmp	r3, #3
 8007954:	d903      	bls.n	800795e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	220d      	movs	r2, #13
 800795a:	701a      	strb	r2, [r3, #0]
      break;
 800795c:	e160      	b.n	8007c20 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	795b      	ldrb	r3, [r3, #5]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 f887 	bl	8008a78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 f881 	bl	8008a78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
      break;
 800797c:	e150      	b.n	8007c20 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800797e:	2112      	movs	r1, #18
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f9f1 	bl	8007d68 <USBH_Get_DevDesc>
 8007986:	4603      	mov	r3, r0
 8007988:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d103      	bne.n	8007998 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007996:	e145      	b.n	8007c24 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b03      	cmp	r3, #3
 800799c:	f040 8142 	bne.w	8007c24 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079a6:	3301      	adds	r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d903      	bls.n	80079c2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	220d      	movs	r2, #13
 80079be:	701a      	strb	r2, [r3, #0]
      break;
 80079c0:	e130      	b.n	8007c24 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	795b      	ldrb	r3, [r3, #5]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 f855 	bl	8008a78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	791b      	ldrb	r3, [r3, #4]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f84f 	bl	8008a78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e11d      	b.n	8007c24 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80079e8:	2101      	movs	r1, #1
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fa68 	bl	8007ec0 <USBH_SetAddress>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d132      	bne.n	8007a60 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80079fa:	2002      	movs	r0, #2
 80079fc:	f001 fb32 	bl	8009064 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7919      	ldrb	r1, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a22:	b292      	uxth	r2, r2
 8007a24:	9202      	str	r2, [sp, #8]
 8007a26:	2200      	movs	r2, #0
 8007a28:	9201      	str	r2, [sp, #4]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2280      	movs	r2, #128	; 0x80
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 ffd1 	bl	80089d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7959      	ldrb	r1, [r3, #5]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	9202      	str	r2, [sp, #8]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	9201      	str	r2, [sp, #4]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	4603      	mov	r3, r0
 8007a56:	2200      	movs	r2, #0
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 ffbd 	bl	80089d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a5e:	e0e3      	b.n	8007c28 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	f040 80e0 	bne.w	8007c28 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	220d      	movs	r2, #13
 8007a6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	705a      	strb	r2, [r3, #1]
      break;
 8007a74:	e0d8      	b.n	8007c28 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a76:	2109      	movs	r1, #9
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f99d 	bl	8007db8 <USBH_Get_CfgDesc>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d103      	bne.n	8007a90 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a8e:	e0cd      	b.n	8007c2c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f040 80ca 	bne.w	8007c2c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d903      	bls.n	8007aba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	220d      	movs	r2, #13
 8007ab6:	701a      	strb	r2, [r3, #0]
      break;
 8007ab8:	e0b8      	b.n	8007c2c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	795b      	ldrb	r3, [r3, #5]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 ffd9 	bl	8008a78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	791b      	ldrb	r3, [r3, #4]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 ffd3 	bl	8008a78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e0a5      	b.n	8007c2c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f965 	bl	8007db8 <USBH_Get_CfgDesc>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2205      	movs	r2, #5
 8007afc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007afe:	e097      	b.n	8007c30 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	f040 8094 	bne.w	8007c30 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b0e:	3301      	adds	r3, #1
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d903      	bls.n	8007b2a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	220d      	movs	r2, #13
 8007b26:	701a      	strb	r2, [r3, #0]
      break;
 8007b28:	e082      	b.n	8007c30 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	795b      	ldrb	r3, [r3, #5]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 ffa1 	bl	8008a78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	791b      	ldrb	r3, [r3, #4]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 ff9b 	bl	8008a78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
      break;
 8007b4e:	e06f      	b.n	8007c30 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d019      	beq.n	8007b8e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b66:	23ff      	movs	r3, #255	; 0xff
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f949 	bl	8007e00 <USBH_Get_StringDesc>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2206      	movs	r2, #6
 8007b7c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b7e:	e059      	b.n	8007c34 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d156      	bne.n	8007c34 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2206      	movs	r2, #6
 8007b8a:	705a      	strb	r2, [r3, #1]
      break;
 8007b8c:	e052      	b.n	8007c34 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2206      	movs	r2, #6
 8007b92:	705a      	strb	r2, [r3, #1]
      break;
 8007b94:	e04e      	b.n	8007c34 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d019      	beq.n	8007bd4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bac:	23ff      	movs	r3, #255	; 0xff
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f926 	bl	8007e00 <USBH_Get_StringDesc>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d103      	bne.n	8007bc6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bc4:	e038      	b.n	8007c38 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d135      	bne.n	8007c38 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2207      	movs	r2, #7
 8007bd0:	705a      	strb	r2, [r3, #1]
      break;
 8007bd2:	e031      	b.n	8007c38 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2207      	movs	r2, #7
 8007bd8:	705a      	strb	r2, [r3, #1]
      break;
 8007bda:	e02d      	b.n	8007c38 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d017      	beq.n	8007c16 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bf2:	23ff      	movs	r3, #255	; 0xff
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f903 	bl	8007e00 <USBH_Get_StringDesc>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c08:	e018      	b.n	8007c3c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d115      	bne.n	8007c3c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
      break;
 8007c14:	e012      	b.n	8007c3c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1a:	e00f      	b.n	8007c3c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c1c:	bf00      	nop
 8007c1e:	e00e      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c20:	bf00      	nop
 8007c22:	e00c      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c24:	bf00      	nop
 8007c26:	e00a      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c28:	bf00      	nop
 8007c2a:	e008      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e006      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c30:	bf00      	nop
 8007c32:	e004      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c34:	bf00      	nop
 8007c36:	e002      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c38:	bf00      	nop
 8007c3a:	e000      	b.n	8007c3e <USBH_HandleEnum+0x3be>
      break;
 8007c3c:	bf00      	nop
  }
  return Status;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f804 	bl	8007c8a <USBH_HandleSof>
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	d10a      	bne.n	8007cb2 <USBH_HandleSof+0x28>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
  }
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007cca:	bf00      	nop
}
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007ce6:	bf00      	nop
}
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 f846 	bl	8008dd2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	791b      	ldrb	r3, [r3, #4]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fe93 	bl	8008a78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	795b      	ldrb	r3, [r3, #5]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fe8d 	bl	8008a78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d86:	2100      	movs	r1, #0
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f864 	bl	8007e56 <USBH_GetDescriptor>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007da4:	78fa      	ldrb	r2, [r7, #3]
 8007da6:	b292      	uxth	r2, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	f000 f919 	bl	8007fe0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	331c      	adds	r3, #28
 8007dc8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007dca:	887b      	ldrh	r3, [r7, #2]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f83d 	bl	8007e56 <USBH_GetDescriptor>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d107      	bne.n	8007df6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	461a      	mov	r2, r3
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f989 	bl	8008104 <USBH_ParseCfgDesc>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	72fb      	strb	r3, [r7, #11]
 8007e10:	4613      	mov	r3, r2
 8007e12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e1c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007e24:	893b      	ldrh	r3, [r7, #8]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 f812 	bl	8007e56 <USBH_GetDescriptor>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d107      	bne.n	8007e4c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e42:	893a      	ldrh	r2, [r7, #8]
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fb26 	bl	8008498 <USBH_ParseStringDesc>
  }

  return status;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	607b      	str	r3, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	72fb      	strb	r3, [r7, #11]
 8007e64:	4613      	mov	r3, r2
 8007e66:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	789b      	ldrb	r3, [r3, #2]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d11c      	bne.n	8007eaa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2206      	movs	r2, #6
 8007e80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	893a      	ldrh	r2, [r7, #8]
 8007e86:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e92:	d104      	bne.n	8007e9e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f240 4209 	movw	r2, #1033	; 0x409
 8007e9a:	829a      	strh	r2, [r3, #20]
 8007e9c:	e002      	b.n	8007ea4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8b3a      	ldrh	r2, [r7, #24]
 8007ea8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007eaa:	8b3b      	ldrh	r3, [r7, #24]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 fb3f 	bl	8008534 <USBH_CtlReq>
 8007eb6:	4603      	mov	r3, r0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	789b      	ldrb	r3, [r3, #2]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10f      	bne.n	8007ef4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2205      	movs	r2, #5
 8007ede:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb1b 	bl	8008534 <USBH_CtlReq>
 8007efe:	4603      	mov	r3, r0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	789b      	ldrb	r3, [r3, #2]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d10e      	bne.n	8007f3a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2209      	movs	r2, #9
 8007f26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	887a      	ldrh	r2, [r7, #2]
 8007f2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 faf8 	bl	8008534 <USBH_CtlReq>
 8007f44:	4603      	mov	r3, r0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	789b      	ldrb	r3, [r3, #2]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d10f      	bne.n	8007f82 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f82:	2200      	movs	r2, #0
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fad4 	bl	8008534 <USBH_CtlReq>
 8007f8c:	4603      	mov	r3, r0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	789b      	ldrb	r3, [r3, #2]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d10f      	bne.n	8007fca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2100      	movs	r1, #0
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fab0 	bl	8008534 <USBH_CtlReq>
 8007fd4:	4603      	mov	r3, r0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	785a      	ldrb	r2, [r3, #1]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	3302      	adds	r3, #2
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b29a      	uxth	r2, r3
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3303      	adds	r3, #3
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	b29b      	uxth	r3, r3
 8008012:	4313      	orrs	r3, r2
 8008014:	b29a      	uxth	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	791a      	ldrb	r2, [r3, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	795a      	ldrb	r2, [r3, #5]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	799a      	ldrb	r2, [r3, #6]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	79da      	ldrb	r2, [r3, #7]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	79db      	ldrb	r3, [r3, #7]
 800803e:	2b20      	cmp	r3, #32
 8008040:	dc0f      	bgt.n	8008062 <USBH_ParseDevDesc+0x82>
 8008042:	2b08      	cmp	r3, #8
 8008044:	db14      	blt.n	8008070 <USBH_ParseDevDesc+0x90>
 8008046:	3b08      	subs	r3, #8
 8008048:	4a2d      	ldr	r2, [pc, #180]	; (8008100 <USBH_ParseDevDesc+0x120>)
 800804a:	fa22 f303 	lsr.w	r3, r2, r3
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	bf14      	ite	ne
 8008056:	2301      	movne	r3, #1
 8008058:	2300      	moveq	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <USBH_ParseDevDesc+0x86>
 8008060:	e006      	b.n	8008070 <USBH_ParseDevDesc+0x90>
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d104      	bne.n	8008070 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	79da      	ldrb	r2, [r3, #7]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	71da      	strb	r2, [r3, #7]
      break;
 800806e:	e003      	b.n	8008078 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2240      	movs	r2, #64	; 0x40
 8008074:	71da      	strb	r2, [r3, #7]
      break;
 8008076:	bf00      	nop
  }

  if (length > 8U)
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	2b08      	cmp	r3, #8
 800807c:	d939      	bls.n	80080f2 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	3308      	adds	r3, #8
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	b29a      	uxth	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	3309      	adds	r3, #9
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	021b      	lsls	r3, r3, #8
 8008090:	b29b      	uxth	r3, r3
 8008092:	4313      	orrs	r3, r2
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	330a      	adds	r3, #10
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	330b      	adds	r3, #11
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	330c      	adds	r3, #12
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	330d      	adds	r3, #13
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	7b9a      	ldrb	r2, [r3, #14]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	7bda      	ldrb	r2, [r3, #15]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	7c1a      	ldrb	r2, [r3, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	7c5a      	ldrb	r2, [r3, #17]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	745a      	strb	r2, [r3, #17]
  }
}
 80080f2:	bf00      	nop
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	01000101 	.word	0x01000101

08008104 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08c      	sub	sp, #48	; 0x30
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008118:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	785a      	ldrb	r2, [r3, #1]
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	3302      	adds	r3, #2
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b29a      	uxth	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	3303      	adds	r3, #3
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	b29b      	uxth	r3, r3
 8008158:	4313      	orrs	r3, r2
 800815a:	b29b      	uxth	r3, r3
 800815c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008160:	bf28      	it	cs
 8008162:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008166:	b29a      	uxth	r2, r3
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	791a      	ldrb	r2, [r3, #4]
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	795a      	ldrb	r2, [r3, #5]
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	799a      	ldrb	r2, [r3, #6]
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	79da      	ldrb	r2, [r3, #7]
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	7a1a      	ldrb	r2, [r3, #8]
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b09      	cmp	r3, #9
 800819a:	d002      	beq.n	80081a2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2209      	movs	r2, #9
 80081a0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	2b09      	cmp	r3, #9
 80081a6:	f240 809d 	bls.w	80082e4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80081aa:	2309      	movs	r3, #9
 80081ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081b2:	e081      	b.n	80082b8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081b4:	f107 0316 	add.w	r3, r7, #22
 80081b8:	4619      	mov	r1, r3
 80081ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081bc:	f000 f99f 	bl	80084fe <USBH_GetNextDesc>
 80081c0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d176      	bne.n	80082b8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b09      	cmp	r3, #9
 80081d0:	d002      	beq.n	80081d8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	2209      	movs	r2, #9
 80081d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80081d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081dc:	221a      	movs	r2, #26
 80081de:	fb02 f303 	mul.w	r3, r2, r3
 80081e2:	3308      	adds	r3, #8
 80081e4:	6a3a      	ldr	r2, [r7, #32]
 80081e6:	4413      	add	r3, r2
 80081e8:	3302      	adds	r3, #2
 80081ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80081ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ee:	69f8      	ldr	r0, [r7, #28]
 80081f0:	f000 f87e 	bl	80082f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081fe:	e043      	b.n	8008288 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008200:	f107 0316 	add.w	r3, r7, #22
 8008204:	4619      	mov	r1, r3
 8008206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008208:	f000 f979 	bl	80084fe <USBH_GetNextDesc>
 800820c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	785b      	ldrb	r3, [r3, #1]
 8008212:	2b05      	cmp	r3, #5
 8008214:	d138      	bne.n	8008288 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d10f      	bne.n	800823e <USBH_ParseCfgDesc+0x13a>
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	799b      	ldrb	r3, [r3, #6]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d10b      	bne.n	800823e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	79db      	ldrb	r3, [r3, #7]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10f      	bne.n	800824e <USBH_ParseCfgDesc+0x14a>
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b09      	cmp	r3, #9
 8008234:	d00b      	beq.n	800824e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2209      	movs	r2, #9
 800823a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800823c:	e007      	b.n	800824e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b07      	cmp	r3, #7
 8008244:	d004      	beq.n	8008250 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	2207      	movs	r2, #7
 800824a:	701a      	strb	r2, [r3, #0]
 800824c:	e000      	b.n	8008250 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800824e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008254:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008258:	3201      	adds	r2, #1
 800825a:	00d2      	lsls	r2, r2, #3
 800825c:	211a      	movs	r1, #26
 800825e:	fb01 f303 	mul.w	r3, r1, r3
 8008262:	4413      	add	r3, r2
 8008264:	3308      	adds	r3, #8
 8008266:	6a3a      	ldr	r2, [r7, #32]
 8008268:	4413      	add	r3, r2
 800826a:	3304      	adds	r3, #4
 800826c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800826e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008270:	69b9      	ldr	r1, [r7, #24]
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 f86b 	bl	800834e <USBH_ParseEPDesc>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800827e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008282:	3301      	adds	r3, #1
 8008284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	791b      	ldrb	r3, [r3, #4]
 800828c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008290:	429a      	cmp	r2, r3
 8008292:	d204      	bcs.n	800829e <USBH_ParseCfgDesc+0x19a>
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	885a      	ldrh	r2, [r3, #2]
 8008298:	8afb      	ldrh	r3, [r7, #22]
 800829a:	429a      	cmp	r2, r3
 800829c:	d8b0      	bhi.n	8008200 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	791b      	ldrb	r3, [r3, #4]
 80082a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d201      	bcs.n	80082ae <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e01c      	b.n	80082e8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80082ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082b2:	3301      	adds	r3, #1
 80082b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d805      	bhi.n	80082cc <USBH_ParseCfgDesc+0x1c8>
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	885a      	ldrh	r2, [r3, #2]
 80082c4:	8afb      	ldrh	r3, [r7, #22]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	f63f af74 	bhi.w	80081b4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	791b      	ldrb	r3, [r3, #4]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	bf28      	it	cs
 80082d4:	2302      	movcs	r3, #2
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80082dc:	429a      	cmp	r2, r3
 80082de:	d201      	bcs.n	80082e4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e001      	b.n	80082e8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80082e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3730      	adds	r7, #48	; 0x30
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781a      	ldrb	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	785a      	ldrb	r2, [r3, #1]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	789a      	ldrb	r2, [r3, #2]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	78da      	ldrb	r2, [r3, #3]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	791a      	ldrb	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	795a      	ldrb	r2, [r3, #5]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	799a      	ldrb	r2, [r3, #6]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	79da      	ldrb	r2, [r3, #7]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	7a1a      	ldrb	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	721a      	strb	r2, [r3, #8]
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800834e:	b480      	push	{r7}
 8008350:	b087      	sub	sp, #28
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	781a      	ldrb	r2, [r3, #0]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	785a      	ldrb	r2, [r3, #1]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	789a      	ldrb	r2, [r3, #2]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	78da      	ldrb	r2, [r3, #3]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3304      	adds	r3, #4
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	b29a      	uxth	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3305      	adds	r3, #5
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	021b      	lsls	r3, r3, #8
 8008390:	b29b      	uxth	r3, r3
 8008392:	4313      	orrs	r3, r2
 8008394:	b29a      	uxth	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	799a      	ldrb	r2, [r3, #6]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	889b      	ldrh	r3, [r3, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80083aa:	2303      	movs	r3, #3
 80083ac:	75fb      	strb	r3, [r7, #23]
 80083ae:	e033      	b.n	8008418 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	889b      	ldrh	r3, [r3, #4]
 80083b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80083b8:	f023 0307 	bic.w	r3, r3, #7
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	889b      	ldrh	r3, [r3, #4]
 80083c6:	b21a      	sxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3304      	adds	r3, #4
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	b299      	uxth	r1, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3305      	adds	r3, #5
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	b29b      	uxth	r3, r3
 80083dc:	430b      	orrs	r3, r1
 80083de:	b29b      	uxth	r3, r3
 80083e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d110      	bne.n	800840a <USBH_ParseEPDesc+0xbc>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	b299      	uxth	r1, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3305      	adds	r3, #5
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	430b      	orrs	r3, r1
 80083fe:	b29b      	uxth	r3, r3
 8008400:	b21b      	sxth	r3, r3
 8008402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008406:	b21b      	sxth	r3, r3
 8008408:	e001      	b.n	800840e <USBH_ParseEPDesc+0xc0>
 800840a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800840e:	4313      	orrs	r3, r2
 8008410:	b21b      	sxth	r3, r3
 8008412:	b29a      	uxth	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800841e:	2b00      	cmp	r3, #0
 8008420:	d116      	bne.n	8008450 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	78db      	ldrb	r3, [r3, #3]
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	2b01      	cmp	r3, #1
 800842c:	d005      	beq.n	800843a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	78db      	ldrb	r3, [r3, #3]
 8008432:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008436:	2b03      	cmp	r3, #3
 8008438:	d127      	bne.n	800848a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	799b      	ldrb	r3, [r3, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <USBH_ParseEPDesc+0xfc>
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	799b      	ldrb	r3, [r3, #6]
 8008446:	2b10      	cmp	r3, #16
 8008448:	d91f      	bls.n	800848a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800844a:	2303      	movs	r3, #3
 800844c:	75fb      	strb	r3, [r7, #23]
 800844e:	e01c      	b.n	800848a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	78db      	ldrb	r3, [r3, #3]
 8008454:	f003 0303 	and.w	r3, r3, #3
 8008458:	2b01      	cmp	r3, #1
 800845a:	d10a      	bne.n	8008472 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	799b      	ldrb	r3, [r3, #6]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <USBH_ParseEPDesc+0x11e>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	799b      	ldrb	r3, [r3, #6]
 8008468:	2b10      	cmp	r3, #16
 800846a:	d90e      	bls.n	800848a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800846c:	2303      	movs	r3, #3
 800846e:	75fb      	strb	r3, [r7, #23]
 8008470:	e00b      	b.n	800848a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	78db      	ldrb	r3, [r3, #3]
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	2b03      	cmp	r3, #3
 800847c:	d105      	bne.n	800848a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	799b      	ldrb	r3, [r3, #6]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008486:	2303      	movs	r3, #3
 8008488:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
}
 800848c:	4618      	mov	r0, r3
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3301      	adds	r3, #1
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d120      	bne.n	80084f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	1e9a      	subs	r2, r3, #2
 80084b6:	88fb      	ldrh	r3, [r7, #6]
 80084b8:	4293      	cmp	r3, r2
 80084ba:	bf28      	it	cs
 80084bc:	4613      	movcs	r3, r2
 80084be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3302      	adds	r3, #2
 80084c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084c6:	2300      	movs	r3, #0
 80084c8:	82fb      	strh	r3, [r7, #22]
 80084ca:	e00b      	b.n	80084e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084cc:	8afb      	ldrh	r3, [r7, #22]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	3301      	adds	r3, #1
 80084dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084de:	8afb      	ldrh	r3, [r7, #22]
 80084e0:	3302      	adds	r3, #2
 80084e2:	82fb      	strh	r3, [r7, #22]
 80084e4:	8afa      	ldrh	r2, [r7, #22]
 80084e6:	8abb      	ldrh	r3, [r7, #20]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d3ef      	bcc.n	80084cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
  }
}
 80084f2:	bf00      	nop
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	881a      	ldrh	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	4413      	add	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008526:	68fb      	ldr	r3, [r7, #12]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	789b      	ldrb	r3, [r3, #2]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d002      	beq.n	8008554 <USBH_CtlReq+0x20>
 800854e:	2b02      	cmp	r3, #2
 8008550:	d00f      	beq.n	8008572 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008552:	e027      	b.n	80085a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	88fa      	ldrh	r2, [r7, #6]
 800855e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2201      	movs	r2, #1
 8008564:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2202      	movs	r2, #2
 800856a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800856c:	2301      	movs	r3, #1
 800856e:	75fb      	strb	r3, [r7, #23]
      break;
 8008570:	e018      	b.n	80085a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f81c 	bl	80085b0 <USBH_HandleControl>
 8008578:	4603      	mov	r3, r0
 800857a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800857c:	7dfb      	ldrb	r3, [r7, #23]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <USBH_CtlReq+0x54>
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	2b03      	cmp	r3, #3
 8008586:	d106      	bne.n	8008596 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	761a      	strb	r2, [r3, #24]
      break;
 8008594:	e005      	b.n	80085a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d102      	bne.n	80085a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	709a      	strb	r2, [r3, #2]
      break;
 80085a2:	bf00      	nop
  }
  return status;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085b8:	2301      	movs	r3, #1
 80085ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085bc:	2300      	movs	r3, #0
 80085be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	7e1b      	ldrb	r3, [r3, #24]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	2b0a      	cmp	r3, #10
 80085c8:	f200 8156 	bhi.w	8008878 <USBH_HandleControl+0x2c8>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBH_HandleControl+0x24>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	08008601 	.word	0x08008601
 80085d8:	0800861b 	.word	0x0800861b
 80085dc:	08008685 	.word	0x08008685
 80085e0:	080086ab 	.word	0x080086ab
 80085e4:	080086e3 	.word	0x080086e3
 80085e8:	0800870d 	.word	0x0800870d
 80085ec:	0800875f 	.word	0x0800875f
 80085f0:	08008781 	.word	0x08008781
 80085f4:	080087bd 	.word	0x080087bd
 80085f8:	080087e3 	.word	0x080087e3
 80085fc:	08008821 	.word	0x08008821
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f103 0110 	add.w	r1, r3, #16
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	795b      	ldrb	r3, [r3, #5]
 800860a:	461a      	mov	r2, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f943 	bl	8008898 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	761a      	strb	r2, [r3, #24]
      break;
 8008618:	e139      	b.n	800888e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	795b      	ldrb	r3, [r3, #5]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fcc5 	bl	8008fb0 <USBH_LL_GetURBState>
 8008626:	4603      	mov	r3, r0
 8008628:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d11e      	bne.n	800866e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7c1b      	ldrb	r3, [r3, #16]
 8008634:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008638:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8adb      	ldrh	r3, [r3, #22]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008642:	7b7b      	ldrb	r3, [r7, #13]
 8008644:	2b80      	cmp	r3, #128	; 0x80
 8008646:	d103      	bne.n	8008650 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2203      	movs	r2, #3
 800864c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800864e:	e115      	b.n	800887c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2205      	movs	r2, #5
 8008654:	761a      	strb	r2, [r3, #24]
      break;
 8008656:	e111      	b.n	800887c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008658:	7b7b      	ldrb	r3, [r7, #13]
 800865a:	2b80      	cmp	r3, #128	; 0x80
 800865c:	d103      	bne.n	8008666 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2209      	movs	r2, #9
 8008662:	761a      	strb	r2, [r3, #24]
      break;
 8008664:	e10a      	b.n	800887c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2207      	movs	r2, #7
 800866a:	761a      	strb	r2, [r3, #24]
      break;
 800866c:	e106      	b.n	800887c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b04      	cmp	r3, #4
 8008672:	d003      	beq.n	800867c <USBH_HandleControl+0xcc>
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b02      	cmp	r3, #2
 8008678:	f040 8100 	bne.w	800887c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	220b      	movs	r2, #11
 8008680:	761a      	strb	r2, [r3, #24]
      break;
 8008682:	e0fb      	b.n	800887c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6899      	ldr	r1, [r3, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	899a      	ldrh	r2, [r3, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	791b      	ldrb	r3, [r3, #4]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f93a 	bl	8008916 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2204      	movs	r2, #4
 80086a6:	761a      	strb	r2, [r3, #24]
      break;
 80086a8:	e0f1      	b.n	800888e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	791b      	ldrb	r3, [r3, #4]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fc7d 	bl	8008fb0 <USBH_LL_GetURBState>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d102      	bne.n	80086c6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2209      	movs	r2, #9
 80086c4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b05      	cmp	r3, #5
 80086ca:	d102      	bne.n	80086d2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086cc:	2303      	movs	r3, #3
 80086ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086d0:	e0d6      	b.n	8008880 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	f040 80d3 	bne.w	8008880 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	220b      	movs	r2, #11
 80086de:	761a      	strb	r2, [r3, #24]
      break;
 80086e0:	e0ce      	b.n	8008880 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6899      	ldr	r1, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	899a      	ldrh	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	795b      	ldrb	r3, [r3, #5]
 80086ee:	2001      	movs	r0, #1
 80086f0:	9000      	str	r0, [sp, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f8ea 	bl	80088cc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086fe:	b29a      	uxth	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2206      	movs	r2, #6
 8008708:	761a      	strb	r2, [r3, #24]
      break;
 800870a:	e0c0      	b.n	800888e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	795b      	ldrb	r3, [r3, #5]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc4c 	bl	8008fb0 <USBH_LL_GetURBState>
 8008718:	4603      	mov	r3, r0
 800871a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d103      	bne.n	800872a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2207      	movs	r2, #7
 8008726:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008728:	e0ac      	b.n	8008884 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b05      	cmp	r3, #5
 800872e:	d105      	bne.n	800873c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	220c      	movs	r2, #12
 8008734:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008736:	2303      	movs	r3, #3
 8008738:	73fb      	strb	r3, [r7, #15]
      break;
 800873a:	e0a3      	b.n	8008884 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d103      	bne.n	800874a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2205      	movs	r2, #5
 8008746:	761a      	strb	r2, [r3, #24]
      break;
 8008748:	e09c      	b.n	8008884 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b04      	cmp	r3, #4
 800874e:	f040 8099 	bne.w	8008884 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	220b      	movs	r2, #11
 8008756:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008758:	2302      	movs	r3, #2
 800875a:	73fb      	strb	r3, [r7, #15]
      break;
 800875c:	e092      	b.n	8008884 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	791b      	ldrb	r3, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	2100      	movs	r1, #0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8d5 	bl	8008916 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008772:	b29a      	uxth	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2208      	movs	r2, #8
 800877c:	761a      	strb	r2, [r3, #24]

      break;
 800877e:	e086      	b.n	800888e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	791b      	ldrb	r3, [r3, #4]
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fc12 	bl	8008fb0 <USBH_LL_GetURBState>
 800878c:	4603      	mov	r3, r0
 800878e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d105      	bne.n	80087a2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	220d      	movs	r2, #13
 800879a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087a0:	e072      	b.n	8008888 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d103      	bne.n	80087b0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	220b      	movs	r2, #11
 80087ac:	761a      	strb	r2, [r3, #24]
      break;
 80087ae:	e06b      	b.n	8008888 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d168      	bne.n	8008888 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087b6:	2303      	movs	r3, #3
 80087b8:	73fb      	strb	r3, [r7, #15]
      break;
 80087ba:	e065      	b.n	8008888 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	795b      	ldrb	r3, [r3, #5]
 80087c0:	2201      	movs	r2, #1
 80087c2:	9200      	str	r2, [sp, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2100      	movs	r1, #0
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f87f 	bl	80088cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	220a      	movs	r2, #10
 80087de:	761a      	strb	r2, [r3, #24]
      break;
 80087e0:	e055      	b.n	800888e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	795b      	ldrb	r3, [r3, #5]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fbe1 	bl	8008fb0 <USBH_LL_GetURBState>
 80087ee:	4603      	mov	r3, r0
 80087f0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d105      	bne.n	8008804 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	220d      	movs	r2, #13
 8008800:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008802:	e043      	b.n	800888c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d103      	bne.n	8008812 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2209      	movs	r2, #9
 800880e:	761a      	strb	r2, [r3, #24]
      break;
 8008810:	e03c      	b.n	800888c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b04      	cmp	r3, #4
 8008816:	d139      	bne.n	800888c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	220b      	movs	r2, #11
 800881c:	761a      	strb	r2, [r3, #24]
      break;
 800881e:	e035      	b.n	800888c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7e5b      	ldrb	r3, [r3, #25]
 8008824:	3301      	adds	r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	765a      	strb	r2, [r3, #25]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7e5b      	ldrb	r3, [r3, #25]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d806      	bhi.n	8008842 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008840:	e025      	b.n	800888e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008848:	2106      	movs	r1, #6
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	795b      	ldrb	r3, [r3, #5]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f90c 	bl	8008a78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	791b      	ldrb	r3, [r3, #4]
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f906 	bl	8008a78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008872:	2302      	movs	r3, #2
 8008874:	73fb      	strb	r3, [r7, #15]
      break;
 8008876:	e00a      	b.n	800888e <USBH_HandleControl+0x2de>

    default:
      break;
 8008878:	bf00      	nop
 800887a:	e008      	b.n	800888e <USBH_HandleControl+0x2de>
      break;
 800887c:	bf00      	nop
 800887e:	e006      	b.n	800888e <USBH_HandleControl+0x2de>
      break;
 8008880:	bf00      	nop
 8008882:	e004      	b.n	800888e <USBH_HandleControl+0x2de>
      break;
 8008884:	bf00      	nop
 8008886:	e002      	b.n	800888e <USBH_HandleControl+0x2de>
      break;
 8008888:	bf00      	nop
 800888a:	e000      	b.n	800888e <USBH_HandleControl+0x2de>
      break;
 800888c:	bf00      	nop
  }

  return status;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af04      	add	r7, sp, #16
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4613      	mov	r3, r2
 80088a4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088a6:	79f9      	ldrb	r1, [r7, #7]
 80088a8:	2300      	movs	r3, #0
 80088aa:	9303      	str	r3, [sp, #12]
 80088ac:	2308      	movs	r3, #8
 80088ae:	9302      	str	r3, [sp, #8]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	2300      	movs	r3, #0
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	2300      	movs	r3, #0
 80088ba:	2200      	movs	r2, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fb46 	bl	8008f4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af04      	add	r7, sp, #16
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4611      	mov	r1, r2
 80088d8:	461a      	mov	r2, r3
 80088da:	460b      	mov	r3, r1
 80088dc:	80fb      	strh	r3, [r7, #6]
 80088de:	4613      	mov	r3, r2
 80088e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088f0:	7979      	ldrb	r1, [r7, #5]
 80088f2:	7e3b      	ldrb	r3, [r7, #24]
 80088f4:	9303      	str	r3, [sp, #12]
 80088f6:	88fb      	ldrh	r3, [r7, #6]
 80088f8:	9302      	str	r3, [sp, #8]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	2301      	movs	r3, #1
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	2300      	movs	r3, #0
 8008904:	2200      	movs	r2, #0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fb21 	bl	8008f4e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b088      	sub	sp, #32
 800891a:	af04      	add	r7, sp, #16
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	4611      	mov	r1, r2
 8008922:	461a      	mov	r2, r3
 8008924:	460b      	mov	r3, r1
 8008926:	80fb      	strh	r3, [r7, #6]
 8008928:	4613      	mov	r3, r2
 800892a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800892c:	7979      	ldrb	r1, [r7, #5]
 800892e:	2300      	movs	r3, #0
 8008930:	9303      	str	r3, [sp, #12]
 8008932:	88fb      	ldrh	r3, [r7, #6]
 8008934:	9302      	str	r3, [sp, #8]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	2301      	movs	r3, #1
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	2201      	movs	r2, #1
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 fb03 	bl	8008f4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008948:	2300      	movs	r3, #0

}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b088      	sub	sp, #32
 8008956:	af04      	add	r7, sp, #16
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	4611      	mov	r1, r2
 800895e:	461a      	mov	r2, r3
 8008960:	460b      	mov	r3, r1
 8008962:	80fb      	strh	r3, [r7, #6]
 8008964:	4613      	mov	r3, r2
 8008966:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008976:	7979      	ldrb	r1, [r7, #5]
 8008978:	7e3b      	ldrb	r3, [r7, #24]
 800897a:	9303      	str	r3, [sp, #12]
 800897c:	88fb      	ldrh	r3, [r7, #6]
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	2301      	movs	r3, #1
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	2302      	movs	r3, #2
 800898a:	2200      	movs	r2, #0
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fade 	bl	8008f4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af04      	add	r7, sp, #16
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4611      	mov	r1, r2
 80089a8:	461a      	mov	r2, r3
 80089aa:	460b      	mov	r3, r1
 80089ac:	80fb      	strh	r3, [r7, #6]
 80089ae:	4613      	mov	r3, r2
 80089b0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089b2:	7979      	ldrb	r1, [r7, #5]
 80089b4:	2300      	movs	r3, #0
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	9302      	str	r3, [sp, #8]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	2301      	movs	r3, #1
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2302      	movs	r3, #2
 80089c6:	2201      	movs	r2, #1
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fac0 	bl	8008f4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af04      	add	r7, sp, #16
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	4608      	mov	r0, r1
 80089e2:	4611      	mov	r1, r2
 80089e4:	461a      	mov	r2, r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	70fb      	strb	r3, [r7, #3]
 80089ea:	460b      	mov	r3, r1
 80089ec:	70bb      	strb	r3, [r7, #2]
 80089ee:	4613      	mov	r3, r2
 80089f0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089f2:	7878      	ldrb	r0, [r7, #1]
 80089f4:	78ba      	ldrb	r2, [r7, #2]
 80089f6:	78f9      	ldrb	r1, [r7, #3]
 80089f8:	8b3b      	ldrh	r3, [r7, #24]
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	7d3b      	ldrb	r3, [r7, #20]
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	7c3b      	ldrb	r3, [r7, #16]
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	4603      	mov	r3, r0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fa53 	bl	8008eb2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa72 	bl	8008f10 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f836 	bl	8008ab4 <USBH_GetFreePipe>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a4c:	89fb      	ldrh	r3, [r7, #14]
 8008a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00a      	beq.n	8008a6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	89fb      	ldrh	r3, [r7, #14]
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	33e0      	adds	r3, #224	; 0xe0
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	440b      	add	r3, r1
 8008a6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a6c:	89fb      	ldrh	r3, [r7, #14]
 8008a6e:	b2db      	uxtb	r3, r3
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	2b0f      	cmp	r3, #15
 8008a88:	d80d      	bhi.n	8008aa6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	33e0      	adds	r3, #224	; 0xe0
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	33e0      	adds	r3, #224	; 0xe0
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
 8008ac4:	e00f      	b.n	8008ae6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	33e0      	adds	r3, #224	; 0xe0
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	e007      	b.n	8008af0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	73fb      	strb	r3, [r7, #15]
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b0f      	cmp	r3, #15
 8008aea:	d9ec      	bls.n	8008ac6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b00:	2201      	movs	r2, #1
 8008b02:	490e      	ldr	r1, [pc, #56]	; (8008b3c <MX_USB_HOST_Init+0x40>)
 8008b04:	480e      	ldr	r0, [pc, #56]	; (8008b40 <MX_USB_HOST_Init+0x44>)
 8008b06:	f7fe fba5 	bl	8007254 <USBH_Init>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b10:	f7f8 f866 	bl	8000be0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b14:	490b      	ldr	r1, [pc, #44]	; (8008b44 <MX_USB_HOST_Init+0x48>)
 8008b16:	480a      	ldr	r0, [pc, #40]	; (8008b40 <MX_USB_HOST_Init+0x44>)
 8008b18:	f7fe fc2a 	bl	8007370 <USBH_RegisterClass>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b22:	f7f8 f85d 	bl	8000be0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b26:	4806      	ldr	r0, [pc, #24]	; (8008b40 <MX_USB_HOST_Init+0x44>)
 8008b28:	f7fe fcae 	bl	8007488 <USBH_Start>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b32:	f7f8 f855 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b36:	bf00      	nop
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08008b5d 	.word	0x08008b5d
 8008b40:	20000300 	.word	0x20000300
 8008b44:	2000000c 	.word	0x2000000c

08008b48 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b4c:	4802      	ldr	r0, [pc, #8]	; (8008b58 <MX_USB_HOST_Process+0x10>)
 8008b4e:	f7fe fcab 	bl	80074a8 <USBH_Process>
}
 8008b52:	bf00      	nop
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000300 	.word	0x20000300

08008b5c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d819      	bhi.n	8008ba4 <USBH_UserProcess+0x48>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <USBH_UserProcess+0x1c>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	08008b95 	.word	0x08008b95
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008b9d 	.word	0x08008b9d
 8008b88:	08008b8d 	.word	0x08008b8d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b8c:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <USBH_UserProcess+0x58>)
 8008b8e:	2203      	movs	r2, #3
 8008b90:	701a      	strb	r2, [r3, #0]
  break;
 8008b92:	e008      	b.n	8008ba6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b94:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <USBH_UserProcess+0x58>)
 8008b96:	2202      	movs	r2, #2
 8008b98:	701a      	strb	r2, [r3, #0]
  break;
 8008b9a:	e004      	b.n	8008ba6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <USBH_UserProcess+0x58>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	701a      	strb	r2, [r3, #0]
  break;
 8008ba2:	e000      	b.n	8008ba6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ba4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	200006d8 	.word	0x200006d8

08008bb8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	; 0x28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bc0:	f107 0314 	add.w	r3, r7, #20
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	605a      	str	r2, [r3, #4]
 8008bca:	609a      	str	r2, [r3, #8]
 8008bcc:	60da      	str	r2, [r3, #12]
 8008bce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd8:	d147      	bne.n	8008c6a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	4a24      	ldr	r2, [pc, #144]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008be4:	f043 0301 	orr.w	r3, r3, #1
 8008be8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bea:	4b22      	ldr	r3, [pc, #136]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	4619      	mov	r1, r3
 8008c0a:	481b      	ldr	r0, [pc, #108]	; (8008c78 <HAL_HCD_MspInit+0xc0>)
 8008c0c:	f7f8 ff5e 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c16:	2302      	movs	r3, #2
 8008c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c22:	230a      	movs	r3, #10
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c26:	f107 0314 	add.w	r3, r7, #20
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	4812      	ldr	r0, [pc, #72]	; (8008c78 <HAL_HCD_MspInit+0xc0>)
 8008c2e:	f7f8 ff4d 	bl	8001acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c32:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c36:	4a0f      	ldr	r2, [pc, #60]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3c:	6353      	str	r3, [r2, #52]	; 0x34
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c46:	4a0b      	ldr	r2, [pc, #44]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c4e:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <HAL_HCD_MspInit+0xbc>)
 8008c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	2043      	movs	r0, #67	; 0x43
 8008c60:	f7f8 fb8d 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c64:	2043      	movs	r0, #67	; 0x43
 8008c66:	f7f8 fba6 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	3728      	adds	r7, #40	; 0x28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	40023800 	.word	0x40023800
 8008c78:	40020000 	.word	0x40020000

08008c7c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe ffeb 	bl	8007c66 <USBH_LL_IncTimer>
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff f823 	bl	8007cf2 <USBH_LL_Connect>
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff f82c 	bl	8007d20 <USBH_LL_Disconnect>
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe ffdd 	bl	8007cba <USBH_LL_PortEnabled>
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe ffdd 	bl	8007cd6 <USBH_LL_PortDisabled>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d12a      	bne.n	8008d8c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d36:	4a18      	ldr	r2, [pc, #96]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d42:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d46:	4b14      	ldr	r3, [pc, #80]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d4c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d4e:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d50:	2208      	movs	r2, #8
 8008d52:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d54:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d60:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d62:	2202      	movs	r2, #2
 8008d64:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d66:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d6c:	480a      	ldr	r0, [pc, #40]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d6e:	f7f9 f864 	bl	8001e3a <HAL_HCD_Init>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d78:	f7f7 ff32 	bl	8000be0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d7c:	4806      	ldr	r0, [pc, #24]	; (8008d98 <USBH_LL_Init+0x74>)
 8008d7e:	f7f9 fc48 	bl	8002612 <HAL_HCD_GetCurrentFrame>
 8008d82:	4603      	mov	r3, r0
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7fe ff5e 	bl	8007c48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200006dc 	.word	0x200006dc

08008d9c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f9 fbb7 	bl	8002526 <HAL_HCD_Start>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f95c 	bl	800907c <USBH_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7f9 fbbf 	bl	800256c <HAL_HCD_Stop>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 f941 	bl	800907c <USBH_Get_USB_Status>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e10:	2301      	movs	r3, #1
 8008e12:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f9 fc07 	bl	800262e <HAL_HCD_GetCurrentSpeed>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d00c      	beq.n	8008e40 <USBH_LL_GetSpeed+0x38>
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d80d      	bhi.n	8008e46 <USBH_LL_GetSpeed+0x3e>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <USBH_LL_GetSpeed+0x2c>
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d003      	beq.n	8008e3a <USBH_LL_GetSpeed+0x32>
 8008e32:	e008      	b.n	8008e46 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
    break;
 8008e38:	e008      	b.n	8008e4c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3e:	e005      	b.n	8008e4c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e40:	2302      	movs	r3, #2
 8008e42:	73fb      	strb	r3, [r7, #15]
    break;
 8008e44:	e002      	b.n	8008e4c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e46:	2301      	movs	r3, #1
 8008e48:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4a:	bf00      	nop
  }
  return  speed;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7f9 fb9a 	bl	80025a6 <HAL_HCD_ResetPort>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f8ff 	bl	800907c <USBH_Get_USB_Status>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7f9 fba1 	bl	80025ea <HAL_HCD_HC_GetXferCount>
 8008ea8:	4603      	mov	r3, r0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008eb2:	b590      	push	{r4, r7, lr}
 8008eb4:	b089      	sub	sp, #36	; 0x24
 8008eb6:	af04      	add	r7, sp, #16
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	4608      	mov	r0, r1
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	70fb      	strb	r3, [r7, #3]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70bb      	strb	r3, [r7, #2]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008eda:	787c      	ldrb	r4, [r7, #1]
 8008edc:	78ba      	ldrb	r2, [r7, #2]
 8008ede:	78f9      	ldrb	r1, [r7, #3]
 8008ee0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ee2:	9302      	str	r3, [sp, #8]
 8008ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	f7f9 f804 	bl	8001efe <HAL_HCD_HC_Init>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 f8bd 	bl	800907c <USBH_Get_USB_Status>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd90      	pop	{r4, r7, pc}

08008f10 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f9 f874 	bl	800201c <HAL_HCD_HC_Halt>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 f89e 	bl	800907c <USBH_Get_USB_Status>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f4e:	b590      	push	{r4, r7, lr}
 8008f50:	b089      	sub	sp, #36	; 0x24
 8008f52:	af04      	add	r7, sp, #16
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	4608      	mov	r0, r1
 8008f58:	4611      	mov	r1, r2
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	70fb      	strb	r3, [r7, #3]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70bb      	strb	r3, [r7, #2]
 8008f64:	4613      	mov	r3, r2
 8008f66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f76:	787c      	ldrb	r4, [r7, #1]
 8008f78:	78ba      	ldrb	r2, [r7, #2]
 8008f7a:	78f9      	ldrb	r1, [r7, #3]
 8008f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f80:	9303      	str	r3, [sp, #12]
 8008f82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	4623      	mov	r3, r4
 8008f92:	f7f9 f867 	bl	8002064 <HAL_HCD_HC_SubmitRequest>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 f86d 	bl	800907c <USBH_Get_USB_Status>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd90      	pop	{r4, r7, pc}

08008fb0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fc2:	78fa      	ldrb	r2, [r7, #3]
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7f9 fafb 	bl	80025c2 <HAL_HCD_HC_GetURBState>
 8008fcc:	4603      	mov	r3, r0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d103      	bne.n	8008ff4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f870 	bl	80090d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ff4:	20c8      	movs	r0, #200	; 0xc8
 8008ff6:	f7f8 f8c3 	bl	8001180 <HAL_Delay>
  return USBH_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
 8009010:	4613      	mov	r3, r2
 8009012:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800901a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	212c      	movs	r1, #44	; 0x2c
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	4413      	add	r3, r2
 8009028:	333b      	adds	r3, #59	; 0x3b
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d009      	beq.n	8009044 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	212c      	movs	r1, #44	; 0x2c
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	3354      	adds	r3, #84	; 0x54
 800903e:	78ba      	ldrb	r2, [r7, #2]
 8009040:	701a      	strb	r2, [r3, #0]
 8009042:	e008      	b.n	8009056 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	212c      	movs	r1, #44	; 0x2c
 800904a:	fb01 f303 	mul.w	r3, r1, r3
 800904e:	4413      	add	r3, r2
 8009050:	3355      	adds	r3, #85	; 0x55
 8009052:	78ba      	ldrb	r2, [r7, #2]
 8009054:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7f8 f887 	bl	8001180 <HAL_Delay>
}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	2b03      	cmp	r3, #3
 800908e:	d817      	bhi.n	80090c0 <USBH_Get_USB_Status+0x44>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <USBH_Get_USB_Status+0x1c>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090a9 	.word	0x080090a9
 800909c:	080090af 	.word	0x080090af
 80090a0:	080090b5 	.word	0x080090b5
 80090a4:	080090bb 	.word	0x080090bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
    break;
 80090ac:	e00b      	b.n	80090c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090ae:	2302      	movs	r3, #2
 80090b0:	73fb      	strb	r3, [r7, #15]
    break;
 80090b2:	e008      	b.n	80090c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090b4:	2301      	movs	r3, #1
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	e005      	b.n	80090c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090ba:	2302      	movs	r3, #2
 80090bc:	73fb      	strb	r3, [r7, #15]
    break;
 80090be:	e002      	b.n	80090c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090c0:	2302      	movs	r3, #2
 80090c2:	73fb      	strb	r3, [r7, #15]
    break;
 80090c4:	bf00      	nop
  }
  return usb_status;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
 80090ec:	e001      	b.n	80090f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80090ee:	2301      	movs	r3, #1
 80090f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	461a      	mov	r2, r3
 80090f6:	2101      	movs	r1, #1
 80090f8:	4803      	ldr	r0, [pc, #12]	; (8009108 <MX_DriverVbusFS+0x34>)
 80090fa:	f7f8 fe6b 	bl	8001dd4 <HAL_GPIO_WritePin>
}
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	40020800 	.word	0x40020800

0800910c <initializeApplication>:
		{.function = stateLED3, .stateTransitionCondition = FALSE},
		{.function = stateLED4, .stateTransitionCondition = FALSE}
};

uint8_t initializeApplication(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
	timerAppInit();						//systick initialze
 8009110:	f000 f892 	bl	8009238 <timerAppInit>
	startTimer(STATE_TIMER_TAG, 1000);	//timer initialize 1 s
 8009114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009118:	2000      	movs	r0, #0
 800911a:	f000 f893 	bl	8009244 <startTimer>

	currentState = stateLed1;			// initialze the state machine
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <initializeApplication+0x30>)
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]
	txMessage.datas.initial = 0xAA;		// initialize completed flag
 8009124:	4b06      	ldr	r3, [pc, #24]	; (8009140 <initializeApplication+0x34>)
 8009126:	22aa      	movs	r2, #170	; 0xaa
 8009128:	701a      	strb	r2, [r3, #0]

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 800912a:	2205      	movs	r2, #5
 800912c:	4904      	ldr	r1, [pc, #16]	; (8009140 <initializeApplication+0x34>)
 800912e:	4805      	ldr	r0, [pc, #20]	; (8009144 <initializeApplication+0x38>)
 8009130:	f000 f93a 	bl	80093a8 <uartSendDMA>
 8009134:	4603      	mov	r3, r0
}
 8009136:	4618      	mov	r0, r3
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	200009e0 	.word	0x200009e0
 8009140:	200009e4 	.word	0x200009e4
 8009144:	200001f8 	.word	0x200001f8

08009148 <stateLED1>:

uint8_t stateLED1(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
	currentState = stateLed2;
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <stateLED1+0x2c>)
 800914e:	2201      	movs	r2, #1
 8009150:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led1 = 0xBB;		// initialize completed flag
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <stateLED1+0x30>)
 8009154:	22bb      	movs	r2, #187	; 0xbb
 8009156:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8009158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800915c:	4807      	ldr	r0, [pc, #28]	; (800917c <stateLED1+0x34>)
 800915e:	f7f8 fe52 	bl	8001e06 <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 8009162:	2205      	movs	r2, #5
 8009164:	4904      	ldr	r1, [pc, #16]	; (8009178 <stateLED1+0x30>)
 8009166:	4806      	ldr	r0, [pc, #24]	; (8009180 <stateLED1+0x38>)
 8009168:	f000 f91e 	bl	80093a8 <uartSendDMA>
 800916c:	4603      	mov	r3, r0
}
 800916e:	4618      	mov	r0, r3
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200009e0 	.word	0x200009e0
 8009178:	200009e4 	.word	0x200009e4
 800917c:	40020c00 	.word	0x40020c00
 8009180:	200001f8 	.word	0x200001f8

08009184 <stateLED2>:

uint8_t stateLED2(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
	currentState = stateLed3;
 8009188:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <stateLED2+0x2c>)
 800918a:	2202      	movs	r2, #2
 800918c:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led2 = 0xCC;		// initialize completed flag
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <stateLED2+0x30>)
 8009190:	22cc      	movs	r2, #204	; 0xcc
 8009192:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8009194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009198:	4807      	ldr	r0, [pc, #28]	; (80091b8 <stateLED2+0x34>)
 800919a:	f7f8 fe34 	bl	8001e06 <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 800919e:	2205      	movs	r2, #5
 80091a0:	4904      	ldr	r1, [pc, #16]	; (80091b4 <stateLED2+0x30>)
 80091a2:	4806      	ldr	r0, [pc, #24]	; (80091bc <stateLED2+0x38>)
 80091a4:	f000 f900 	bl	80093a8 <uartSendDMA>
 80091a8:	4603      	mov	r3, r0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200009e0 	.word	0x200009e0
 80091b4:	200009e4 	.word	0x200009e4
 80091b8:	40020c00 	.word	0x40020c00
 80091bc:	200001f8 	.word	0x200001f8

080091c0 <stateLED3>:

uint8_t stateLED3(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
	currentState = stateLed4;
 80091c4:	4b09      	ldr	r3, [pc, #36]	; (80091ec <stateLED3+0x2c>)
 80091c6:	2203      	movs	r2, #3
 80091c8:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led3 = 0xDD;		// initialize completed flag
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <stateLED3+0x30>)
 80091cc:	22dd      	movs	r2, #221	; 0xdd
 80091ce:	70da      	strb	r2, [r3, #3]
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80091d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80091d4:	4807      	ldr	r0, [pc, #28]	; (80091f4 <stateLED3+0x34>)
 80091d6:	f7f8 fe16 	bl	8001e06 <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 80091da:	2205      	movs	r2, #5
 80091dc:	4904      	ldr	r1, [pc, #16]	; (80091f0 <stateLED3+0x30>)
 80091de:	4806      	ldr	r0, [pc, #24]	; (80091f8 <stateLED3+0x38>)
 80091e0:	f000 f8e2 	bl	80093a8 <uartSendDMA>
 80091e4:	4603      	mov	r3, r0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	200009e0 	.word	0x200009e0
 80091f0:	200009e4 	.word	0x200009e4
 80091f4:	40020c00 	.word	0x40020c00
 80091f8:	200001f8 	.word	0x200001f8

080091fc <stateLED4>:

uint8_t stateLED4(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
	currentState = stateLed4;
 8009200:	4b09      	ldr	r3, [pc, #36]	; (8009228 <stateLED4+0x2c>)
 8009202:	2203      	movs	r2, #3
 8009204:	701a      	strb	r2, [r3, #0]
	txMessage.datas.led4 = 0xFF;		// initialize completed flag
 8009206:	4b09      	ldr	r3, [pc, #36]	; (800922c <stateLED4+0x30>)
 8009208:	22ff      	movs	r2, #255	; 0xff
 800920a:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800920c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009210:	4807      	ldr	r0, [pc, #28]	; (8009230 <stateLED4+0x34>)
 8009212:	f7f8 fdf8 	bl	8001e06 <HAL_GPIO_TogglePin>

	return ((uint8_t) uartSendDMA(&huart1, txMessage.datas.dataArray, sizeof(txMessage.datas.dataArray)));
 8009216:	2205      	movs	r2, #5
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <stateLED4+0x30>)
 800921a:	4806      	ldr	r0, [pc, #24]	; (8009234 <stateLED4+0x38>)
 800921c:	f000 f8c4 	bl	80093a8 <uartSendDMA>
 8009220:	4603      	mov	r3, r0
}
 8009222:	4618      	mov	r0, r3
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200009e0 	.word	0x200009e0
 800922c:	200009e4 	.word	0x200009e4
 8009230:	40020c00 	.word	0x40020c00
 8009234:	200001f8 	.word	0x200001f8

08009238 <timerAppInit>:
 *
 * Return: NONE
 *
 */
void timerAppInit(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
	systickinit();
 800923c:	f000 f8a6 	bl	800938c <systickinit>
}
 8009240:	bf00      	nop
 8009242:	bd80      	pop	{r7, pc}

08009244 <startTimer>:
 * NOTE: startTimer() fonksiyonu her çağırıldığında ilgili index'in Initial değerini günceller.
 * 		Fonksiyon döngü içerisinde sürekli kullanılırsa Initial değer sürekli güncelleneceği için
 * 		üstLimite hiçbir zaman ulaşılamayacaktır.
 */
void startTimer(uint8_t index, uint32_t upperLimit)
{
 8009244:	b590      	push	{r4, r7, lr}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	6039      	str	r1, [r7, #0]
 800924e:	71fb      	strb	r3, [r7, #7]
	timerControlArr[index].InitialValue = getSystickCount();
 8009250:	79fc      	ldrb	r4, [r7, #7]
 8009252:	f000 f8a2 	bl	800939a <getSystickCount>
 8009256:	4602      	mov	r2, r0
 8009258:	4914      	ldr	r1, [pc, #80]	; (80092ac <startTimer+0x68>)
 800925a:	4623      	mov	r3, r4
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4423      	add	r3, r4
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	440b      	add	r3, r1
 8009264:	601a      	str	r2, [r3, #0]
	timerControlArr[index].controlFlag = true;
 8009266:	79fa      	ldrb	r2, [r7, #7]
 8009268:	4910      	ldr	r1, [pc, #64]	; (80092ac <startTimer+0x68>)
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	440b      	add	r3, r1
 8009274:	3309      	adds	r3, #9
 8009276:	2201      	movs	r2, #1
 8009278:	701a      	strb	r2, [r3, #0]
	timerControlArr[index].resultFlag = false;
 800927a:	79fa      	ldrb	r2, [r7, #7]
 800927c:	490b      	ldr	r1, [pc, #44]	; (80092ac <startTimer+0x68>)
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	440b      	add	r3, r1
 8009288:	3308      	adds	r3, #8
 800928a:	2200      	movs	r2, #0
 800928c:	701a      	strb	r2, [r3, #0]
	timerControlArr[index].counterUpperLimit = upperLimit;
 800928e:	79fa      	ldrb	r2, [r7, #7]
 8009290:	4906      	ldr	r1, [pc, #24]	; (80092ac <startTimer+0x68>)
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	440b      	add	r3, r1
 800929c:	3304      	adds	r3, #4
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	601a      	str	r2, [r3, #0]
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd90      	pop	{r4, r7, pc}
 80092aa:	bf00      	nop
 80092ac:	200009ec 	.word	0x200009ec

080092b0 <controlTimer>:
 * 		kontrolünü sonlandırır ve result flag'ını HIGH ayarlar.
 *
 * Return: NONE
 */
void controlTimer(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
	uint32_t elapsedTime = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	603b      	str	r3, [r7, #0]

	for(int i = 0; i<NOFTIMER; i++)
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
 80092be:	e03a      	b.n	8009336 <controlTimer+0x86>
	{
		if(timerControlArr[i].controlFlag == true)		//kontrol flag'a bakılır
 80092c0:	4921      	ldr	r1, [pc, #132]	; (8009348 <controlTimer+0x98>)
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	440b      	add	r3, r1
 80092ce:	3309      	adds	r3, #9
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d02c      	beq.n	8009330 <controlTimer+0x80>
		{
			elapsedTime = (getSystickCount() - timerControlArr[i].InitialValue);
 80092d6:	f000 f860 	bl	800939a <getSystickCount>
 80092da:	4601      	mov	r1, r0
 80092dc:	481a      	ldr	r0, [pc, #104]	; (8009348 <controlTimer+0x98>)
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	4403      	add	r3, r0
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	1acb      	subs	r3, r1, r3
 80092ee:	603b      	str	r3, [r7, #0]
			if(timerControlArr[i].counterUpperLimit <= elapsedTime)		//istenen süre dolmuşsa
 80092f0:	4915      	ldr	r1, [pc, #84]	; (8009348 <controlTimer+0x98>)
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	440b      	add	r3, r1
 80092fe:	3304      	adds	r3, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	d313      	bcc.n	8009330 <controlTimer+0x80>
			{
				timerControlArr[i].resultFlag = true;		//Süre dolma flag'ı set edilir.
 8009308:	490f      	ldr	r1, [pc, #60]	; (8009348 <controlTimer+0x98>)
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	440b      	add	r3, r1
 8009316:	3308      	adds	r3, #8
 8009318:	2201      	movs	r2, #1
 800931a:	701a      	strb	r2, [r3, #0]
				timerControlArr[i].controlFlag = false;		//Tekrar kontrol edilmemesi için kontrol flag'ı false çekilir
 800931c:	490a      	ldr	r1, [pc, #40]	; (8009348 <controlTimer+0x98>)
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	440b      	add	r3, r1
 800932a:	3309      	adds	r3, #9
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<NOFTIMER; i++)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3301      	adds	r3, #1
 8009334:	607b      	str	r3, [r7, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b0f      	cmp	r3, #15
 800933a:	ddc1      	ble.n	80092c0 <controlTimer+0x10>
			}
		}
	}
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200009ec 	.word	0x200009ec

0800934c <getTimerResultStatus>:
 * Return: sayacın dolma durumunu 'bool' tipinde döndürür
 * 		TRUE 	=> Timer Dolmuştur
 * 		FALSE	=> Timer Dolmamıştır
 */
bool getTimerResultStatus(uint8_t index)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

	if(timerControlArr[index].resultFlag == true)
 800935a:	79fa      	ldrb	r2, [r7, #7]
 800935c:	490a      	ldr	r1, [pc, #40]	; (8009388 <getTimerResultStatus+0x3c>)
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	440b      	add	r3, r1
 8009368:	3308      	adds	r3, #8
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <getTimerResultStatus+0x2a>
	{
		res = true;
 8009370:	2301      	movs	r3, #1
 8009372:	73fb      	strb	r3, [r7, #15]
 8009374:	e001      	b.n	800937a <getTimerResultStatus+0x2e>
	}
	else
	{
		res = false;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	200009ec 	.word	0x200009ec

0800938c <systickinit>:
  * @note  Initiliazing step done automatically while setting up HAL_INIT and SystemClockConfig phase
  *
  * @retval None
  */
void systickinit(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 8009390:	2000      	movs	r0, #0
 8009392:	f7f7 fea5 	bl	80010e0 <HAL_InitTick>
}
 8009396:	bf00      	nop
 8009398:	bd80      	pop	{r7, pc}

0800939a <getSystickCount>:
  * @brief Provides a tick value in millisecond.
  *
  * @retval tick value
  */
uint32_t getSystickCount(void)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800939e:	f7f7 fee3 	bl	8001168 <HAL_GetTick>
 80093a2:	4603      	mov	r3, r0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <uartSendDMA>:
 *
 * NOTE: huart->Instance->SR kontrolü her STM32 ürünü için geçerli değildir.
 * 		 farklı bir işlemciye geçilmesi durumunda sadece HAL_UART_Transmit_DMA() fonksiyonu kullanılmalıdır.
 */
uint8_t uartSendDMA(void *handle, const uint8_t *bufferPtr, uint8_t size)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	71fb      	strb	r3, [r7, #7]
	int32_t ret = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]

	UART_HandleTypeDef *huart = (void *)handle;	//Cast void pointer to UART_HandleTypeDef type. Void pointer used for generic driver purposes
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	613b      	str	r3, [r7, #16]

	//Check whether transmission complete or not
	if(__HAL_UART_GET_FLAG(huart,UART_FLAG_TC))
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c8:	2b40      	cmp	r3, #64	; 0x40
 80093ca:	d117      	bne.n	80093fc <uartSendDMA+0x54>
	{
		//if transmission completed, clear transmission complete flag (TC)
		__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_TC);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093d4:	601a      	str	r2, [r3, #0]
		//To send new data configure the transmission state	--Mandatory!
		huart->gState = HAL_UART_STATE_READY;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2220      	movs	r2, #32
 80093da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		if(HAL_OK == HAL_UART_Transmit_DMA(handle, bufferPtr, size))	//Transmit new data
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	461a      	mov	r2, r3
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7fb fdd4 	bl	8004f94 <HAL_UART_Transmit_DMA>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <uartSendDMA+0x50>
		{
			ret = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	e001      	b.n	80093fc <uartSendDMA+0x54>
		}
		else
		{
			ret = 1;
 80093f8:	2301      	movs	r3, #1
 80093fa:	617b      	str	r3, [r7, #20]
	//		{
	//			ret = 1;
	//		}
	//	}

	return ret;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	b2db      	uxtb	r3, r3
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <uartReceiveDMA>:
 *
 * NOTE2: huart->Instance->SR koşulunda veri tam zamanında alınamadığı testlerde görülmüştür.
 * 		sadece HAL_UART_Receive_DMA() fonksiyonu kullanılması düşünülebilir.
 */
uint8_t uartReceiveDMA(void *handle, uint8_t *bufferPtr, uint8_t size)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	71fb      	strb	r3, [r7, #7]
	//		//! Read Received data from UART Data Register(DR)
	//		HAL_UART_Receive_DMA(huart, bufferPtr, size);
	//	}

	//UART_HandleTypeDef *huart = (void *)handle;	//generic tasarlanan handle gerekli olan handle tipine cast edilir.
	int32_t ret = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]

		if(HAL_OK == HAL_UART_Receive_DMA(handle, bufferPtr, size))
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	b29b      	uxth	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7fb fe34 	bl	8005090 <HAL_UART_Receive_DMA>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <uartReceiveDMA+0x2c>
		{
			ret = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e001      	b.n	8009438 <uartReceiveDMA+0x30>
		}
		else
		{
			ret = 1;
 8009434:	2301      	movs	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
		}

	return ret;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	b2db      	uxtb	r3, r3
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <malloc>:
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <malloc+0xc>)
 8009446:	4601      	mov	r1, r0
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f000 b82b 	b.w	80094a4 <_malloc_r>
 800944e:	bf00      	nop
 8009450:	20000098 	.word	0x20000098

08009454 <free>:
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <free+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f000 b8f3 	b.w	8009644 <_free_r>
 800945e:	bf00      	nop
 8009460:	20000098 	.word	0x20000098

08009464 <sbrk_aligned>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	4e0e      	ldr	r6, [pc, #56]	; (80094a0 <sbrk_aligned+0x3c>)
 8009468:	460c      	mov	r4, r1
 800946a:	6831      	ldr	r1, [r6, #0]
 800946c:	4605      	mov	r5, r0
 800946e:	b911      	cbnz	r1, 8009476 <sbrk_aligned+0x12>
 8009470:	f000 f8ac 	bl	80095cc <_sbrk_r>
 8009474:	6030      	str	r0, [r6, #0]
 8009476:	4621      	mov	r1, r4
 8009478:	4628      	mov	r0, r5
 800947a:	f000 f8a7 	bl	80095cc <_sbrk_r>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	d00a      	beq.n	8009498 <sbrk_aligned+0x34>
 8009482:	1cc4      	adds	r4, r0, #3
 8009484:	f024 0403 	bic.w	r4, r4, #3
 8009488:	42a0      	cmp	r0, r4
 800948a:	d007      	beq.n	800949c <sbrk_aligned+0x38>
 800948c:	1a21      	subs	r1, r4, r0
 800948e:	4628      	mov	r0, r5
 8009490:	f000 f89c 	bl	80095cc <_sbrk_r>
 8009494:	3001      	adds	r0, #1
 8009496:	d101      	bne.n	800949c <sbrk_aligned+0x38>
 8009498:	f04f 34ff 	mov.w	r4, #4294967295
 800949c:	4620      	mov	r0, r4
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	20000a90 	.word	0x20000a90

080094a4 <_malloc_r>:
 80094a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a8:	1ccd      	adds	r5, r1, #3
 80094aa:	f025 0503 	bic.w	r5, r5, #3
 80094ae:	3508      	adds	r5, #8
 80094b0:	2d0c      	cmp	r5, #12
 80094b2:	bf38      	it	cc
 80094b4:	250c      	movcc	r5, #12
 80094b6:	2d00      	cmp	r5, #0
 80094b8:	4607      	mov	r7, r0
 80094ba:	db01      	blt.n	80094c0 <_malloc_r+0x1c>
 80094bc:	42a9      	cmp	r1, r5
 80094be:	d905      	bls.n	80094cc <_malloc_r+0x28>
 80094c0:	230c      	movs	r3, #12
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	2600      	movs	r6, #0
 80094c6:	4630      	mov	r0, r6
 80094c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095a0 <_malloc_r+0xfc>
 80094d0:	f000 f868 	bl	80095a4 <__malloc_lock>
 80094d4:	f8d8 3000 	ldr.w	r3, [r8]
 80094d8:	461c      	mov	r4, r3
 80094da:	bb5c      	cbnz	r4, 8009534 <_malloc_r+0x90>
 80094dc:	4629      	mov	r1, r5
 80094de:	4638      	mov	r0, r7
 80094e0:	f7ff ffc0 	bl	8009464 <sbrk_aligned>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	4604      	mov	r4, r0
 80094e8:	d155      	bne.n	8009596 <_malloc_r+0xf2>
 80094ea:	f8d8 4000 	ldr.w	r4, [r8]
 80094ee:	4626      	mov	r6, r4
 80094f0:	2e00      	cmp	r6, #0
 80094f2:	d145      	bne.n	8009580 <_malloc_r+0xdc>
 80094f4:	2c00      	cmp	r4, #0
 80094f6:	d048      	beq.n	800958a <_malloc_r+0xe6>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	4631      	mov	r1, r6
 80094fc:	4638      	mov	r0, r7
 80094fe:	eb04 0903 	add.w	r9, r4, r3
 8009502:	f000 f863 	bl	80095cc <_sbrk_r>
 8009506:	4581      	cmp	r9, r0
 8009508:	d13f      	bne.n	800958a <_malloc_r+0xe6>
 800950a:	6821      	ldr	r1, [r4, #0]
 800950c:	1a6d      	subs	r5, r5, r1
 800950e:	4629      	mov	r1, r5
 8009510:	4638      	mov	r0, r7
 8009512:	f7ff ffa7 	bl	8009464 <sbrk_aligned>
 8009516:	3001      	adds	r0, #1
 8009518:	d037      	beq.n	800958a <_malloc_r+0xe6>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	442b      	add	r3, r5
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	f8d8 3000 	ldr.w	r3, [r8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d038      	beq.n	800959a <_malloc_r+0xf6>
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	42a2      	cmp	r2, r4
 800952c:	d12b      	bne.n	8009586 <_malloc_r+0xe2>
 800952e:	2200      	movs	r2, #0
 8009530:	605a      	str	r2, [r3, #4]
 8009532:	e00f      	b.n	8009554 <_malloc_r+0xb0>
 8009534:	6822      	ldr	r2, [r4, #0]
 8009536:	1b52      	subs	r2, r2, r5
 8009538:	d41f      	bmi.n	800957a <_malloc_r+0xd6>
 800953a:	2a0b      	cmp	r2, #11
 800953c:	d917      	bls.n	800956e <_malloc_r+0xca>
 800953e:	1961      	adds	r1, r4, r5
 8009540:	42a3      	cmp	r3, r4
 8009542:	6025      	str	r5, [r4, #0]
 8009544:	bf18      	it	ne
 8009546:	6059      	strne	r1, [r3, #4]
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	bf08      	it	eq
 800954c:	f8c8 1000 	streq.w	r1, [r8]
 8009550:	5162      	str	r2, [r4, r5]
 8009552:	604b      	str	r3, [r1, #4]
 8009554:	4638      	mov	r0, r7
 8009556:	f104 060b 	add.w	r6, r4, #11
 800955a:	f000 f829 	bl	80095b0 <__malloc_unlock>
 800955e:	f026 0607 	bic.w	r6, r6, #7
 8009562:	1d23      	adds	r3, r4, #4
 8009564:	1af2      	subs	r2, r6, r3
 8009566:	d0ae      	beq.n	80094c6 <_malloc_r+0x22>
 8009568:	1b9b      	subs	r3, r3, r6
 800956a:	50a3      	str	r3, [r4, r2]
 800956c:	e7ab      	b.n	80094c6 <_malloc_r+0x22>
 800956e:	42a3      	cmp	r3, r4
 8009570:	6862      	ldr	r2, [r4, #4]
 8009572:	d1dd      	bne.n	8009530 <_malloc_r+0x8c>
 8009574:	f8c8 2000 	str.w	r2, [r8]
 8009578:	e7ec      	b.n	8009554 <_malloc_r+0xb0>
 800957a:	4623      	mov	r3, r4
 800957c:	6864      	ldr	r4, [r4, #4]
 800957e:	e7ac      	b.n	80094da <_malloc_r+0x36>
 8009580:	4634      	mov	r4, r6
 8009582:	6876      	ldr	r6, [r6, #4]
 8009584:	e7b4      	b.n	80094f0 <_malloc_r+0x4c>
 8009586:	4613      	mov	r3, r2
 8009588:	e7cc      	b.n	8009524 <_malloc_r+0x80>
 800958a:	230c      	movs	r3, #12
 800958c:	603b      	str	r3, [r7, #0]
 800958e:	4638      	mov	r0, r7
 8009590:	f000 f80e 	bl	80095b0 <__malloc_unlock>
 8009594:	e797      	b.n	80094c6 <_malloc_r+0x22>
 8009596:	6025      	str	r5, [r4, #0]
 8009598:	e7dc      	b.n	8009554 <_malloc_r+0xb0>
 800959a:	605b      	str	r3, [r3, #4]
 800959c:	deff      	udf	#255	; 0xff
 800959e:	bf00      	nop
 80095a0:	20000a8c 	.word	0x20000a8c

080095a4 <__malloc_lock>:
 80095a4:	4801      	ldr	r0, [pc, #4]	; (80095ac <__malloc_lock+0x8>)
 80095a6:	f000 b84b 	b.w	8009640 <__retarget_lock_acquire_recursive>
 80095aa:	bf00      	nop
 80095ac:	20000bd0 	.word	0x20000bd0

080095b0 <__malloc_unlock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__malloc_unlock+0x8>)
 80095b2:	f000 b846 	b.w	8009642 <__retarget_lock_release_recursive>
 80095b6:	bf00      	nop
 80095b8:	20000bd0 	.word	0x20000bd0

080095bc <memset>:
 80095bc:	4402      	add	r2, r0
 80095be:	4603      	mov	r3, r0
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d100      	bne.n	80095c6 <memset+0xa>
 80095c4:	4770      	bx	lr
 80095c6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ca:	e7f9      	b.n	80095c0 <memset+0x4>

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d06      	ldr	r5, [pc, #24]	; (80095e8 <_sbrk_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f7 fbf6 	bl	8000dc8 <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000bcc 	.word	0x20000bcc

080095ec <__errno>:
 80095ec:	4b01      	ldr	r3, [pc, #4]	; (80095f4 <__errno+0x8>)
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20000098 	.word	0x20000098

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4d0d      	ldr	r5, [pc, #52]	; (8009630 <__libc_init_array+0x38>)
 80095fc:	4c0d      	ldr	r4, [pc, #52]	; (8009634 <__libc_init_array+0x3c>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	2600      	movs	r6, #0
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	4d0b      	ldr	r5, [pc, #44]	; (8009638 <__libc_init_array+0x40>)
 800960a:	4c0c      	ldr	r4, [pc, #48]	; (800963c <__libc_init_array+0x44>)
 800960c:	f000 f866 	bl	80096dc <_init>
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	f855 3b04 	ldr.w	r3, [r5], #4
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	08009720 	.word	0x08009720
 8009634:	08009720 	.word	0x08009720
 8009638:	08009720 	.word	0x08009720
 800963c:	08009724 	.word	0x08009724

08009640 <__retarget_lock_acquire_recursive>:
 8009640:	4770      	bx	lr

08009642 <__retarget_lock_release_recursive>:
 8009642:	4770      	bx	lr

08009644 <_free_r>:
 8009644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009646:	2900      	cmp	r1, #0
 8009648:	d044      	beq.n	80096d4 <_free_r+0x90>
 800964a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964e:	9001      	str	r0, [sp, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f1a1 0404 	sub.w	r4, r1, #4
 8009656:	bfb8      	it	lt
 8009658:	18e4      	addlt	r4, r4, r3
 800965a:	f7ff ffa3 	bl	80095a4 <__malloc_lock>
 800965e:	4a1e      	ldr	r2, [pc, #120]	; (80096d8 <_free_r+0x94>)
 8009660:	9801      	ldr	r0, [sp, #4]
 8009662:	6813      	ldr	r3, [r2, #0]
 8009664:	b933      	cbnz	r3, 8009674 <_free_r+0x30>
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	6014      	str	r4, [r2, #0]
 800966a:	b003      	add	sp, #12
 800966c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009670:	f7ff bf9e 	b.w	80095b0 <__malloc_unlock>
 8009674:	42a3      	cmp	r3, r4
 8009676:	d908      	bls.n	800968a <_free_r+0x46>
 8009678:	6825      	ldr	r5, [r4, #0]
 800967a:	1961      	adds	r1, r4, r5
 800967c:	428b      	cmp	r3, r1
 800967e:	bf01      	itttt	eq
 8009680:	6819      	ldreq	r1, [r3, #0]
 8009682:	685b      	ldreq	r3, [r3, #4]
 8009684:	1949      	addeq	r1, r1, r5
 8009686:	6021      	streq	r1, [r4, #0]
 8009688:	e7ed      	b.n	8009666 <_free_r+0x22>
 800968a:	461a      	mov	r2, r3
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	b10b      	cbz	r3, 8009694 <_free_r+0x50>
 8009690:	42a3      	cmp	r3, r4
 8009692:	d9fa      	bls.n	800968a <_free_r+0x46>
 8009694:	6811      	ldr	r1, [r2, #0]
 8009696:	1855      	adds	r5, r2, r1
 8009698:	42a5      	cmp	r5, r4
 800969a:	d10b      	bne.n	80096b4 <_free_r+0x70>
 800969c:	6824      	ldr	r4, [r4, #0]
 800969e:	4421      	add	r1, r4
 80096a0:	1854      	adds	r4, r2, r1
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	6011      	str	r1, [r2, #0]
 80096a6:	d1e0      	bne.n	800966a <_free_r+0x26>
 80096a8:	681c      	ldr	r4, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	6053      	str	r3, [r2, #4]
 80096ae:	440c      	add	r4, r1
 80096b0:	6014      	str	r4, [r2, #0]
 80096b2:	e7da      	b.n	800966a <_free_r+0x26>
 80096b4:	d902      	bls.n	80096bc <_free_r+0x78>
 80096b6:	230c      	movs	r3, #12
 80096b8:	6003      	str	r3, [r0, #0]
 80096ba:	e7d6      	b.n	800966a <_free_r+0x26>
 80096bc:	6825      	ldr	r5, [r4, #0]
 80096be:	1961      	adds	r1, r4, r5
 80096c0:	428b      	cmp	r3, r1
 80096c2:	bf04      	itt	eq
 80096c4:	6819      	ldreq	r1, [r3, #0]
 80096c6:	685b      	ldreq	r3, [r3, #4]
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	bf04      	itt	eq
 80096cc:	1949      	addeq	r1, r1, r5
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	6054      	str	r4, [r2, #4]
 80096d2:	e7ca      	b.n	800966a <_free_r+0x26>
 80096d4:	b003      	add	sp, #12
 80096d6:	bd30      	pop	{r4, r5, pc}
 80096d8:	20000a8c 	.word	0x20000a8c

080096dc <_init>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	bf00      	nop
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr

080096e8 <_fini>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	bf00      	nop
 80096ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ee:	bc08      	pop	{r3}
 80096f0:	469e      	mov	lr, r3
 80096f2:	4770      	bx	lr
